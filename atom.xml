<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Home Assistant]]></title>
  <link href="https://home-assistant.io/atom.xml" rel="self"/>
  <link href="https://home-assistant.io/"/>
  <updated>2016-02-20T17:05:53+00:00</updated>
  <id>https://home-assistant.io/</id>
  <author>
    <name><![CDATA[Paulus Schoutsen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Community Highlights]]></title>
    <link href="https://home-assistant.io/blog/2016/02/20/community-highlights/"/>
    <updated>2016-02-20T09:06:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/20/community-highlights</id>
    <content type="html"><![CDATA[<p>Home Assistant land has been busy and a lot of people have been creating awesome stuff. We’ve added <a href="https://home-assistant.io/cookbook/">a cookbook section</a> to the website full of examples how you can automate different things. Make sure you take a look and share your own recipes too!</p>

<h3><a class="title-link" name="home-automation-demo-by-part-of-the-thing" href="#home-automation-demo-by-part-of-the-thing"></a> Home automation demo by Part of the Thing</h3>

<div class="videoWrapper">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/Mc_29EC3aZw" frameborder="0" allowfullscreen=""></iframe>
</div>

<h3><a class="title-link" name="haaska---alexa-skill-adapter-for-home-assistant" href="#haaska---alexa-skill-adapter-for-home-assistant"></a> Haaska - Alexa Skill Adapter for Home Assistant</h3>

<p>Haaska allows you to control lights, switches, and scenes exposed by your Home Assistant instance using an Amazon Echo. This is different from our own <a href="https://home-assistant.io/components/alexa/">Alexa</a> component because it will teach the Amazon Echo directly about the devices instead of teaching it to talk to Home Assistant. It will not allow you to use custom sentences but it will allow you to skip the ‘Ask Home Assistant’ part when giving commands:</p>

<ul>
  <li>“Alexa, set kitchen to twenty percent”</li>
  <li>“Alexa, turn on evening scene”</li>
  <li>“Alexa, turn off bedroom light”</li>
</ul>

<p><a href="https://github.com/auchter/haaska">Haaska on GitHub</a></p>

<h3><a class="title-link" name="integrating-home-assistant-with-homekit" href="#integrating-home-assistant-with-homekit"></a> Integrating Home Assistant with HomeKit</h3>

<p>Contributor Maddox has created a plugin for HomeBridge, an open-source HomeKit bridge. This will allow you to control your home using Siri on your Apple devices. HomeBridge has recently restructured so you’ll have to access the plugin in the legacy plugin package.</p>

<p>Example config.json entry to load Home Assistant:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key"><span class="delimiter">&quot;</span><span class="content">platforms</span><span class="delimiter">&quot;</span></span>: [
    {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">platform</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">HomeAssistant</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">HomeAssistant</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">host</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://192.168.1.50:8123</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">password</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">xxx</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">supported_types</span><span class="delimiter">&quot;</span></span>: [<span class="string"><span class="delimiter">&quot;</span><span class="content">light</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">switch</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">media_player</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">scene</span><span class="delimiter">&quot;</span></span>]
    }
]
</pre></div>
</div>
</div>

<p><a href="https://github.com/nfarina/homebridge">HomeBridge on GitHub</a><br />
<a href="https://github.com/nfarina/homebridge-legacy-plugins">HomeBridge Legacy Plugins on GitHub</a><br />
<a href="https://github.com/nfarina/homebridge-legacy-plugins/blob/master/platforms/HomeAssistant.js">Home Assistant on HomeBridge instructions</a></p>

<h3><a class="title-link" name="custom-alarm-system-with-home-assistant" href="#custom-alarm-system-with-home-assistant"></a> Custom alarm system with Home Assistant</h3>

<p>User thaijames <a href="https://automic.us/forum/viewtopic.php?f=4&amp;t=43&amp;hilit=nfc">describes in the Home Assistant forums</a> how he has created his own NFC-based alarm system using Home Assistant, DIY components and Garfield dolls.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2016-02-community-highlights/garfield-nfc.png" />
Hold your NFC tag against the belly of Garfield to unlock the alarm.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-room audio with Snapcast, Mopidy, and Home Assistant]]></title>
    <link href="https://home-assistant.io/blog/2016/02/18/multi-room-audio-with-snapcast/"/>
    <updated>2016-02-18T05:10:56+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/18/multi-room-audio-with-snapcast</id>
    <content type="html"><![CDATA[<p>Would you like to listen to music in every room in your home, controlled from one source? Then multi-room audio is for you.</p>

<p>Multi-room audio can be achieved by having a computer attached to speakers in every room. On each computer, services run to play and/or control the audio. With this DIY approach, the kind of computer and speakers is very much up to you. It could be your desktop computer with attached powered speakers, your HTPC hooked up to your TV and receiver, a Raspberry Pi with Amp or DAC, or even an Android device.</p>

<p>You’ll need two key software packages, besides Home Assistant. The first is <a href="https://www.mopidy.com/">Mopidy</a>, a music server that can play local files, or connect to streaming music services like Spotify. The second is <a href="https://github.com/badaix/snapcast/">Snapcast</a>, which enables synchronized audio streaming across your network. Both can be integrated into Home Assistant. Each room audio device will run an instance of the Snapcast client, and optionally a Mopidy instance. Your server will run a special instance of Mopidy and the Snapcast server.</p>

<p>Finally, you also need a player to control Mopidy. Any MPD-compatible player will work, and there are several <a href="https://docs.mopidy.com/en/latest/ext/web/#ext-web">Mopidy-only web-based options</a> available. On Android, <a href="https://play.google.com/store/apps/details?id=se.anil.remotedy">Remotedy</a> is particularly nice since you can access multiple Mopidy instances in one place.</p>

<p>Home Assistant will provide device status, and volume control for each room. If you want to play music in all your rooms (on all your clients), access the server instance of Mopidy. If you want to play music only in a specific room, access that specific Mopidy instance. If you’re using a web UI for Mopidy, you can add links to each instance in Home Assistant with the <a href="https://home-assistant.io/components/weblink/">weblink</a> component.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2016-02-snapcast/diagram.png" />
</p>

<!--more-->

<h2>Staging</h2>

<ul>
  <li><a href="https://www.mopidy.com/">Install</a> Mopidy (2.0.0 or greater)</li>
  <li><a href="https://github.com/badaix/snapcast/releases/">Download</a> and <a href="https://github.com/badaix/snapcast/tree/v0.5.0-beta-1#installation">Install</a> Snapcast (0.5.0 or greater)</li>
</ul>

<h2>Configure Mopidy</h2>

<p>Mopidy can be run with multiple configuration files, each extending the previous file. This is helpful when we’re running multiple instances with varying functionality.</p>

<h3>core.conf</h3>
<p>The core configuration is shared between all instances:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[mpd]
hostname = ::

[http]
hostname = ::

[audio]
output = alsasink

[spotify]
username = &lt;redacted&gt;
password = &lt;redacted&gt;
</pre></div>
</div>
</div>

<h3>local.conf</h3>
<p>Add the local configuration on computers that have local media files:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[local]
media_dir = &lt;your/music/here&gt;
</pre></div>
</div>
</div>

<h3>snapcast.conf</h3>
<p>Finally, the Mopidy instance that connects with Snapcast needs special configuration. Run on a different port to avoid conflicts if you have a second Mopidy instance running on your computer. The audio output is sent to a named pipe - Snapcast will read from there. Note that you may have to adjust the audio output attribute depending on your system and audio sources.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[mpd]
hostname = ::
port = 6601

[http]
hostname = ::
port = 6681

[audio]
output = audioresample ! audio/x-raw,rate=48000,channels=2,format=S16LE ! audioconvert ! wavenc ! filesink location=/tmp/snapfifo
</pre></div>
</div>
</div>

<h2>Run Mopidy</h2>

<p>To run a room-specific instance:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ mopidy --config $CONF_DIR/core.conf
</pre></div>
</div>
</div>

<p>To run a room-specific instance with local media:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ mopidy --config $CONF_DIR/core.conf:$CONF_DIR/local.conf
</pre></div>
</div>
</div>

<p>To run the special Snapcast-connected instance (with local media):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ mopidy --config $CONF_DIR/core.conf:$CONF_DIR/local.conf:$CONF_DIR/snapcast.conf
</pre></div>
</div>
</div>

<h2>Run Snapcast</h2>

<p>Start the <code>snapserver</code> on the same server running Mopidy with the snapcast configuration.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ snapserver   # or use systemd
</pre></div>
</div>
</div>

<p>Start the <code>snapclient</code> on computers that will be playing audio.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ snapclient   # or use systemd, add -h &lt;server host&gt; if necessary
</pre></div>
</div>
</div>

<h2>Configure Snapcast</h2>

<p>There are a number of snapcast configuration options, but the one relevant to Home Assistant is the client names. You can set them in the snapserver configuration file, by default located at <code>~/.config/Snapcast/settings.json</code>. Only edit this file while the <code>snapserver</code> is not running. Modify the <code>name</code> JSON value to your liking - this is how the client will be named in Home Assistant.</p>

<h2>Configure Home Assistant</h2>

<p>Use the <a href="https://home-assistant.io/components/media_player.mpd/">mpd</a> and <a href="https://home-assistant.io/components/media_player.snapcast/">snapcast</a> components. Optionally, use <a href="https://home-assistant.io/components/weblink/">weblink</a> to provide easy access to a Mopidy web UI.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">media_player</span>:
- <span class="string"><span class="content">platform: snapcast</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">xxxxx</span></span>
- <span class="string"><span class="content">platform: mpd</span></span>
  <span class="key">server</span>: <span class="string"><span class="content">xxxx</span></span>
  <span class="key">location</span>: <span class="string"><span class="content">Multi-Room Controller</span></span>
- <span class="string"><span class="content">platform: mpd</span></span>
  <span class="key">server</span>: <span class="string"><span class="content">xxx</span></span>
  <span class="key">location</span>: <span class="string"><span class="content">Room 1</span></span>

<span class="key">weblink</span>:
  <span class="key">entities</span>:
  - <span class="string"><span class="content">name: Multi-Room Player</span></span>
    <span class="key">url</span>: <span class="string"><span class="content">xxxx</span></span>
</pre></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.13: Speedtest.net, Bloomsky, Splunk and Garage Doors]]></title>
    <link href="https://home-assistant.io/blog/2016/02/13/speedtest-bloomsky-splunk-and-garage-doors/"/>
    <updated>2016-02-13T06:15:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/13/speedtest-bloomsky-splunk-and-garage-doors</id>
    <content type="html"><![CDATA[<p>The focus of 0.13 was on test coverage, big cheers to <a href="https://github.com/rmkraus/">@rmkraus</a> for his hard work on this. I’m proud to announce that we’ve hit the 90% test coverage of the core + important components. A big milestone for the project.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2016-02-release-13/input_select__input_boolean__weblink.png" />
  Examples of the new <a href="https://home-assistant.io/components/input_select/">input_select</a> and <a href="https://home-assistant.io/components/weblink/">weblink</a> components.
</p>

<p>Not only did we gain a lot of test coverage, we also attracted a lot of new developers that contributed a variety of components and platforms:</p>

<p><img src="https://home-assistant.io/images/supported_brands/speedtest.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="70" /><img src="https://home-assistant.io/images/supported_brands/apcupsd.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/splunk.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/bloomsky.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/ubiquiti.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/networx.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/samsung.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /></p>

<ul>
  <li>Core: Add service to restart Home Assistant (<a href="https://github.com/rmkraus/">@rmkraus</a>)</li>
  <li>Core: Allow device to report as unavailable (<a href="https://github.com/MartinHjelmare/">@MartinHjelmare</a>)</li>
  <li>Core: Allow overriding polling interval in platforms and <a href="https://home-assistant.io/cookbook/customize_polling_interval/">via config</a> (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Frontend: support for a <a href="https://home-assistant.io/components/group/">default view</a> have been added to replace the show all view (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Component: Added <a href="https://home-assistant.io/components/apcupsd/">apcupsd</a> component (<a href="https://github.com/flyte/">@flyte</a>)</li>
  <li>Component: Added component to log values to <a href="https://home-assistant.io/components/splunk/">Splunk</a> (<a href="https://github.com/miniconfig/">@miniconfig</a>)</li>
  <li>Component: Added <a href="https://home-assistant.io/components/garage_door/">garage door</a> component including <a href="https://home-assistant.io/components/garage_door.wink/">Wink</a> support (<a href="https://github.com/xrolfex/">@xrolfex</a>)</li>
  <li>Component: Added <a href="https://home-assistant.io/components/input_select/">input_select</a> component (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Component: Added <a href="https://home-assistant.io/components/proximity/">proximity</a> component to track people closest to a location (<a href="https://github.com/nickwaring/">@nickwaring</a>, <a href="https://github.com/Bart274/">@Bart274</a> )</li>
  <li>Component: Added support for <a href="https://home-assistant.io/components/bloomsky/">Bloomsky Weather Station</a> (<a href="https://github.com/haraldnagel/">@haraldnagel</a>)</li>
  <li>Component: Added support for pushing stats to <a href="https://home-assistant.io/components/graphite/">graphite</a> (<a href="https://github.com/kk7ds/">@kk7ds</a>)</li>
  <li>Component: Added support for <a href="https://home-assistant.io/components/scsgate/">SCSGate</a> devices (<a href="https://github.com/flavio/">@flavio</a>)</li>
  <li>Component: Added <a href="https://home-assistant.io/components/weblink/">weblink</a> component to link to other pages (<a href="https://github.com/MagnusKnutas/">@MagnusKnutas</a>)</li>
  <li>Component: Support for Ubiquiti mFI <a href="https://home-assistant.io/components/sensor.mfi/">sensors</a> and <a href="https://home-assistant.io/components/switch.mfi/">switchable devices</a> added (<a href="https://github.com/kk7ds/">@kk7ds</a>)</li>
  <li>Alarm control panel: Added <a href="https://home-assistant.io/components/alarm_control_panel.nx584/">Caddx/GE/Interlogix NetworX</a> support (<a href="https://github.com/kk7ds/">@kk7ds</a>)</li>
  <li>Camera: <a href="https://home-assistant.io/components/camera.mjpeg/">MJPEG</a> camera’s will now show real stream instead of a 2fps stream (<a href="https://github.com/stjohnjohnson/">@stjohnjohnson</a>)</li>
  <li>Camera: Added <a href="https://home-assistant.io/components/camera.uvc/">Unifi video cameras</a> support (<a href="https://github.com/kk7ds/">@kk7ds</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.aruba/">Aruba</a> platform now uses SSH instead of telnet (<a href="https://github.com/carlosmgr/">@carlosmgr</a>)</li>
  <li>History: Show correct graphs for thermostats (<a href="https://github.com/sdague/">@sdague</a>)</li>
  <li>Light: Added <a href="https://home-assistant.io/components/light.mysensors/">MySensors</a> support (<a href="https://github.com/MartinHjelmare/">@MartinHjelmare</a>)</li>
  <li>Lock: Added <a href="https://home-assistant.io/components/lock.verisure/">Verisure</a> support (<a href="https://github.com/turbokongen/">@turbokongen</a>)</li>
  <li>Media Player: Added <a href="https://home-assistant.io/components/media_player.samsungtv/">Samsung TV</a> support (<a href="https://github.com/stefan-jonasson/">@stefan-jonasson</a>)</li>
  <li>Media Player: Added <a href="https://home-assistant.io/components/media_player.snapcast/">Snapcast</a> support (<a href="https://github.com/happyleavesaoc/">@happyleavesaoc</a>)</li>
  <li>MQTT: Allow using templates in <a href="https://home-assistant.io/components/mqtt/#publish-service/">publish service</a> (<a href="https://github.com/flyte/">@flyte</a>)</li>
  <li>Notify: Added <a href="https://home-assistant.io/components/notify.rest/">REST</a> support (<a href="https://github.com/Theb-1/">@Theb-1</a>)</li>
  <li>Sensor: Added <a href="https://home-assistant.io/components/sensor.speedtest/">Speedtest.net</a> support (<a href="https://github.com/nkgilley/">@nkgilley</a>)</li>
  <li>Switch: Added <a href="https://home-assistant.io/components/switch.template/">template</a> platform (<a href="https://github.com/pavoni/">@pavoni</a>)</li>
  <li>Thermostat: Support for <a href="https://home-assistant.io/components/thermostat.honeywell/">Honeywell</a> in the US added (<a href="https://github.com/kk7ds/">@kk7ds</a>)</li>
  <li>Z-Wave: Allow <a href="https://home-assistant.io/components/zwave/#configuration/">configuring polling</a> and <a href="https://home-assistant.io/components/zwave/#events/">support scenes</a> (<a href="https://github.com/lukas-hetzenecker/">@lukas-hetzenecker</a>)</li>
  <li>Bug fixes and improvements by <a href="https://github.com/persandstrom/">@persandstrom</a>, <a href="https://github.com/fabaff/">@fabaff</a>, <a href="https://github.com/balloob/">@balloob</a>, <a href="https://github.com/pavoni/">@pavoni</a>, <a href="https://github.com/philipbl/">@philipbl</a>, <a href="https://github.com/MartinHjelmare/">@MartinHjelmare</a>, <a href="https://github.com/rmkraus/">@rmkraus</a>, <a href="https://github.com/molobrakos/">@molobrakos</a>, <a href="https://github.com/lukas-hetzenecker/">@lukas-hetzenecker</a>, <a href="https://github.com/TangoAlpha/">@TangoAlpha</a>, <a href="https://github.com/deisi/">@deisi</a>, <a href="https://github.com/Danielhiversen/">@Danielhiversen</a>, <a href="https://github.com/roqeer/">@roqeer</a>, <a href="https://github.com/jaharkes/">@jaharkes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classifying the Internet of Things]]></title>
    <link href="https://home-assistant.io/blog/2016/02/12/classifying-the-internet-of-things/"/>
    <updated>2016-02-12T06:31:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/12/classifying-the-internet-of-things</id>
    <content type="html"><![CDATA[<p>The core of home automation is knowing what’s going on. The faster we know about a state change, the better we can serve the user. If you want to have your lights to turn on when you arrive at home, it doesn’t help if it only knows about it after you’ve already opened the door and manually (!!) turned on the light.</p>

<p>Each smart device consists of the ‘normal’ device and the piece that makes it ‘smart’: the connectivity. The connectivity part of a device can consists of either control, state or both.</p>

<p>State describes what a device is up to right now. For example, a light can be on with a red color and a medium brightness.</p>

<p>Control is about controlling the smart device by sending commands via an API. These commands can vary from configuring how a device works till mimicking how a user would interact with a device. A media player can allow skipping to the next track and a sensor could allow to configure its sensitivity or polling interval.</p>

<p>The Home Assistant APIs are setup to be as convenient as possible. However, a network is always as weak as it’s weakest link. In our case these are the integrations. Take for example controlling a light that does not report state. The only state Home Assistant can report on after sending a command is the assumed state: what do we expect the state of the light to be if the command worked.</p>

<p>We want our users to get the best home automation experience out there and this starts with making sure they have devices that work well with Home Assistant. That’s why we will start applying the following classifiers to our integrations:</p>

<p><a name="classifiers"></a></p>
<table>
  <tr>
    <th colspan="2">Classifier</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><i class="icon-adjust"></i></td>
    <td style="white-space: nowrap;">Assumed State</td>
    <td>
      We are unable to get the state of the device. Best we can do is to assume the state based on our last command.
    </td>
  </tr>

  <tr>
    <td><i class="icon-cloud-upload"></i></td>
    <td>Cloud Polling</td>
    <td>
      Integration of this device happens via the cloud and requires an active internet connection. Polling the state means that an update might be noticed later.
    </td>
  </tr>

  <tr>
    <td><i class="icon-cloud-download"></i></td>
    <td>Cloud Push</td>
    <td>
      Integration of this device happens via the cloud and requires an active internet connection. Home Assistant will be notified as soon as a new state is available.
    </td>
  </tr>

  <tr>
    <td><i class="icon-download-alt"></i></td>
    <td>Local Polling</td>
    <td>
      Offers direct communication with device. Polling the state means that an update might be noticed later.
    </td>
  </tr>

  <tr>
    <td><i class="icon-upload-alt"></i></td>
    <td>Local Push</td>
    <td>
      Offers direct communication with device. Home Assistant will be notified as soon as a new state is available.
    </td>
  </tr>
</table>

<p>The background to how we got to these classifiers can be read after the break.<br />
<!--more--></p>

<h2><a class="title-link" name="state" href="#state"></a> State</h2>

<p>How state is communicated can be broken down into 5 categories. They are not mutually exclusive - a device state can be available both via the cloud and local connectivity.</p>

<h3><a class="title-link" name="no-state-available" href="#no-state-available"></a> No state available</h3>
<p>These are devices that do not have the capabilities to make their state available. They only allow to be controlled. For example, devices with infrared remote controls like TVs and ACs. You can press the turn on button on the remote but can only assume that your command was received and executed successfully. The device might not be powered or something is blocking the infrared receiver.</p>

<p>Home automation will have to approach such devices based on the assumption that it’s commands are received correctly: using optimistic updates. This means that after sending a command it will update the state of the device as if the command was received successfully.</p>

<p>Advantages:</p>

<ul>
  <li>None</li>
</ul>

<p>Disadvantages:</p>

<ul>
  <li>Home automation will assume the wrong state if the the command is not received correctly or if the device is controlled in any other way outside of the home automation system.</li>
</ul>

<h3><a class="title-link" name="polling-the-cloud" href="#polling-the-cloud"></a> Polling the cloud</h3>
<p>These are devices that will only report their state to their own cloud backend. The cloud backend will allow reading the state but will not notify when a new state has arrived. This requires the home automation to check frequently if the state has been updated.</p>

<p>Advantages:</p>

<ul>
  <li>Able to control devices while at home or away.</li>
  <li>Cloud has access to more computing power to mine the device data to suggest optimizations to the user.</li>
</ul>

<p>Disadvantages:</p>

<ul>
  <li>It doesn’t work if the internet is down or the company stops support.</li>
  <li>You are no longer in control about who has access to your data.</li>
</ul>

<h3><a class="title-link" name="cloud-pushing-new-state" href="#cloud-pushing-new-state"></a> Cloud pushing new state</h3>
<p>All off the previous section applies to this one. On top of that the cloud will now notify the home automation when a new state has arrived. This means that as soon as the cloud knows, the home automation knows.</p>

<p>Advantages:</p>

<ul>
  <li>New state known as soon as available in the cloud.</li>
</ul>

<h3><a class="title-link" name="polling-the-local-device" href="#polling-the-local-device"></a> Polling the local device</h3>
<p>These devices will offer an API that is locally accessible. The home automation will have to frequently check if the state has been updated.</p>

<p>Advantages:</p>

<ul>
  <li>Does not depend on the internet</li>
</ul>

<p>Disadvantages:</p>

<ul>
  <li>To be pollable, a device needs to be always online which requires the device to be connected to a power source.</li>
</ul>

<h3><a class="title-link" name="local-device-pushing-new-state" href="#local-device-pushing-new-state"></a> Local device pushing new state</h3>
<p>The best of the best. These devices will send out a notice when they get to a new state. These devices usually use a home automation protocol to pass it’s message to a hub that will do the heavy lifting of managing and notifying subscribers</p>

<p>Advantages:</p>

<ul>
  <li>Near instant delivery of new states.</li>
  <li>Able to get a long battery life by going into deep sleep between state updates.</li>
</ul>

<p>Disadvantages:</p>

<ul>
  <li>If it does not also support polling, home automation will not be made aware of the state after booting up until it changes.</li>
  <li>If using deep sleep and wifi, will suffer a delay when waking up because connecting to WiFi and receiving an IP takes time.</li>
</ul>

<h2><a class="title-link" name="control" href="#control"></a> Control</h2>

<p>Controlling a device can, just like state, be done through cloud and/or local connectivity. But the more important part of control is knowing if your command was a success and the new state of the device.</p>

<h3><a class="title-link" name="no-control-available" href="#no-control-available"></a> No control available</h3>
<p>These devices are not able to be controlled. They will only offer state.</p>

<h3><a class="title-link" name="poll-state-after-sending-command" href="#poll-state-after-sending-command"></a> Poll State after sending command</h3>
<p>These devices will require the state to be polled after sending a command to see if a command was successfull.</p>

<p>Advantages:</p>

<ul>
  <li>The state will be known right after the command was issued.</li>
</ul>

<p>Disadvantages:</p>

<ul>
  <li>It can take time before the state gets updated. How often do we poll and how long do we wait till we consider the command failed? Also, a state may change because of other factors. Difficult to determine if the updated state is because of our command.</li>
</ul>

<h3><a class="title-link" name="device-pushes-state-update" href="#device-pushes-state-update"></a> Device pushes state update</h3>
<p>These devices will not return a new state as a result of the command but instead will push a new state right away. The downside of this approach is that we have to assume that a state update coming in within a certain period of time after a command is related to the command.</p>

<h3><a class="title-link" name="command-returns-new-state" href="#command-returns-new-state"></a> Command returns new state</h3>
<p>The very best. These devices will answer the command with the new state after executing the command.</p>

<h2><a class="title-link" name="classifying-home-assistant" href="#classifying-home-assistant"></a> Classifying Home Assistant</h2>
<p>Home Assistant tries to offer the best experience possible via its APIs. There are different ways of interacting with Home Assistant but all are local.</p>

<ul>
  <li>State polling is available via the REST API</li>
  <li>There is a stream API that will push new states as soon as they arrive to subscribers. This is how the frontend is able to always stay in sync.</li>
  <li>Calling a service on Home Assistant will return all states that changed while the service was executing. This sadly does not always include the new state of devices that push their new state, as they might arrive after the service has finished.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smarter SmartThings with MQTT and Home Assistant]]></title>
    <link href="https://home-assistant.io/blog/2016/02/09/smarter-smart-things-with-mqtt-and-home-assistant/"/>
    <updated>2016-02-09T07:44:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/09/Smarter-Smart-Things-with-MQTT-and-Home-Assistant</id>
    <content type="html"><![CDATA[<p><em>This is a guest post by Home Assistant users <a href="https://github.com/jer">Jeremiah Wuenschel</a> and <a href="https://github.com/stjohnjohnson">St. John Johnson</a>.</em></p>

<p>So you own a <a href="http://smartthings.com">SmartThings</a> Hub. You probably bought it when you were looking to get into the whole Home Automation hobby because it worked with pretty much everything and offered you the ability to automate <strong>anything.</strong> After a week of ownership, you realized that building dashboards and automating required writing way more Groovy then you expected. Then one day you were browsing <a href="https://www.reddit.com/r/homeautomation">reddit</a> and discovered the amazingness that is Home Assistant! A solution that offered dashboards, graphs, working support for Nest, and REAL EASY automation!</p>

<p>You spent your weekend getting everything set up, showing it off to your significant other, but in the end you got stumped when it came to integrating with all your existing SmartThings toys. What do I do now? Should I buy another hub? Should I just buy a Z-Wave stick?</p>

<p>That’s where we came in. We wanted a solution that can bridge the awesomeness of Home Assistant with the SmartThings hub that works with almost everything.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2016-02-smartthings/splash.png" />
</p>

<!--more-->

<h2>Glossary</h2>

<p>This is going to be a pretty detailed tutorial on setting up our SmartThings bridge. However, there are a couple key terms that <em>might</em> be new to you:</p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/MQTT">MQTT</a>: A lightweight message protocol for listening and publishing events that happen. Many home automation platforms have built in support for this <a href="https://home-assistant.io/components/mqtt/">(especially Home Assistant)</a>.</li>
  <li><a href="https://www.docker.com/">Docker</a>: A tool for running applications that are self-contained. No need for installing any dependencies or worrying about conflicts. Installs easily on Linux and OSX.</li>
</ul>

<h2>Setting up the Bridge</h2>

<h3>MQTT</h3>

<p>Assuming that you already have Home Assistant and Smart Things running, you will first want to get an MQTT broker running. There are a handful of <a href="http://mosquitto.org/">MQTT</a> <a href="https://github.com/emqtt/emqttd">brokers</a> available in Open Source land. We chose <a href="http://www.mosca.io/">Mosca</a> for its simplicity.</p>

<p>There is very little you need to do to get Mosca running. The easiest approach is to use <a href="https://www.docker.com/">Docker</a>, and run a command like the following:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ docker run \
    -d \
    --name=&quot;mqtt&quot; \
    -v /opt/mosca:/db \
    -p 1883:1883 \
    matteocollina/mosca
</pre></div>
</div>
</div>

<p>This will start Mosca up inside of a docker container, while keeping persistent storage for Mosca in <code>/opt/mosca</code>. The default configuration is the only thing we need to get things up and running.</p>

<p>If you don’t want to mess with Docker and can get node.js installed without trouble, the <a href="https://github.com/mcollina/mosca#standalone">standalone</a> instructions are all you need.</p>

<h3>MQTT Bridge</h3>

<p>This is the small piece of magic that bridges the gap between MQTT and SmartThings. It is a node.js app, and like Mosca it is probably easiest to install with Docker:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ docker run \
    -d \
    --name=&quot;mqtt-bridge&quot; \
    -v /opt/mqtt-bridge:/config \
    -p 8080:8080 \
    stjohnjohnson/smartthings-mqtt-bridge
</pre></div>
</div>
</div>

<p>The code for this bridge is <a href="https://github.com/stjohnjohnson/smartthings-mqtt-bridge">on Github</a> if you want to start it up independently.</p>

<p>The MQTT Bridge only needs to know where your MQTT broker lives. If you are using these docker commands as-is, edit <code>/opt/mqtt-bridge/config.yml</code> to look like this:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="head"><span class="head">---</span></span>
<span class="key">mqtt</span>:
    <span class="key">host</span>: <span class="string"><span class="content">&lt;IP of the host&gt;</span></span>
</pre></div>
</div>
</div>

<p>Restart the bridge, and you are ready to go:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ docker restart mqtt-bridge
</pre></div>
</div>
</div>

<h3>SmartThings Device</h3>

<p>The next step (and possibly the most confusing) is the device type. Go to the <a href="https://graph.api.smartthings.com/ide/devices">Smart Things Device IDE</a> and <code>Create New Device Handler</code>. Choose <code>From Code</code> and paste in the <a href="https://github.com/stjohnjohnson/smartthings-mqtt-bridge/blob/master/devicetypes/stj/mqtt-bridge.src/mqtt-bridge.groovy">MQTT Bridge Device Code</a>. Click <code>Save</code>, <code>Publish</code>, and then <code>For Me</code>.</p>

<p>Now to install your new Device Handler. Go back to <code>My Devices</code> in the IDE, and click <code>New Device</code>. Enter a name, and pick any random set of characters for the Device Network Id (this will automatically update later). For Type, scroll to the bottom of the list and find your newly created <code>MQTT Bridge</code>. Fill in the other boxes however you like.</p>

<p>Go back to <code>My Devices</code>, and click on your new device in the list. This will bring up a page that allows you to edit your device’s Preferences. Click <code>edit</code> and fill in the 3 pieces of information it asks for.</p>

<ul>
  <li>MQTT Bridge IP Address: &lt;IP address of the MQTT Bridge from the previous step&gt;</li>
  <li>MQTT Bridge Port: &lt;8080 if you have changed nothing in the previous commands&gt;</li>
  <li>MQTT Bridge MAC Address: &lt;Mac address of machine running the Bridge code&gt;</li>
</ul>

<p>This will create the link between SmartThings and the MQTT Bridge.</p>

<h3>SmartThings App</h3>

<p>The last step is to setup the SmartApp. After this, any registered devices will start sending their events to MQTT.</p>

<p>Go to the <a href="https://graph.api.smartthings.com/ide/apps">Smart App IDE</a>. Click <code>New SmartApp</code>, followed by <code>From Code</code>. Paste in the <a href="https://github.com/stjohnjohnson/smartthings-mqtt-bridge/blob/master/smartapps/stj/mqtt-bridge.src/mqtt-bridge.groovy">MQTT Bridge SmartApp code</a> and click <code>Save</code>. Click <code>Publish</code> and then <code>For Me</code>. In the SmartThings mobile app, add the new SmartApp and configure it with your devices and MQTT Bridge device. Clicking <code>done</code> will subscribe SmartThings to your MQTT broker and begin 2-way propagation of events.</p>

<h3>Configure Home Assistant</h3>

<p>To add SmartThings devices to Home Assistant over MQTT, first enable MQTT in Home Assistant:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">mqtt</span>:
  <span class="key">broker</span>: <span class="string"><span class="content">localhost</span></span>
</pre></div>
</div>
</div>

<p>Replace <code>localhost</code> with the location of the running MQTT Broker. Devices from the MQTT Bridge are published to the path <code>/smartthings/&lt;Device Name&gt;/&lt;Atribute&gt;</code></p>

<p>For example, my Dimmer Z-Wave Lamp is called “Fireplace Lights” in SmartThings. The following topics are published:</p>

<table>
  <thead>
    <tr>
      <th>Topic</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>/smartthings/Fireplace Lights/level</td>
      <td>Brightness (0-99)</td>
    </tr>
    <tr>
      <td>/smartthings/Fireplace Lights/switch</td>
      <td>Switch State (on/off)</td>
    </tr>
  </tbody>
</table>

<p>Here is an example Home Assistant config:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">switch</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
  <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Fireplace Lights</span><span class="delimiter">&quot;</span></span>
  <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">/smartthings/Fireplace Lights/switch</span><span class="delimiter">&quot;</span></span>
  <span class="key">command_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">/smartthings/Fireplace Lights/switch</span><span class="delimiter">&quot;</span></span>
  <span class="key">brightness_state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">/smartthings/Fireplace Lights/level</span><span class="delimiter">&quot;</span></span>
  <span class="key">brightness_command_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">/smartthings/Fireplace Lights/level</span><span class="delimiter">&quot;</span></span>
  <span class="key">payload_on</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">on</span><span class="delimiter">&quot;</span></span>
  <span class="key">payload_off</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">off</span><span class="delimiter">&quot;</span></span>
  <span class="key">retain</span>: <span class="string"><span class="content">true</span></span>
</pre></div>
</div>
</div>

<p>We recommend <code>retain: true</code> for every MQTT device in order to keep states in sync when things become disconnected.</p>

<p>Start digging through the <a href="https://home-assistant.io/components/mqtt/">MQTT Components</a> in Home Assistant to find which components map to the new events being published to MQTT.</p>

<h3>Configuring with Docker-Compose</h3>

<p>Our personal preference for starting the whole suite of software is to use a single Docker-Compose file. Just create a file called <code>docker-compose.yml</code> like this:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">mqtt</span>:
    <span class="key">image</span>: <span class="string"><span class="content">matteocollina/mosca</span></span>
    <span class="key">ports</span>:
        - <span class="string"><span class="content">1883:1883</span></span>

<span class="key">mqttbridge</span>:
    <span class="key">image</span>: <span class="string"><span class="content">stjohnjohnson/smartthings-mqtt-bridge</span></span>
    <span class="key">volumes</span>:
        - <span class="string"><span class="content">./mqtt-bridge:/config</span></span>
    <span class="key">ports</span>:
        - <span class="string"><span class="content">8080:8080</span></span>
    <span class="key">links</span>:
        - <span class="string"><span class="content">mqtt</span></span>

<span class="key">homeassistant</span>:
    <span class="key">image</span>: <span class="string"><span class="content">balloob/home-assistant</span></span>
    <span class="key">ports</span>:
        - <span class="string"><span class="content">80:80</span></span>
    <span class="key">volumes</span>:
        - <span class="string"><span class="content">./home-assistant:/config</span></span>
        - <span class="string"><span class="content">/etc/localtime:/etc/localtime:ro</span></span>
    <span class="key">links</span>:
        - <span class="string"><span class="content">mqtt</span></span>
</pre></div>
</div>
</div>

<p>This will start home-assistant, MQTT, and the Bridge, in dependency order. All config can reference the name of the docker container instead of using IP addresses (e.g. mqtt for the broker host in Home Assistant).</p>

<h3>How it works</h3>

<p><strong>HTTP Endpoint</strong>: There are really only 2 ways to communicate with the SmartThings hub that we could find. The easiest approach is to create a RESTful SmartApp authenticated with OAuth that provides state changes via HTTP directly. This approach is pretty straightforward to implement, but it requires communication with the SmartThings cloud service, and can’t be done entirely on your LAN. We hoped to keep all communication internal, and came up with a second approach.</p>

<p><strong>Custom Device Type:</strong> SmartThings custom device types allow developers to define handlers for HTTP events received directly over the local network by the SmartThings hub. Messages received are authenticated by MAC address, and can contain arbitrary strings in their payload. Since a Device Type is only ever tied to a single device, we need to add a SmartApp to the mix in order to translate events between individual devices and our special Home Assistant Bridge device. Here is what we have so far:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>Z-Wave Switch        |
Zigbee motion sensor |&lt;---&gt; Bridge App &lt;---&gt; Bridge Device Type &lt;---&gt; &lt;Local network&gt;
Z-Wave light bulb    |
</pre></div>
</div>
</div>

<p>On the Home Assistant side, there is a powerful platform available based on the MQTT lightweight message bus protocol. Everything from lights to switches to temperature sensors can be defined in Home Assistant as an MQTT component, so it makes for a convenient integration point. This requires an MQTT broker for handling the message bus, and one last piece to translate between the HTTP that SmartThings supports and MQTT.</p>

<p>Here is the final sequence of events:</p>

<p class="img">
  <a href="https://home-assistant.io/images/blog/2016-02-smartthings/SmartThings-HomeAssistant.png">
    <img src="https://home-assistant.io/images/blog/2016-02-smartthings/SmartThings-HomeAssistant.png" alt="SmartThings Bridge Sequence" />
  </a>
  SmartThings Bridge Sequence
</p>

<p>There are a lot of stops along the way for these events, but each piece is a simple translation layer to shuttle the events between systems.</p>

<h3>Future Improvements</h3>
<ul>
  <li><strong>Raspberry pi</strong>: There is a lot of interest in getting this running on the Raspberry Pi. It only requires binaries compiled for ARM, so we plan to get ARM-compatible versions of the containers going at some point.</li>
  <li><strong>Authentication for MQTT</strong>: At the moment, the MQTT bridge doesn’t understand how to authenticate to MQTT, so only unauthenticated MQTT is supported. This is mitigated to some degree if you use our Docker Compose config, because MQTT’s port is not actually shared publicly.</li>
  <li><strong>Authentication for MQTT Bridge</strong>: Right now the bridge expects that anyone subscribing is the SmartThings hub. This could use proper authentication.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.12: Insteon, LIFX, Twitter and ZigBee]]></title>
    <link href="https://home-assistant.io/blog/2016/01/30/insteon-lifx-twitter-and-zigbee/"/>
    <updated>2016-01-30T08:22:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/01/30/insteon-lifx-twitter-and-zigbee</id>
    <content type="html"><![CDATA[<p>Another sprint has come to an end and it seems that we have not slowed down a single bit 🚀. 0.12 is full of new components, platforms and organizational additions.</p>

<p>I would like to give a shout out to <a href="https://github.com/pavoni">Greg Dowling (@pavoni)</a> as every release includes new work from him. He is constantly adding support for new platforms or improving the reliablity of existing components and platforms. Keep up the good work!</p>

<p>This release includes a very frequent requested feature: the ability to organize entities in different tabs in the frontend. See <a href="https://home-assistant.io/demo/">the demo</a> to see this in action and read more in the <a href="https://home-assistant.io/components/group/">group documentation</a> how to get started.</p>

<p class="img">
<a href="https://home-assistant.io/demo/"><img src="https://home-assistant.io/images/blog/2016-01-release-12/views.png" /></a>
Example of the new views in the frontend. <a href="https://home-assistant.io/components/group/">Learn more.</a>
</p>

<p><img src="https://home-assistant.io/images/supported_brands/insteon.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/lifx.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/twitter.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/zigbee.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/google_voice.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /></p>

<ul>
  <li>Binary sensor: <a href="https://home-assistant.io/components/binary_sensor.command/">command sensor</a> added (<a href="https://github.com/Bart274">@Bart274</a>)</li>
  <li><a href="https://home-assistant.io/components/nest/">Nest</a> support extended to include sensors and binary sensors (<a href="https://github.com/joshughes">@joshughes</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.lifx/">LIFX</a> platform added (<a href="https://github.com/TangoAlpha">@TangoAlpha</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.twitter/">Twitter</a> platform added (<a href="https://github.com/HydrelioxGitHub">@HydrelioxGitHub</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.template/">Template</a> platform added (<a href="https://github.com/pavoni">@pavoni</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/wink/">Wink</a> platform now supports sirens (<a href="https://github.com/w1ll1am23">@w1ll1am23</a>)</li>
  <li><a href="https://home-assistant.io/components/insteon_hub/">Insteon hub</a> support added (<a href="https://github.com/FreekingDean">@FreekingDean</a>)</li>
  <li><a href="https://home-assistant.io/components/statsd/">Statsd</a> component added (<a href="https://github.com/michaelkuty">@michaelkuty</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.rfxtrx/">Rfxtrx</a> platform now supports dimming (<a href="https://github.com/turbokongen">@turbokongen</a>)</li>
  <li>Time scheduling (including <a href="https://home-assistant.io/components/automation/#time-trigger/">time automation</a>) now works with intervals (ie. <code>/5</code>) (<a href="https://github.com/kennedyshead">@kennedyshead</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.onewire/">onewire</a> support added (<a href="https://github.com/deisi">@deisi</a>)</li>
  <li><a href="https://home-assistant.io/components/zigbee/">Zigbee</a> support added (<a href="https://github.com/flyte">@flyte</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.owntracks/">OwnTracks</a> can now track iBeacons (<a href="https://github.com/pavoni">@pavoni</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.google_voice/">Google Voice SMS</a> platform added (<a href="https://github.com/w1ll1am23">@w1ll1am23</a>)</li>
  <li>Toggle service added to <code>homeassistant</code>, <code>switch</code>, <code>light</code> and <code>media_player</code> (<a href="https://github.com/rmkraus">@rmkraus</a>)</li>
  <li><a href="https://home-assistant.io/components/thermostat/">Thermostat</a> services added to control fans (<a href="https://github.com/auchter">@auchter</a>)</li>
  <li>Improved Python automation: Event helpers are now also available as decorators for custom components (<a href="https://github.com/rmkraus">@rmkraus</a>)</li>
  <li>Frontend: support added for tabs to show <a href="https://home-assistant.io/components/group/">different views</a> of your house (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Bugfixes by <a href="https://github.com/molobrakos">@molobrakos</a>, <a href="https://github.com/MartinHjelmare">@MartinHjelmare</a>, <a href="https://github.com/pavoni">@pavoni</a>, <a href="https://github.com/trollkarlen">@trollkarlen</a>, <a href="https://github.com/zmrow">@zmrow</a>, <a href="https://github.com/maddox">@maddox</a>, <a href="https://github.com/persandstrom">@persandstrom</a>, <a href="https://github.com/happyleavesaoc">@happyleavesaoc</a>, <a href="https://github.com/balloob">@balloob</a>, <a href="https://github.com/fabaff">@fabaff</a>, <a href="https://github.com/stefan-jonasson">@stefan-jonasson</a>, <a href="https://github.com/haraldnagel">@haraldnagel</a>.</li>
</ul>

<h3>Backwards incompatible changes</h3>
<ul>
  <li>Nest config has moved from thermostat to the <a href="https://home-assistant.io/components/nest/">Nest component</a>.</li>
  <li>Entity IDs for Z-Wave devices are now generated in a deterministic way causing all IDs to change starting this release. This is a one time change.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perfect Home Automation]]></title>
    <link href="https://home-assistant.io/blog/2016/01/19/perfect-home-automation/"/>
    <updated>2016-01-19T08:20:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/01/19/perfect-home-automation</id>
    <content type="html"><![CDATA[<p>People often ask me about my vision for Home Assistant. Before I can describe where I want to go with Home Assistant, I should first talk about how home automation would look in my ideal world. This will be the aim of this post. I’m not going to focus on protocols, networks or specific hubs. That’s all implementation details. Instead, this post will focus on what is most important: the interaction between the users and their home.</p>

<h3>You should not have to adapt to technology.</h3>

<p>When people start using home automation, they always experience home control first: being able to control devices in new ways using a phone or computer. They believe the future is now and their app will be their remote for their lives. They only focus on what they are getting, not on what they are losing. You install some light bulbs and all of a sudden you are no longer able to use the light switches. You’ll arrive at home at night and have to pull out your phone, open the app, let it connect and finally you’ll be able to turn on the light. All while turning the light on could have been a switch away.</p>

<p>Yes, you can solve this with presence detection. What if  your phone runs out of battery? You’ll have to resort to the switch again.</p>

<p>If you find that using your new home devices is cumbersome, the promise of home automation technology has failed you. Your lights should work with both a switch (or button) at the entrance of your room and via presence detection. Honestly, there are hardly any valid use cases for being able to control lights from your phone except for showing off.<br />
<!--more--></p>

<h3>You are not the only user of your home automation.</h3>

<p>People tend to forget that they are not the only ones in their home. As the developer of your house you’re enthusiastic about the possibilities and are willing to overlook flaws. Chances are very high that the other people in your household have different hobbies and just want to mind their own business.</p>

<p>This means that everything you automate has to work flawlessly. If you successfully manage to cause a response to some stimulus 90% of the time, you’re going to have a disproportionately poor experience 10% of the time.  A common automation that fits this pattern is to fade the lights when you start watching a movie or series in the living room. It only works if everyone is watching.</p>

<h3>Limit the impact of false positives and negatives.</h3>

<p>With every automation, you always have to think: what will be the impact if it doesn’t work? Home automation is composed of many different systems by many different vendors that speak many different protocols: things will go wrong. It’s up to you to make sure that they have a limited impact when they fail. Ideally, devices should fall back to a pre-smart home experience. A Philips Hue bulb will act like a standard white light if turned on/off using a normal switch or when not connected to a hub. If things get worse when your system is out of order, your users will revolt. Take for example the Nest thermostat that <a href="http://www.nytimes.com/2016/01/14/fashion/nest-thermostat-glitch-battery-dies-software-freeze.html">had a bug in the beginning of January</a> which caused it to stop heating the house, yikes!</p>

<h3>The perfect app is no app.</h3>

<p>Home automation should blend with your current workflow, not replace it. For most devices, there is no faster way to control most devices than how you are already doing it today. Most of the time, the best app is no app. The only interface that can be more convenient, and is accessible for visitors of your home of all ages is a voice interface. The industry has realized this too and there are some major players focussing on voice interaction. Take Apple for example: the only way to control your HomeKit devices is with Siri.  Amazon has taken it one step further with the Amazon Echo, providing an always-listening connected speaker/microphone for the living room. I expect a lot more companies to join this segment in 2016.</p>

<p>Voice interfaces are not perfect either. The speed at which you can issue commands is low because you have to wait for a response. There are also issues with the discoverability of commands, recognition of accents and dependency on the cloud for processing your voice. I believe that all but the first one are problems that are going to be solved eventually.</p>

<p>This however doesn’t mean there isn’t a place for apps, there definitely is. They are perfectly well-suited for checking in while you’re away, browsing  the state changes of your house or making  the lights go all funky when there are kids visiting.</p>

<h3>Your system should run at home, not in the cloud.</h3>

<p>The cloud is a magical thing. Somewhere in the world there are computers collecting the data that your house generates, testing them against your automation rules and sending commands back when needed.  The cloud will receive updates and improve itself over time so it is able to serve you better. Until it’s not. There are many reasons why your home might lose its connection to the cloud. The internet can stop working, an update might have gone wrong or the servers running the cloud crash.</p>

<p>When this happens, your house should be able to keep functioning. The cloud should be treated as an extension to your smart home instead of running it. That way you’ll avoid awkward situations like when Amazon AWS was down and the <a href="http://www.zdnet.com/article/the-night-alexa-lost-her-mind/">Amazon Echo stopped working</a>.</p>

<p><strong>Good home automation never annoys but is missed when it is not working.</strong></p>

<p><em>Thanks to Chris LaRose for this feedback and comments.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.11: Extended support for DIY solutions]]></title>
    <link href="https://home-assistant.io/blog/2016/01/17/extended-support-for-diy-solutions/"/>
    <updated>2016-01-17T23:20:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/01/17/extended-support-for-diy-solutions</id>
    <content type="html"><![CDATA[<p>First release of 2016 and we are on 🔥! The <a href="https://github.com/balloob/home-assistant/">main repository</a> has passed 2500 ⭐ on GitHub (2596 ⭐ as of now). This release also has a <a href="https://github.com/balloob/home-assistant/pull/883#partial-users-participants">record number</a> of 20 contributors all working on improving and extending Home Assistant. With the continued growth, I am very excited to see what 2016 will bring us 🤘.</p>

<p><img src="https://home-assistant.io/images/supported_brands/mysensors.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/raspberry-pi.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="50" /><img src="https://home-assistant.io/images/supported_brands/yr.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/telldus.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/free_mobile.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/netatmo.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/alarmdotcom.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/proliphix.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /></p>

<ul>
  <li><a href="https://home-assistant.io/components/mysensors/">MySensors</a> revamped and switch support added (<a href="https://github.com/MartinHjelmare">@MartinHjelmare</a>)</li>
  <li>Full refactor of RPi GPIO. Now includes <a href="https://home-assistant.io/components/binary_sensor.rpi_gpio/">binary sensor</a> and <a href="https://home-assistant.io/components/switch.rpi_gpio/">switch</a> (<a href="https://github.com/sfam">@sfam</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.yr/">YR</a> platform added (<a href="https://github.com/danielhiversen">@danielhiversen</a>)</li>
  <li>Device Tracker: Geofancy platform has been renamed to <a href="https://home-assistant.io/components/device_tracker.locative/">Locative</a> (<a href="https://github.com/philipbl">@philipbl</a>)</li>
  <li>Automation: Add <a href="https://home-assistant.io/components/automation/#sun-condition/">sun condition</a> (<a href="https://github.com/philipbl">@philipbl</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.command_switch/">command_switch</a> can now poll for state (<a href="https://github.com/happyleavesaoc">@happyleavesaoc</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.wemo/">wemo</a> now uses subscription to states instead of polling (<a href="https://github.com/pavoni">@pavoni</a>)</li>
  <li><a href="https://home-assistant.io/components/tellduslive/">Telldus Live</a> support added (<a href="https://github.com/molobrakos">@molobrakos</a>)</li>
  <li><a href="https://home-assistant.io/components/vera/">Vera</a> now uses subscription to states instead of polling (<a href="https://github.com/pavoni">@pavoni</a>)</li>
  <li>New <a href="https://home-assistant.io/getting-started/templating/#home-assistant-template-extensions/">template helper method</a> <code>is_state_attr(entity_id, name, value)</code> added (<a href="https://github.com/andythigpen">@andythigpen</a>)</li>
  <li>Device tracker: <a href="https://home-assistant.io/components/device_tracker.owntracks/">OwnTracks</a> transition events now supported (<a href="https://github.com/xifle">@xifle</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.hue/">Philips Hue</a> platform now supports multiple hubs (<a href="https://github.com/rhooper">@rhooper</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.free_mobile/">Free Mobile</a> platform added (<a href="https://github.com/HydrelioxGitHub">@HydrelioxGitHub</a>)</li>
  <li>New <a href="https://home-assistant.io/components/mqtt_eventstream/">MQTT Eventstream</a> component to connect two Home Assistant instances over MQTT (<a href="https://github.com/moonshot">@moonshot</a>)</li>
  <li>Media player: <a href="https://home-assistant.io/components/media_player.cast/">Cast</a> huge stability improvements (<a href="https://github.com/rmkraus">@rmkraus</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.universal/">Universal media player</a> added to combine multiple media players (<a href="https://github.com/rmkraus">@rmkraus</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.netatmo/">Netatmo</a> platform added (<a href="https://github.com/HydrelioxGitHub">@HydrelioxGitHub</a>)</li>
  <li>Alarm Control Panel: <a href="https://home-assistant.io/components/alarm_control_panel.alarmdotcom/">Alarm.com</a> platform added (<a href="https://github.com/Xorso">@Xorso</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.proliphix/">Proliphix</a> platform added (<a href="https://github.com/sdague">@sdague</a>)</li>
  <li>New component <a href="https://home-assistant.io/components/input_boolean/">input_boolean</a> will allow for customizing automation (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Support calling services via <a href="https://home-assistant.io/components/alexa/">Amazon Echo</a> (<a href="https://github.com/balloob">@balloob</a>)</li>
</ul>

<h3>Backwards incompatible changes</h3>
<ul>
  <li>The <a href="https://home-assistant.io/components/binary_sensor.rpi_gpio/">RPi.GPIO sensor platform</a> has been moved to the <code>binary_sensor</code> component.</li>
  <li><a href="https://home-assistant.io/components/sensor.mysensors/">MySensors sensor platform</a> now requires the <a href="https://home-assistant.io/components/mysensors/">MySensors</a> component to be configured.</li>
  <li>Geofancy platform has been renamed to <a href="https://home-assistant.io/components/device_tracker.locative/">Locative</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.10: Amazon Echo, iCloud, Dweet.io, Twitch and templating support!]]></title>
    <link href="https://home-assistant.io/blog/2015/12/22/amazon-echo-icloud-and-templates/"/>
    <updated>2015-12-22T09:30:00+00:00</updated>
    <id>https://home-assistant.io/blog/2015/12/22/amazon-echo-icloud-and-templates</id>
    <content type="html"><![CDATA[<p>Alrighty, it’s time for Home Assistant 0.10. A lot amazing things have changed and sadly we also had to introduce a bunch of backwards incompatible changes. I would like to give a big shoutout to Philip Lundrigan (<a href="https://github.com/philipbl">@philipbl</a>) who put a lot in effort in helping the migration to move towards using templates for a wide variety of platforms.</p>

<div class="videoWrapper">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/1Ke3mtWd_cQ" frameborder="0" allowfullscreen=""></iframe>
</div>

<p><img src="https://home-assistant.io/images/supported_brands/icloud.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/heatmiser.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/dweet.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/amazon-echo.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/eliq.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /></p>

<ul>
  <li>Device tracker: <a href="https://home-assistant.io/components/device_tracker.icloud/">iCloud</a> platform added (<a href="https://github.com/xorso">@xorso</a>, <a href="https://github.com/kevinpanaro">@kevinpanaro</a>)</li>
  <li>Frontend: Improved caching using service workers if served over SSL (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.twitch/">Twitch</a> platform added (<a href="https://github.com/happyleavesaoc">@happyleavesaoc</a>)</li>
  <li><a href="https://home-assistant.io/getting-started/templating/">Template</a> support (<a href="https://github.com/balloob">@balloob</a>, <a href="https://github.com/philipbl">@philipbl</a>, <a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.heatmiser/">Heatmiser</a> platform added (<a href="https://github.com/andylockran">@andylockran</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.dweet/">Dweet.io</a> platform added (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li><a href="https://home-assistant.io/components/alexa/">Alexa/Amazon echo</a> component added (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.fritz/">FritzBox</a> platform added (<a href="https://github.com/deisi">@deisi</a>, <a href="https://github.com/caiuspb">@caiuspb</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.wink/">Wink</a> now supports the Egg minders (<a href="https://github.com/w1ll1am23">@w1ll1am23</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.eliqonline/">ELIQ Online</a> platform added (<a href="https://github.com/molobrakos">@molobrakos</a>)</li>
  <li>Binary sensor: <a href="https://home-assistant.io/components/binary_sensor.rest/">REST</a> platform added (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.torque/">Torque (OBD2)</a> platform added (<a href="https://github.com/happyleavesaoc">@happyleavesaoc</a>)</li>
</ul>

<!--more-->

<h3>Templates</h3>

<p>This release introduces templates. This will allow you to parse data before it gets processed or create messages for notifications on the fly based on data within Home Assistant. The notification component and the new Alexa/Amazon Echo component are both using the new template functionality to render responses. A template editor has been added to the developer tool section in the app so you can get instant feedback if your templates are working or not.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>The temperature at home is {{ states('sensor.temperature') }}.
</pre></div>
</div>
</div>

<p>More information and examples can be found in the <a href="https://home-assistant.io/getting-started/templating/">template documentation</a>.</p>

<h3>Breaking changes</h3>

<p>Templates will now be the only way to extract data from ‘raw’ sources like REST, CommandSensor or MQTT. This will replace any specific option that used to do this before. This means that <code>precision</code>, <code>factor</code>, <code>attribute</code> or <code>json_path</code> etc will no longer work.</p>

<p>Affected components and platforms:</p>

<ul>
  <li>sensor: <a href="https://home-assistant.io/components/sensor.arest/">arest</a></li>
  <li>sensor: <a href="https://home-assistant.io/components/sensor.command_sensor/">command_sensor</a></li>
  <li>sensor: <a href="https://home-assistant.io/components/sensor.rest/">rest</a></li>
  <li>sensor: <a href="https://home-assistant.io/components/sensor.mqtt/">MQTT</a></li>
  <li>switch: <a href="https://home-assistant.io/components/switch.mqtt/">MQTT</a></li>
  <li>rollershutter: <a href="https://home-assistant.io/components/rollershutter.mqtt/">MQTT</a></li>
  <li>light: <a href="https://home-assistant.io/components/light.mqtt/">MQTT</a></li>
  <li>binary_sensor: <a href="https://home-assistant.io/components/binary_sensor.mqtt/">MQTT</a></li>
  <li>automation: <a href="https://home-assistant.io/components/automation/#numeric-state-trigger/">numeric_state</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set up encryption using Let's Encrypt]]></title>
    <link href="https://home-assistant.io/blog/2015/12/13/setup-encryption-using-lets-encrypt/"/>
    <updated>2015-12-13T18:05:00+00:00</updated>
    <id>https://home-assistant.io/blog/2015/12/13/setup-encryption-using-lets-encrypt</id>
    <content type="html"><![CDATA[<p>Exposing your Home Assistant instance outside of your network always has been tricky. You have to set up port forwarding on your router and most likely add a dynamic DNS service to work around your ISP changing your IP. After this you would be able to use Home Assistant from anywhere but there is one big red flag: no encryption.</p>

<p>This tutorial will take you through the steps to setup a dynamic DNS for your IP and allow trusted encrypted connection to it - for free using <a href="https://duckdns.org">DuckDNS</a> and <a href="https://letsencrypt.org">Let’s Encrypt</a>.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-12-lets-encrypt/letsencrypt-secured.png" />
</p>

<!--more-->

<h3><a class="title-link" name="requirements" href="#requirements"></a> Requirements</h3>

<p>The DuckDNS part of this tutorial has no requirements but there are a few requirements as of now to run the Let’s Encrypt client.</p>

<ul>
  <li>Direct connection to the internet or admin access to your router to set up port forwarding</li>
  <li>A machine running a Unix-ish OS that include Python 2.6 or 2.7 (Docker can be used)</li>
</ul>

<p><img src="https://home-assistant.io/images/supported_brands/duckdns.png" style="clear: right; border:none; box-shadow: none; float: right; margin-left: 8px; margin-bottom: 8px;" width="60" /></p>

<h3><a class="title-link" name="duckdns" href="#duckdns"></a> DuckDNS</h3>

<p>The first step is to set up <a href="https://duckdns.org">DuckDNS</a>. This is a free dynamic DNS service that you can use to get a DuckDNS.org subdomain to point at your house. A dynamic DNS service works by having your home computer tell DuckDNS.org every 5 minutes what its IP is so that DuckDNS can make sure your domain name is set up correctly.</p>

<p>For this example we will assume our domain is hass-example.duckdns.org.</p>

<p>First step is to acquire and set up our domain name. For this, go to <a href="https://duckdns.org">DuckDNS</a>, log in with any of the supported login providers and add a domain. After this check out their <a href="https://www.duckdns.org/install.jsp">installation instructions</a> to finish your installation of DuckDNS. If you’re on a Raspberry Pi, see ‘Pi’ in the category ‘Operating Systems’.</p>

<p><img src="https://home-assistant.io/images/supported_brands/letsencrypt.png" style="clear: right; border:none; box-shadow: none; float: right; margin-left: 8px; margin-bottom: 8px;" width="60" /></p>

<h3><a class="title-link" name="lets-encrypt" href="#lets-encrypt"></a> Let’s Encrypt</h3>

<p><a href="https://letsencrypt.org">Let’s Encrypt</a> is a free, automated, and open certificate authority (CA). We will use this to acquire a certificate that can be used to encrypted our connection with Home Assistant.</p>

<p>Let’s Encrypt will give you a free 90-day certificate if you pass their domain validation challenge. Domains are validated by having certain data be accessible on your domain for Let’s Encrypt (<a href="https://letsencrypt.org/howitworks/technology/">they describe it better themselves</a>).</p>

<p>Assuming that your home is behind a router, the first thing to do is to set up port forwarding from your router to your computer that will run Let’s Encrypt. For the Let’s Encrypt set up we need to temporary forward ports <code>80</code> (http connections) and <code>443</code> (https connections). This can be set up by accessing your router admin interface (<a href="http://portforward.com">Site with port forwarding instructions per router</a>).</p>

<p>Now you’re ready to run Let’s Encrypt:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ git clone https://github.com/letsencrypt/letsencrypt
[…]
$ cd letsencrypt
$ ./letsencrypt-auto certonly --email $ ./letsencrypt-auto certonly --email your@email.address -d hass-example.duckdns.org

Updating letsencrypt and virtual environment dependencies.......
Running with virtualenv: sudo /path/letsencrypt/bin/letsencrypt certonly --email your@e-mail.address -d hass-example.duckdns.org

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/hass-example.duckdns.org/fullchain.pem. Your cert
   will expire on 2016-03-12. To obtain a new version of the
   certificate in the future, simply run Let's Encrypt again.
 - If like Let's Encrypt, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
</pre></div>
</div>
</div>

<p>If you’re using Docker, run the following command to generate the required keys:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>sudo mkdir /etc/letsencrypt /var/lib/letsencrypt
sudo docker run -it --rm -p 443:443 -p 80:80 --name letsencrypt \
                -v &quot;/etc/letsencrypt:/etc/letsencrypt&quot; \
                -v &quot;/var/lib/letsencrypt:/var/lib/letsencrypt&quot; \
                quay.io/letsencrypt/letsencrypt:latest certonly \
                --email your@e-mail.address -d hass-example.duckdns.org
</pre></div>
</div>
</div>

<p>With either method your certificate will be generated and put in the directory <code>/etc/letsencrypt/live/hass-example.duckdns.org</code>. As the lifetime is only 90 days, you will have to repeat this every 90 days.</p>

<p><img width="60" src="https://home-assistant.io/images/favicon-192x192.png" style="float: right; border:none; box-shadow: none;" /></p>

<h3><a class="title-link" name="home-assistant" href="#home-assistant"></a> Home Assistant</h3>

<p>Before updating the Home Assistant configuration, we have to update the port forwarding at your router config. We can drop the port forwarding for port <code>80</code> as we no longer care about unecrypted messages. Update port <code>443</code> to forward to port <code>8123</code> on the computer that will run Home Assistant.</p>

<p>The final step is to point Home Assistant at the generated certificates. Before you do this, make sure that the user running Home Assistant has read access to the folder that holds the certificates.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">http</span>:
  <span class="key">api_password</span>: <span class="string"><span class="content">YOUR_SECRET_PASSWORD</span></span>
  <span class="key">ssl_certificate</span>: <span class="string"><span class="content">/etc/letsencrypt/live/hass.example.com/fullchain.pem</span></span>
  <span class="key">ssl_key</span>: <span class="string"><span class="content">/etc/letsencrypt/live/hass.example.com/privkey.pem</span></span>
</pre></div>
</div>
</div>

<p>You can now navigate to https://hass-example.duckdns.org and enjoy encryption!</p>

<p><em>Big thanks to Fabian Affolter for his help and feedback on this article.</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Update: decision reversed!] Philips Hue blocks 3rd party lights]]></title>
    <link href="https://home-assistant.io/blog/2015/12/12/philips-hue-blocks-3rd-party-bulbs/"/>
    <updated>2015-12-12T18:44:00+00:00</updated>
    <id>https://home-assistant.io/blog/2015/12/12/philips-hue-blocks-3rd-party-bulbs</id>
    <content type="html"><![CDATA[<p><strong>Update Dec 16</strong>: Great news! Philips has decided to <a href="http://www.developers.meethue.com/documentation/friends-hue-update">reverse their decision</a> and is working on a software update to allow 3rd party light bulbs again.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-12-philips-hue-3rd-party/philips-hue-reversed-faq.png" />
Philips Hue FAQ entries regarding reversing the decision.
</p>

<p><em>Original post:</em></p>

<!--more-->
<p>Philips Hue was one of the first to get smart lights accepted by the mainstream. Their Zigbee-based hub is rock solid, never crashes, great API and worked with other Zigbee light bulbs too. They are a bit expensive but the platform was worth every penny, till now.</p>

<p>Yesterday a thread on <a href="https://www.reddit.com/r/homeautomation/comments/3wet8h/fyi_the_hue_hub_is_now_blocking_third_party/">/r/homeautomation</a> published that Philips Hue now blocks all but their own bulbs and those of “friends of Hue”. I have been able to confirm this in the <a href="http://www2.meethue.com/en-us/support/search/?q=Another+brand">Philips Hue FAQ</a> (Update Dec 14: they have removed the entries - <a href="https://home-assistant.io/images/blog/2015-12-philips-hue-3rd-party/mirror.png">mirror here</a>):</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-12-philips-hue-3rd-party/philips-hue-faq.png" />
Philips Hue FAQ entries regarding 3rd party light bulbs.
</p>

<p>This means that after you update your Hue bridge to the latest version:</p>

<ul>
  <li>As of now, you can still use your existing paired 3rd party light bulbs</li>
  <li>You cannot pair new 3rd party light bulbs</li>
  <li>You’re out of luck if for some reason you have to pair existing 3rd party light bulbs again</li>
  <li>Resetting your hub will force pairing of all your bulbs again</li>
</ul>

<p>If you own a Philips Hue hub and are using 3rd party light bulbs, make sure you do not upgrade your hub if you want to be able to pair new 3rd party lightbulbs. But do realize that you are sitting on a ticking time bomb.</p>

<p>I have read, but have been unable to confirm it, that resetting your hub will force a software upgrade. So beware of that too.</p>

<p>I will no longer suggest people to buy into the Philips Hue ecosystem.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activating Tasker tasks from Home Assistant using command line switches]]></title>
    <link href="https://home-assistant.io/blog/2015/12/10/activating-tasker-tasks-from-home-assistant-using-command-line-switches/"/>
    <updated>2015-12-10T10:39:41+00:00</updated>
    <id>https://home-assistant.io/blog/2015/12/10/activating-tasker-tasks-from-home-assistant-using-command-line-switches</id>
    <content type="html"><![CDATA[<p><img src="https://home-assistant.io/images/blog/2015-12-tasker/tasker-logo.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 12px;" width="200" /><br />
In this tutorial I will explain how you can activate Tasker tasks from Home Assistant command line switches. We are going to set up a switch that when toggled will make your Android device say either “On” or “Off”.</p>

<p>You could also do this with the automation component instead so whenever you put your house to sleep mode for example your Android device will open up Google Play Books or the Kindle app ready for you to read as well as dimming your lights, but this tutorial is all about the switches.</p>

<!--more-->

<h3>AutoRemote URL</h3>

<p>First things first you should install <a href="https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm">Tasker</a> and <a href="https://play.google.com/store/apps/details?id=com.joaomgcd.autoremote">AutoRemote</a> onto your Android device and launch AutoRemote. You should see a URL above the QR code, visit it in your browser and it should bring up a page a bit like this.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-12-tasker/screenshot-1.png" />
</p>

<p>Now type in <code>SayOn</code> in the <code>Message</code> box and you should see a box appear on the right with a URL in it, this is what we will be using in the Python script later on so save that for later. Do the same thing again but this time replace <code>SayOn</code> with <code>SayOff</code>. Now just click the <code>Send message now!</code> button to test that your commands will get sent to your Android device, if they do you will see a toast message at the bottom of your screen like this one.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-12-tasker/screenshot-2.png" height="450" />
</p>

<h3>Tasker Setup</h3>

<p>Open up Tasker and make sure you’re in the <code>PROFILES</code> tab, then select the plus icon to create a new profile. Select <code>Event</code> -&gt; <code>Plugin</code> -&gt; <code>AutoRemote</code> -&gt; <code>AutoRemote</code> and then the pencil icon to configure the AutoRemote event. Select <code>Message Filter</code> and enter in <code>SayOn</code> then go back until it asks you for a task. Select <code>New task</code> then just leave the next field blank and select the tick icon. <br />
This is where we’ll configure our task, so select the plus icon to select an action. Select <code>Alert</code> -&gt; <code>Say</code> to add a Say action. Enter <code>On</code> in the text field and go back to test your task, make sure your media volume is up then select the play icon, you should hear your device say “On”.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-12-tasker/screenshot-3.png" height="450" />
</p>

<p>Now you can go back to the main Tasker screen and create another profile but this time replace <code>SayOn</code> with <code>SayOff</code> and <code>On</code> with <code>Off</code>. After you’ve done that go to the main screen again and select the menu button at the top then <code>Exit</code> and <code>Save first</code> to make sure everything is saved properly.</p>

<h3>Python Script</h3>

<p>Now it’s time to set it up the script, so create a new Python script and name it <code>On.py</code> then enter this code:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="keyword">import</span> <span class="include">requests</span>
requests.get(<span class="string"><span class="delimiter">'</span><span class="content">[URL]</span><span class="delimiter">'</span></span>)
</pre></div>
</div>
</div>

<p>Enter in your “On” URL then save it. Create another script but this time call it <code>Off.py</code> and enter your “off” URL instead.</p>

<h3>Home Assistant Configuration</h3>

<p>Add a command line switch to your Home Assistant configuration:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">switch</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">command_switch</span></span>
  <span class="key">switches</span>:
    <span class="key">tasker_say</span>:
      <span class="key">oncmd</span>: <span class="string"><span class="content">python &quot;[LocationOfOnScript]&quot;</span></span>
      <span class="key">offcmd</span>: <span class="string"><span class="content">python &quot;[LocationOfOffScript]&quot;</span></span>
</pre></div>
</div>
</div>

<p>Now load up Home Assistant and whenever you toggle the switch you created your Android device will respond with either “On” or “Off”. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[InfluxDB and Grafana]]></title>
    <link href="https://home-assistant.io/blog/2015/12/07/influxdb-and-grafana/"/>
    <updated>2015-12-07T14:15:13+00:00</updated>
    <id>https://home-assistant.io/blog/2015/12/07/influxdb-and-grafana</id>
    <content type="html"><![CDATA[<p><img src="https://home-assistant.io/images/supported_brands/influxdb.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 12px;" width="200" /><img src="https://home-assistant.io/images/supported_brands/grafana.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 12px;" width="200" /><br />
The <a href="https://influxdb.com/">InfluxDB</a> database is a so-called time series database primarly designed to store sensor data and real-time analytics.</p>

<p>The <code>influxdb</code> component makes it possible to transfer all state changes from Home Assistant to an external <a href="https://influxdb.com/">InfluxDB</a> database.</p>

<!--more-->

<p>The first step is to install the InfluxDB packages. If you are not running Fedora, check the <a href="https://influxdb.com/docs/v0.9/introduction/installation.html">installation</a> section for further details.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ sudo dnf -y install http://influxdb.s3.amazonaws.com/influxdb-0.9.5.1-1.x86_64.rpm
</pre></div>
</div>
</div>

<p>Launch the InfluxDB service.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ sudo systemctl start influxdb
</pre></div>
</div>
</div>

<p>If everything went well, then the web interface of the database should be accessible at <a href="http://localhost:8083/">http://localhost:8083/</a>. Create a database <code>home_assistant</code> to use with Home Assistant either with the web interface or the commandline tool <code>influx</code>.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-12-influxdb/influxdb-frontend.png" />
  InfluxDB web frontend
</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ influx
Visit https://enterprise.influxdata.com to register for updates, InfluxDB server management, and monitoring.
Connected to http://localhost:8086 version 0.9.5.1
InfluxDB shell 0.9.5.1
&gt; CREATE DATABASE home_assistant
</pre></div>
</div>
</div>

<p>An optional step is to create a user. Keep in mind to adjust the configuration (add <code>username</code> and <code>password</code>) in the next step if you prefer to go this way.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt; CREATE USER &quot;home-assistant&quot; WITH PASSWORD 'password'
</pre></div>
</div>
</div>

<p>To use the <code>influxdb</code> component in your installation, add the following to your <code>configuration.yaml</code> file:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">influxdb</span>:
  <span class="key">host</span>: <span class="string"><span class="content">127.0.0.1</span></span>
</pre></div>
</div>
</div>

<p>After you restart Home Assistant you should see that the InfluxDB database gets filled. The <a href="https://influxdb.com/docs/v0.9/query_language/index.html">language</a> to query the database is similar to SQL.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ influx
[...]
&gt; USE home_assistant
Using database home_assistant
&gt; SELECT * FROM binary_sensor
name: binary_sensor
-------------------
time            domain        entity_id    value
1449496577000000000    binary_sensor    bathroom_door    0
1449496577000000000    binary_sensor    bathroom_window    0
1449496577000000000    binary_sensor    basement_door    0
1449496577000000000    binary_sensor    basement_window    0
1449496684000000000    binary_sensor    bathroom_window    1
[...]
</pre></div>
</div>
</div>

<p><a href="http://grafana.org/">Grafana</a> is a dashboard that can create graphs from different sources including InfluxDB. The installation is simple, and there are detailed steps for many different configurations on the <a href="http://docs.grafana.org/installation/">Grafana installation</a> page. For a recent system that is running Fedora:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ sudo dnf -y install https://grafanarel.s3.amazonaws.com/builds/grafana-2.5.0-1.x86_64.rpm
</pre></div>
</div>
</div>

<p>Start the grafana server.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ sudo systemctl daemon-reload
$ sudo systemctl start grafana-server
$ sudo systemctl status grafana-server
</pre></div>
</div>
</div>

<p>Login with the username <code>admin</code> and the password <code>admin</code> at <a href="http://localhost:3000/login">http://localhost:3000/login</a>. Now follow the <a href="http://docs.grafana.org/datasources/influxdb/">InfluxDB setup instructions</a>.</p>

<p>Now you can start to create dashboards and graphs. You have various options to get the data from the graph. The next image just shows a screenshot of the setting for a temperature sensor.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-12-influxdb/grafana-settings.png" />
  Grafana settings
</p>

<p>If the graph is not showing up in the dashboard you need to adjust the time range in the right upper corner. The graph is created for all state changes recorded by Home Assistant.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-12-influxdb/grafana-graph.png" />
  Grafana Temperature graph
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.9: Rollershutters, locks, binary sensors and InfluxDB]]></title>
    <link href="https://home-assistant.io/blog/2015/12/06/locks-rollershutters-binary-sensors-and-influxdb-support/"/>
    <updated>2015-12-06T19:29:00+00:00</updated>
    <id>https://home-assistant.io/blog/2015/12/06/locks-rollershutters-binary-sensors-and-influxdb-support</id>
    <content type="html"><![CDATA[<p>It’s been a few weeks but we managed to polish a nice new release of Home Assistant for y’all!</p>

<p><img src="https://home-assistant.io/images/supported_brands/homematic.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="238" /><img src="https://home-assistant.io/images/supported_brands/ecobee.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="238" /><img src="https://home-assistant.io/images/supported_brands/influxdb.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="238" /></p>

<ul>
  <li>New <a href="https://home-assistant.io/components/lock/">lock component</a> including <a href="https://home-assistant.io/components/lock.wink/">Wink</a> support (<a href="https://github.com/miniconfig">@miniconfig</a>)</li>
  <li>New <a href="https://home-assistant.io/components/binary_sensor/">binary sensor component</a> including <a href="https://home-assistant.io/components/binary_sensor.arest/">aRest</a> and <a href="https://home-assistant.io/components/binary_sensor.mqtt/">MQTT</a> support (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>New <a href="https://home-assistant.io/components/rollershutter/">rollershutter component</a> including <a href="https://home-assistant.io/components/rollershutter.mqtt/">MQTT</a> support (<a href="https://github.com/sfam">@sfam</a>)</li>
  <li>New <a href="https://home-assistant.io/components/influxdb/">InfluxDB component</a> to store data in InfluxDB (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.ecobee/">Ecobee</a> now supported (<a href="https://github.com/nkgilley">@nkgilley</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.homematic/">Homematic</a> now supported (<a href="https://github.com/goir">@goir</a>)</li>
  <li>Support for <a href="https://home-assistant.io/components/mqtt/#processing-json/">parsing JSON values</a> received over MQTT (<a href="https://github.com/mcdeck">@mcdeck</a>)</li>
  <li>Bunch of bug fixes and optimizations</li>
</ul>

<p>To update, run <code>pip3 install --upgrade homeassistant</code>.</p>

<p class="img">
<img src="https://home-assistant.io/images/screenshots/lock-and-rollershutter-card.png" />
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Community Highlights]]></title>
    <link href="https://home-assistant.io/blog/2015/12/05/community-highlights/"/>
    <updated>2015-12-05T23:39:00+00:00</updated>
    <id>https://home-assistant.io/blog/2015/12/05/community-highlights</id>
    <content type="html"><![CDATA[<p>From time to time we come along things that are worth sharing with fellow Home Assisters. Here a list of some cool stuff from last week:</p>

<p>First is the public beta of <a href="https://letsencrypt.org/">Let’s Encrypt</a>. Let’s Encrypt is a new certificate authority that is free, automated and open. This means that it will now be very easy to secure your connection to Home Assistant while you are away from home. W1ll1am23 has written up <a href="https://automic.us/forum/viewtopic.php?f=4&amp;t=29">a guide how to get started</a>.</p>

<p>The next thing is a show-off of some of the cool stuff people do with Home Assistant. This is miniconfig talking to Home Assistant using the Amazon Echo!</p>

<div class="videoWrapper">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/9QQjklnSQKY" frameborder="0" allowfullscreen=""></iframe>
</div>

<p>And last but not least, Midwestern Mac did a <a href="http://www.midwesternmac.com/blogs/jeff-geerling/raspberry-pi-microsd-card">microSD card performance comparison</a> for the Raspberry Pi. If you’re using a Pi, make sure to check it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Survey November 2015]]></title>
    <link href="https://home-assistant.io/blog/2015/11/22/survey-november-2015/"/>
    <updated>2015-11-22T14:51:18+00:00</updated>
    <id>https://home-assistant.io/blog/2015/11/22/survey-november-2015</id>
    <content type="html"><![CDATA[<p><img src="https://home-assistant.io/images/blog/2015-11-survey/releases.png" style="float: right; margin-left: 8px; margin-bottom: 8px;" height="120" />Around a week ago we started with the first survey. Now 30 people have participated. Thank you very much if you did. We think that’s enough time to have some “only partially representative” data. It’s hard to tell how many Home Assistant users are out there. Currently there are 215 members in our <a href="https://gitter.im/balloob/home-assistant">Gitter chat room</a> and last week <a href="https://pypi.python.org/pypi/homeassistant/">PyPI</a> counted 5063 downloads.</p>

<p>The idea was to anonymously collect some details about the usage of the different parts of Home Assistant and a little bit about the environment its running in.</p>

<!--more-->
<p>Thanks to Python, users are running Home Assistant on the most popular Linux distributions and other operating systems including OS X and Microsoft Windows. One quarter of the operating systems are unknown which leads to the assumption that it is possible to run Home Assistant on most of the available operation systems today. We hope that *BSD users have fun too. The Hardware platform of choice seems to be x86_64 and ARM.</p>

<p>Of course most users are running with the <a href="https://home-assistant.io/components/automation/">automation</a> component otherwise it would make much sense to use Home Assistant. The <a href="https://home-assistant.io/components/sun/">sun</a> component is used a lot too. We hope that this is not because this component is enabled by default.</p>

<p>The <a href="https://home-assistant.io/components/alarm_control_panel/">Alarm control panels</a> and the <a href="https://home-assistant.io/components/camera/">camera component</a> are both used by around one third of the participants of the survey. It’s safe to say that they cover a niche, but they will gain momentum when people discover how they can build alarm systems with Home Assistant.</p>

<p><a href="https://home-assistant.io/components/light.hue/">Philips Hue</a> is the “winner” in the light category closely followed by <a href="components/light.mqtt/">MQTT lights</a>. <a href="https://home-assistant.io/components/media_player.cast/">Google Cast</a> and <a href="https://home-assistant.io/components/media_player.plex/"> Plex</a> are the top media player platforms. <a href="https://home-assistant.io/components/notify.pushbullet/">Pushbullet</a> is by far the most-used <a href="https://home-assistant.io/components/notify/">notification platform</a>. If you followed the recent efforts to improve this platform it’s comprehensible.</p>

<p>It’s interesting to see that most of the sensor, switch, and thermostat platforms are used. A lot of people seem to be interested in the weather data provided by the <a href="https://home-assistant.io/components/sensor.forecast/">Forecast sensor</a>. The MQTT sensors and switches are deployed in almost 50% of all Home Assistant setups.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/releases.png" />
  Home Assistant releases
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/os.png" />
  Operating systems
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/platforms.png" />
  Hardware platforms
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/components.png" />
  Components
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/alarm-cameras.png" />
  Alarm Control Panels and Cameras
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/trackers.png" />
  Device trackers
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/lights.png" />
  Lights
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/players.png" />
  Media players
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/notifications.png" />
  Notifications
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/sensors.png" />
  Sensors
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/switches.png" />
  Switches
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/thermostats.png" />
  Thermostats
</p>

<p>The conclusion is that <a href="http://mqtt.org/">MQTT</a> is popular in almost every section from Alarm Control Panel, presence detection with <a href="http://owntracks.org/">owntracks</a>, sensors and switches, and now even for lights.</p>

<p>The interpretation of the data is up to you. Again, thanks for participating in this survey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.8: Honeywell Thermostats, Orvibo switches and Z-Wave switches and lights ]]></title>
    <link href="https://home-assistant.io/blog/2015/11/16/zwave-switches-lights-and-honeywell-thermostats-now-supported/"/>
    <updated>2015-11-16T21:27:00+00:00</updated>
    <id>https://home-assistant.io/blog/2015/11/16/zwave-switches-lights-and-honeywell-thermostats-now-supported</id>
    <content type="html"><![CDATA[<p><img src="https://home-assistant.io/images/screenshots/custom-icons.png" style="float: right;" />We have all been hard at work to get this latest release ready. One of the big highlights in this release is the introduction of an extended iconset to be used in the frontend (credits to <a href="https://github.com/happyleavesaoc">@happyleavesaoc</a> for idea and prototype). To get started with customizing, pick any icon from <a href="https://MaterialDesignIcons.com">MaterialDesignIcons.com</a>, prefix the name with <code>mdi:</code> and stick it into your <code>customize</code> section in <code>configuration.yaml</code>:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">homeassistant</span>:
  <span class="key">customize</span>:
    <span class="key">switch.ac</span>:
      <span class="key">icon</span>: <span class="string"><span class="content">'mdi:air-conditioner'</span></span>
</pre></div>
</div>
</div>

<h4>Breaking changes</h4>

<ul>
  <li>Any existing zone icon will have to be replaced with one from <a href="https://MaterialDesignIcons.com">MaterialDesignIcons.com</a>.</li>
  <li>LimitlessLED light services require colors to be specified in RGB instead of XY.</li>
</ul>

<h4>Changes</h4>

<p><img src="https://home-assistant.io/images/supported_brands/honeywell.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" height="50" /><img src="https://home-assistant.io/images/supported_brands/orvibo.png" style="clear: right;  border:none; box-shadow: none; float: right; margin-bottom: 16px;" height="50" /><img src="https://home-assistant.io/images/supported_brands/pushetta.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" height="50" /></p>

<ul>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.honeywell/">Honeywell</a> now supported (<a href="https://github.com/sander76">@sander76</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.orvibo/">Orvibo</a> now supported (<a href="https://github.com/happyleavesaoc">@happyleavesaoc</a>)</li>
  <li>Camera: <a href="https://home-assistant.io/components/camera.mjpeg/">mjpeg camera’s</a> now supported (<a href="https://github.com/ryanturner">@ryanturner</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.pushetta/">Pushetta</a> now supported (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.mqtt/">MQTT</a> now supported (<a href="https://github.com/hexxter">@hexxter</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/zwave/">Z-Wave</a> now supported (<a href="https://github.com/leoc">@leoc</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/zwave/">Z-Wave</a> now supported (<a href="https://github.com/leoc">@leoc</a>)</li>
  <li>New component <a href="https://home-assistant.io/components/logger/">logger</a> allows filtering logged data (<a href="https://github.com/badele">@badele</a>)</li>
  <li>New component <a href="https://home-assistant.io/components/updater/">updater</a> will notify users if an update for Home Assistant is available (<a href="https://github.com/rmkraus">@rmkraus</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.pushbullet/">PushBullet</a> now allows targeting contacts/channels/specific devices (<a href="https://github.com/tomduijf">@tomduijf</a>)</li>
  <li>Light: Allow controlling color temperature (<a href="https://github.com/tomduijf">@tomduijf</a>)</li>
  <li>Frontend: about page added (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Switch RGB as the color unit used in light component (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Re-install platform and component dependencies after a Home Assistant version upgrade (<a href="https://github.com/balloob">@balloob</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.7.6: Amazon FireTV, Radiotherm thermostats]]></title>
    <link href="https://home-assistant.io/blog/2015/10/26/firetv-and-radiotherm-now-supported/"/>
    <updated>2015-10-26T18:10:00+00:00</updated>
    <id>https://home-assistant.io/blog/2015/10/26/firetv-and-radiotherm-now-supported</id>
    <content type="html"><![CDATA[<p>After two weeks of hard work I’m proud to announce the release of Home Assistant v0.7.6. For this release the main focus was bugs, test coverage and documentation. And we exceeded expectations on all three fronts. Bugs have been squashed, <a href="https://coveralls.io/builds/3946399">test coverage increased to 85%</a> and thanks to the hard work by <a href="https://github.com/fabaff">@fabaff</a> and myself the <a href="https://home-assistant.io/components/">component section</a> on the website has gotten a complete revamp.</p>

<h4>Changes</h4>

<p><img src="https://home-assistant.io/images/supported_brands/radiotherm.png" style="border:none; box-shadow: none; float: right; margin-bottom: 16px;" height="50" /><img src="https://home-assistant.io/images/supported_brands/firetv.png" style="border:none; box-shadow: none; float: right; margin-bottom: 16px; clear: right;" height="50" /><img src="https://home-assistant.io/images/supported_brands/locative.png" style="border:none; box-shadow: none; float: right; margin-bottom: 16px; clear: right;" height="50" /></p>

<ul>
  <li>Device tracker: Newer <a href="https://home-assistant.io/components/device_tracker.tplink/">TP-Link routers</a> now supported (<a href="https://github.com/mKeRix">@mKeRix</a>)</li>
  <li>Alarm Control Panel: <a href="https://home-assistant.io/components/alarm_control_panel.manual/">Manual alarm</a> added (<a href="https://github.com/sfam">@sfam</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.radiotherm/">Radiotherm</a> now supported (<a href="https://github.com/toddeye">@toddeye</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.firetv/">Amazon FireTV</a> now supported (<a href="https://github.com/happyleavesaoc">@happyleavesaoc</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.locative/">Geofancy</a> now supported (<a href="https://github.com/wind-rider">@wind-rider</a>)</li>
  <li>New component <a href="https://home-assistant.io/components/shell_command/">Shell Command</a> can expose shell commands as services (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li><a href="https://home-assistant.io/components/script/">Scripts</a> can now be customized using <code>customize</code> key in <code>configuration.yaml</code> (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.hyperion/">Hyperion</a> now supported (<a href="https://github.com/MakeMeASandwich">@MakeMeASandwich</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.arest/">aRest</a> can now also read out pins (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.forecast/">Forecast.io</a> now supports specifying units in <code>configuration.yaml</code> (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.heat_control/">Heat Control</a> has been completely rewritten (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.rest/">Rest</a> now supported (<a href="https://github.com/bachp">@bachp</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.plex/">Plex</a> can now be auto discovered and configure itself (<a href="https://github.com/tomduijf">@tomduijf</a>)</li>
  <li><a href="https://home-assistant.io/components/downloader/">Downloader</a> will now treat relative paths based on config dir (<a href="https://github.com/tomduijf">@tomduijf</a>)</li>
  <li>Line Charts will use interpolation for sensor data and show current and target temperature for thermostats (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.ubus/">OpenWRT via ubus</a> now supported (<a href="https://github.com/krzynio">@krzynio</a>)</li>
</ul>

<!--more-->

<h4>Breaking changes</h4>

<p>As part of this release we did some cleanup which introduced backwards incompatible changes:</p>

<p><strong>Heat Control thermostat no longer includes scheduling features.</strong><br />
This feature has been removed completely. Use the <a href="https://home-assistant.io/components/automation/">automation component</a> instead to control target temperature.</p>

<p><strong>Config changed for calling a service from a script.</strong><br />
<code>execute_service:</code> has been replaced with <code>service:</code>. See <a href="https://home-assistant.io/components/script/">component page</a> for example. The old method will continue working for some time.</p>

<p><strong>Scenes can no longer be turned off.</strong><br />
It is no longer possible to turn a scene off after it has been activated. The way it worked was unpredictable and causes a lot of confusion.</p>

<p><strong>Downloader treats relative paths now relative to the config dir instead of the current working dir.</strong><br />
This makes more sense as most people run Home Assistant as a daemon</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Report the temperature with ESP8266 to MQTT]]></title>
    <link href="https://home-assistant.io/blog/2015/10/11/measure-temperature-with-esp8266-and-report-to-mqtt/"/>
    <updated>2015-10-11T19:10:00+00:00</updated>
    <id>https://home-assistant.io/blog/2015/10/11/measure-temperature-with-esp8266-and-report-to-mqtt</id>
    <content type="html"><![CDATA[
<p>I recently learned about the ESP8266, a $5 chip that includes WiFi and is Arduino compatible. This means that all your DIY projects can now be done for a fraction of the price.</p>

<p>For this tutorial, I’ll walk through how to get going with ESP8266, get the temperature and humidity and report it to MQTT where Home Asssistant can pick it up.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-10-esp8266-temp/setup.png" />
Picture of the final setup (+ 2 LED for decoration)
</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-10-esp8266-temp/ha-sensor.png" />
Home Assistant will keep track of historical values and allow you to integrate it into automation.
</p>

<!--more-->

<h3>Components</h3>

<p>I’ve been using Adafruit for my shopping:</p>

<ul>
  <li><a href="http://www.adafruit.com/product/2471">Adafruit HUZZAH ESP8266 Breakout</a> (<a href="https://learn.adafruit.com/adafruit-huzzah-esp8266-breakout/assembly">assembly instructions</a>)</li>
  <li><a href="http://www.adafruit.com/product/2635">Adafruit HDC1008 Temperature &amp; Humidity Sensor Breakout Board</a> (<a href="https://learn.adafruit.com/adafruit-hdc1008-temperature-and-humidity-sensor-breakout/assembly">assembly instructions</a>)</li>
  <li><a href="https://home-assistant.io/components/mqtt/#picking-a-broker/">MQTT server</a></li>
</ul>

<p><em>Besides this, you will need the usual hardware prototype equipment: a breadboard, some wires, soldering iron + wire, Serial USB cable.</em></p>

<h3>Connections</h3>

<p>On your breadboard, make the following connections from your ESP8266 to the HDC1008:</p>

<table>
  <thead>
    <tr>
      <th>ESP8266</th>
      <th>HDC1008</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GND</td>
      <td>GND</td>
    </tr>
    <tr>
      <td>3V</td>
      <td>Vin</td>
    </tr>
    <tr>
      <td>14</td>
      <td>SCL</td>
    </tr>
    <tr>
      <td>#2</td>
      <td>SDA</td>
    </tr>
  </tbody>
</table>

<p><em>I picked <code>#2</code> and <code>14</code> myself, you can configure them in the sketch.</em></p>

<h3>Preparing your IDE</h3>

<p>Follow <a href="https://github.com/esp8266/Arduino#installing-with-boards-manager">these instructions</a> on how to install and prepare the Arduino IDE for ESP8266 development.</p>

<p>After you’re done installing, open the Arduino IDE, in the menu click on <code>sketch</code> -&gt; <code>include library</code> -&gt; <code>manage libraries</code> and install the following libraries:</p>

<ul>
  <li>PubSubClient by Nick ‘O Leary</li>
  <li>Adafruit HDC1000</li>
</ul>

<h3>Sketch</h3>

<p>If you have followed the previous steps, you’re all set.</p>

<ul>
  <li>Open Arduino IDE and create a new sketch (<code>File</code> -&gt; <code>New</code>)</li>
  <li>Copy and paste the below sketch to the Arduino IDE</li>
  <li>Adjust the values line 6 - 14 to match your setup</li>
  <li>Optional: If you want to connect to an MQTT server without a username or password, adjust line 63.</li>
  <li>To have the ESP8266 accept our new sketch, we have to put it in upload mode. On the ESP8266 device keep the GPIO0 button pressed while pressing the reset button. The red led will glow half bright to indicate it is in upload mode.</li>
  <li>Press the upload button in Arduino IDE</li>
  <li>Open the serial monitor (<code>Tools</code> -&gt; <code>Serial Monitor</code>) to see the output from your device</li>
</ul>

<p>This sketch will connect to your WiFi network and MQTT broker. It will read the temperature and humidity from the sensor every second. It will report it to the MQTT server if the difference is &gt; 1 since last reported value. Reports to the MQTT broker are sent with retain set to <code>True</code>. This means that anyone connecting to the MQTT topic will automatically be notified of the last reported value.</p>

<div class="highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
<a href="#n64" name="n64">64</a>
<a href="#n65" name="n65">65</a>
<a href="#n66" name="n66">66</a>
<a href="#n67" name="n67">67</a>
<a href="#n68" name="n68">68</a>
<a href="#n69" name="n69">69</a>
<strong><a href="#n70" name="n70">70</a></strong>
<a href="#n71" name="n71">71</a>
<a href="#n72" name="n72">72</a>
<a href="#n73" name="n73">73</a>
<a href="#n74" name="n74">74</a>
<a href="#n75" name="n75">75</a>
<a href="#n76" name="n76">76</a>
<a href="#n77" name="n77">77</a>
<a href="#n78" name="n78">78</a>
<a href="#n79" name="n79">79</a>
<strong><a href="#n80" name="n80">80</a></strong>
<a href="#n81" name="n81">81</a>
<a href="#n82" name="n82">82</a>
<a href="#n83" name="n83">83</a>
<a href="#n84" name="n84">84</a>
<a href="#n85" name="n85">85</a>
<a href="#n86" name="n86">86</a>
<a href="#n87" name="n87">87</a>
<a href="#n88" name="n88">88</a>
<a href="#n89" name="n89">89</a>
<strong><a href="#n90" name="n90">90</a></strong>
<a href="#n91" name="n91">91</a>
<a href="#n92" name="n92">92</a>
<a href="#n93" name="n93">93</a>
<a href="#n94" name="n94">94</a>
<a href="#n95" name="n95">95</a>
<a href="#n96" name="n96">96</a>
<a href="#n97" name="n97">97</a>
<a href="#n98" name="n98">98</a>
<a href="#n99" name="n99">99</a>
<strong><a href="#n100" name="n100">100</a></strong>
<a href="#n101" name="n101">101</a>
<a href="#n102" name="n102">102</a>
<a href="#n103" name="n103">103</a>
<a href="#n104" name="n104">104</a>
<a href="#n105" name="n105">105</a>
<a href="#n106" name="n106">106</a>
<a href="#n107" name="n107">107</a>
<a href="#n108" name="n108">108</a>
<a href="#n109" name="n109">109</a>
</pre></td>
  <td class="code"><pre><span class="preprocessor">#include</span> <span class="include">&lt;ESP8266WiFi.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;Wire.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;PubSubClient.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;Adafruit_HDC1000.h&gt;</span>

<span class="preprocessor">#define</span> wifi_ssid <span class="string"><span class="delimiter">&quot;</span><span class="content">YOUR WIFI SSID</span><span class="delimiter">&quot;</span></span>
<span class="preprocessor">#define</span> wifi_password <span class="string"><span class="delimiter">&quot;</span><span class="content">WIFI PASSWORD</span><span class="delimiter">&quot;</span></span>

<span class="preprocessor">#define</span> mqtt_server <span class="string"><span class="delimiter">&quot;</span><span class="content">YOUR_MQTT_SERVER_HOST</span><span class="delimiter">&quot;</span></span>
<span class="preprocessor">#define</span> mqtt_user <span class="string"><span class="delimiter">&quot;</span><span class="content">your_username</span><span class="delimiter">&quot;</span></span>
<span class="preprocessor">#define</span> mqtt_password <span class="string"><span class="delimiter">&quot;</span><span class="content">your_password</span><span class="delimiter">&quot;</span></span>

<span class="preprocessor">#define</span> humidity_topic <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor/humidity</span><span class="delimiter">&quot;</span></span>
<span class="preprocessor">#define</span> temperature_topic <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor/temperature</span><span class="delimiter">&quot;</span></span>

WiFiClient espClient;
PubSubClient client(espClient);
Adafruit_HDC1000 hdc = Adafruit_HDC1000();

<span class="directive">void</span> setup() {
  Serial.begin(<span class="integer">115200</span>);
  setup_wifi();
  client.setServer(mqtt_server, <span class="integer">1883</span>);

  <span class="comment">// Set SDA and SDL ports</span>
  Wire.begin(<span class="integer">2</span>, <span class="integer">14</span>);

  <span class="comment">// Start sensor</span>
  <span class="keyword">if</span> (!hdc.begin()) {
    Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Couldn't find sensor!</span><span class="delimiter">&quot;</span></span>);
    <span class="keyword">while</span> (<span class="integer">1</span>);
  }}

<span class="directive">void</span> setup_wifi() {
  delay(<span class="integer">10</span>);
  <span class="comment">// We start by connecting to a WiFi network</span>
  Serial.println();
  Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">Connecting to </span><span class="delimiter">&quot;</span></span>);
  Serial.println(wifi_ssid);

  WiFi.begin(wifi_ssid, wifi_password);

  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) {
    delay(<span class="integer">500</span>);
    Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">.</span><span class="delimiter">&quot;</span></span>);
  }

  Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>);
  Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">WiFi connected</span><span class="delimiter">&quot;</span></span>);
  Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">IP address: </span><span class="delimiter">&quot;</span></span>);
  Serial.println(WiFi.localIP());
}

<span class="directive">void</span> reconnect() {
  <span class="comment">// Loop until we're reconnected</span>
  <span class="keyword">while</span> (!client.connected()) {
    Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">Attempting MQTT connection...</span><span class="delimiter">&quot;</span></span>);
    <span class="comment">// Attempt to connect</span>
    <span class="comment">// If you do not want to use a username and password, change next line to</span>
    <span class="comment">// if (client.connect(&quot;ESP8266Client&quot;)) {</span>
    <span class="keyword">if</span> (client.connect(<span class="string"><span class="delimiter">&quot;</span><span class="content">ESP8266Client</span><span class="delimiter">&quot;</span></span>, mqtt_user, mqtt_password)) {
      Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">connected</span><span class="delimiter">&quot;</span></span>);
    } <span class="keyword">else</span> {
      Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">failed, rc=</span><span class="delimiter">&quot;</span></span>);
      Serial.print(client.state());
      Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content"> try again in 5 seconds</span><span class="delimiter">&quot;</span></span>);
      <span class="comment">// Wait 5 seconds before retrying</span>
      delay(<span class="integer">5000</span>);
    }
  }
}

<span class="predefined-type">bool</span> checkBound(<span class="predefined-type">float</span> newValue, <span class="predefined-type">float</span> prevValue, <span class="predefined-type">float</span> maxDiff) {
  <span class="keyword">return</span> newValue &lt; prevValue - maxDiff || newValue &gt; prevValue + maxDiff;
}

<span class="predefined-type">long</span> lastMsg = <span class="integer">0</span>;
<span class="predefined-type">float</span> temp = <span class="float">0</span><span class="float">.0</span>;
<span class="predefined-type">float</span> hum = <span class="float">0</span><span class="float">.0</span>;
<span class="predefined-type">float</span> diff = <span class="float">1</span><span class="float">.0</span>;

<span class="directive">void</span> loop() {
  <span class="keyword">if</span> (!client.connected()) {
    reconnect();
  }
  client.loop();

  <span class="predefined-type">long</span> now = millis();
  <span class="keyword">if</span> (now - lastMsg &gt; <span class="integer">1000</span>) {
    lastMsg = now;

    <span class="predefined-type">float</span> newTemp = hdc.readTemperature();
    <span class="predefined-type">float</span> newHum = hdc.readHumidity();

    <span class="keyword">if</span> (checkBound(newTemp, temp, diff)) {
      temp = newTemp;
      Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">New temperature:</span><span class="delimiter">&quot;</span></span>);
      Serial.println(String(temp).c_str());
      client.publish(temperature_topic, String(temp).c_str(), <span class="predefined-constant">true</span>);
    }

    <span class="keyword">if</span> (checkBound(newHum, hum, diff)) {
      hum = newHum;
      Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">New humidity:</span><span class="delimiter">&quot;</span></span>);
      Serial.println(String(hum).c_str());
      client.publish(humidity_topic, String(hum).c_str(), <span class="predefined-constant">true</span>);
    }
  }
}
</pre></td>
</tr></table>
</div>

<h3>Configuring Home Assistant</h3>

<p>The last step is to integrate the sensor values into Home Assistant. This can be done by setting up Home Assistant to connect to the MQTT broker and subscribe to the sensor topics.</p>

<div class="highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
</pre></td>
  <td class="code"><pre><span class="key">mqtt</span>:
  <span class="key">broker</span>: <span class="string"><span class="content">YOUR_MQTT_SERVER_HOST</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">your_username</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">your_password</span></span>

<span class="key">sensor</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
  <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Temperature</span><span class="delimiter">&quot;</span></span>
  <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor/temperature</span><span class="delimiter">&quot;</span></span>
  <span class="key">qos</span>: <span class="string"><span class="content">0</span></span>
  <span class="key">unit_of_measurement</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ºC</span><span class="delimiter">&quot;</span></span>

<span class="key">sensor 2</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
  <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Humidity</span><span class="delimiter">&quot;</span></span>
  <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor/humidity</span><span class="delimiter">&quot;</span></span>
  <span class="key">qos</span>: <span class="string"><span class="content">0</span></span>
  <span class="key">unit_of_measurement</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">%</span><span class="delimiter">&quot;</span></span>
</pre></td>
</tr></table>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.7.5: Blinkstick, SNMP, Telegram]]></title>
    <link href="https://home-assistant.io/blog/2015/10/11/rfxtrx-blinkstick-and-snmp-support/"/>
    <updated>2015-10-11T17:10:00+00:00</updated>
    <id>https://home-assistant.io/blog/2015/10/11/rfxtrx-blinkstick-and-snmp-support</id>
    <content type="html"><![CDATA[<p>We discovered two issues annoying enough to warrent the release of 0.7.5:</p>

<ul>
  <li>Home Assistant package did not include the CloudMQTT certificate.</li>
  <li>A bug in the core caused issues when some platforms are loaded twice.</li>
</ul>

<p>This release also includes some new platforms (because they keep coming!):</p>

<p><img src="https://home-assistant.io/images/supported_brands/blinkstick.png" style="border:none; box-shadow: none; float: right;" height="50" /><img src="https://home-assistant.io/images/supported_brands/rfxtrx.png" style="border:none; box-shadow: none; float: right; clear: right;" height="50" /><img src="https://home-assistant.io/images/supported_brands/telegram.png" style="border:none; box-shadow: none; float: right; clear: right;" height="50" /></p>

<ul>
  <li>Light: <a href="https://home-assistant.io/components/light.blinksticklight/">blinkstick platform</a> added (<a href="https://github.com/alanbowman">@alanbowman</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.snmp/">SNMP platform</a> added (<a href="https://github.com/tomduijf">@tomduijf</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.rfxtrx/">rfxtrx platform</a> added (<a href="https://github.com/badele">@badele</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.rfxtrx/">rfxtrx platform</a> added (<a href="https://github.com/badele">@badele</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.telegram/">telegram platform</a> added (<a href="https://github.com/fabaff">@fabaff</a>)</li>
</ul>

<p>Also, the media player was extended by <a href="https://github.com/maddox">@maddox</a> to support the play media command. This has been implemented for the <a href="https://home-assistant.io/components/media_player.itunes/">iTunes platform</a>.</p>
]]></content>
  </entry>
  
</feed>

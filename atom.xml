<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Home Assistant]]></title>
  <link href="https://home-assistant.io/atom.xml" rel="self"/>
  <link href="https://home-assistant.io/"/>
  <updated>2015-12-10T09:18:54-08:00</updated>
  <id>https://home-assistant.io/</id>
  <author>
    <name><![CDATA[Paulus Schoutsen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Activating Tasker tasks from Home Assistant using command line switches]]></title>
    <link href="https://home-assistant.io/blog/2015/12/10/activating-tasker-tasks-from-home-assistant-using-command-line-switches/"/>
    <updated>2015-12-10T02:39:41-08:00</updated>
    <id>https://home-assistant.io/blog/2015/12/10/activating-tasker-tasks-from-home-assistant-using-command-line-switches</id>
    <content type="html"><![CDATA[<p><img src="https://home-assistant.io/images/blog/2015-12-tasker/tasker-logo.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 12px;" width="200" /><br />
In this tutorial I will explain how you can activate Tasker tasks from Home Assistant command line switches. We are going to set up a switch that when toggled will make your Android device say either “On” or “Off”.</p>

<p>You could also do this with the automation component instead so whenever you put your house to sleep mode for example your Android device will open up Google Play Books or the Kindle app ready for you to read as well as dimming your lights, but this tutorial is all about the switches.</p>

<!--more-->

<h3>AutoRemote URL</h3>

<p>First things first you should install <a href="https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm">Tasker</a> and <a href="https://play.google.com/store/apps/details?id=com.joaomgcd.autoremote">AutoRemote</a> onto your Android device and launch AutoRemote. You should see a URL above the QR code, visit it in your browser and it should bring up a page a bit like this.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-12-tasker/screenshot-1.png" />
</p>

<p>Now type in <code>SayOn</code> in the <code>Message</code> box and you should see a box appear on the right with a URL in it, this is what we will be using in the Python script later on so save that for later. Do the same thing again but this time replace <code>SayOn</code> with <code>SayOff</code>. Now just click the <code>Send message now!</code> button to test that your commands will get sent to your Android device, if they do you will see a toast message at the bottom of your screen like this one.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-12-tasker/screenshot-2.png" height="450" />
</p>

<h3>Tasker Setup</h3>

<p>Open up Tasker and make sure you’re in the <code>PROFILES</code> tab, then select the plus icon to create a new profile. Select <code>Event</code> -&gt; <code>Plugin</code> -&gt; <code>AutoRemote</code> -&gt; <code>AutoRemote</code> and then the pencil icon to configure the AutoRemote event. Select <code>Message Filter</code> and enter in <code>SayOn</code> then go back until it asks you for a task. Select <code>New task</code> then just leave the next field blank and select the tick icon. <br />
This is where we’ll configure our task, so select the plus icon to select an action. Select <code>Alert</code> -&gt; <code>Say</code> to add a Say action. Enter <code>On</code> in the text field and go back to test your task, make sure your media volume is up then select the play icon, you should hear your device say “On”.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-12-tasker/screenshot-3.png" height="450" />
</p>

<p>Now you can go back to the main Tasker screen and create another profile but this time replace <code>SayOn</code> with <code>SayOff</code> and <code>On</code> with <code>Off</code>. After you’ve done that go to the main screen again and select the menu button at the top then <code>Exit</code> and <code>Save first</code> to make sure everything is saved properly.</p>

<h3>Python Script</h3>

<p>Now it’s time to set it up the script, so create a new Python script and name it <code>On.py</code> then enter this code:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="keyword">import</span> <span class="include">requests</span>
requests.get(<span class="string"><span class="delimiter">'</span><span class="content">[URL]</span><span class="delimiter">'</span></span>)
</pre></div>
</div>
</div>

<p>Enter in your “On” URL then save it. Create another script but this time call it <code>Off.py</code> and enter your “off” URL instead.</p>

<h3>Home Assistant Configuration</h3>

<p>Add a command line switch to your Home Assistant configuration:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">switch</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">command_switch</span></span>
  <span class="key">switches</span>:
    <span class="key">tasker_say</span>:
      <span class="key">oncmd</span>: <span class="string"><span class="content">python &quot;[LocationOfOnScript]&quot;</span></span>
      <span class="key">offcmd</span>: <span class="string"><span class="content">python &quot;[LocationOfOffScript]&quot;</span></span>
</pre></div>
</div>
</div>

<p>Now load up Home Assistant and whenever you toggle the switch you created your Android device will respond with either “On” or “Off”. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[InfluxDB and Grafana]]></title>
    <link href="https://home-assistant.io/blog/2015/12/07/influxdb-and-grafana/"/>
    <updated>2015-12-07T06:15:13-08:00</updated>
    <id>https://home-assistant.io/blog/2015/12/07/influxdb-and-grafana</id>
    <content type="html"><![CDATA[<p><img src="https://home-assistant.io/images/supported_brands/influxdb.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 12px;" width="200" /><img src="https://home-assistant.io/images/supported_brands/grafana.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 12px;" width="200" /><br />
The <a href="https://influxdb.com/">InfluxDB</a> database is a so-called time series database primarly designed to store sensor data and real-time analytics.</p>

<p>The <code>influxdb</code> component makes it possible to transfer all state changes from Home Assistant to an external <a href="https://influxdb.com/">InfluxDB</a> database.</p>

<!--more-->

<p>The first step is to install the InfluxDB packages. If you are not running Fedora, check the <a href="https://influxdb.com/docs/v0.9/introduction/installation.html">installation</a> section for further details.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ sudo dnf -y install http://influxdb.s3.amazonaws.com/influxdb-0.9.5.1-1.x86_64.rpm
</pre></div>
</div>
</div>

<p>Launch the InfluxDB service.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ sudo systemctl start influxdb
</pre></div>
</div>
</div>

<p>If everything went well, then the web interface of the ddatabase should be accessible at <a href="http://localhost:8083/">http://localhost:8083/</a>. Create a database <code>home_assistant</code> to use with Home Assistant either with the web interface or the commandline tool <code>influx</code>.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-12-influxdb/influxdb-frontend.png" />
  InfluxDB web frontend
</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ influx
Visit https://enterprise.influxdata.com to register for updates, InfluxDB server management, and monitoring.
Connected to http://localhost:8086 version 0.9.5.1
InfluxDB shell 0.9.5.1
&gt; CREATE DATABASE home_assistant
</pre></div>
</div>
</div>

<p>An optional step is to create a user. Keep in mind to adjust the configuration (add <code>username</code> and <code>password</code>) in the next step if you prefer to go this way.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>&gt; CREATE USER &quot;home-assistant&quot; WITH PASSWORD 'password'
</pre></div>
</div>
</div>

<p>To use the <code>influxdb</code> component in your installation, add the following to your <code>configuration.yaml</code> file:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">influxdb</span>:
  <span class="key">host</span>: <span class="string"><span class="content">127.0.0.1</span></span>
</pre></div>
</div>
</div>

<p>After you restart Home Assistant you should see that the InfluxDB database gets filled. The <a href="https://influxdb.com/docs/v0.9/query_language/index.html">language</a> to query the database is similar to SQL.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ influx
[...]
&gt; USE home_assistant
Using database home_assistant
&gt; SELECT * FROM binary_sensor
name: binary_sensor
-------------------
time            domain        entity_id    value
1449496577000000000    binary_sensor    bathroom_door    0
1449496577000000000    binary_sensor    bathroom_window    0
1449496577000000000    binary_sensor    basement_door    0
1449496577000000000    binary_sensor    basement_window    0
1449496684000000000    binary_sensor    bathroom_window    1
[...]
</pre></div>
</div>
</div>

<p><a href="http://grafana.org/">Grafana</a> is a dashboard that can create graphs from different sources including InfluxDB. The installation is simple, and there are detailed steps for many different configurations on the <a href="http://docs.grafana.org/installation/">Grafana installation</a> page. For a recent system that is running Fedora:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ sudo dnf -y install https://grafanarel.s3.amazonaws.com/builds/grafana-2.5.0-1.x86_64.rpm
</pre></div>
</div>
</div>

<p>Start the grafana server.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ sudo systemctl daemon-reload
$ sudo systemctl start grafana-server
$ sudo systemctl status grafana-server
</pre></div>
</div>
</div>

<p>Login with the username <code>admin</code> and the password <code>admin</code> at <a href="http://localhost:3000/login">http://localhost:3000/login</a>. Now follow the <a href="http://docs.grafana.org/datasources/influxdb/">InfluxDB setup instructions</a>.</p>

<p>Now you can start to create dashboards and graphs. You have various options to get the data from the graph. The next image just shows a screenshot of the setting for a temperature sensor.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-12-influxdb/grafana-settings.png" />
  Grafana settings
</p>

<p>If the graph is not showing up in the dashboard you need to adjust the time range in the right upper corner. The graph is created for all state changes recorded by Home Assistant.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-12-influxdb/grafana-graph.png" />
  Grafana Temperature graph
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.9: Rollershutters, locks, binary sensors and InfluxDB]]></title>
    <link href="https://home-assistant.io/blog/2015/12/06/locks-rollershutters-binary-sensors-and-influxdb-support/"/>
    <updated>2015-12-06T11:29:00-08:00</updated>
    <id>https://home-assistant.io/blog/2015/12/06/locks-rollershutters-binary-sensors-and-influxdb-support</id>
    <content type="html"><![CDATA[<p>It’s been a few weeks but we managed to polish a nice new release of Home Assistant for y’all!</p>

<p><img src="https://home-assistant.io/images/supported_brands/homematic.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="238" /><img src="https://home-assistant.io/images/supported_brands/ecobee.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="238" /><img src="https://home-assistant.io/images/supported_brands/influxdb.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="238" /></p>

<ul>
  <li>New <a href="https://home-assistant.io/components/lock/">lock component</a> including <a href="https://home-assistant.io/components/lock.wink/">Wink</a> support (<a href="https://github.com/miniconfig">@miniconfig</a>)</li>
  <li>New <a href="https://home-assistant.io/components/binary_sensor/">binary sensor component</a> including <a href="https://home-assistant.io/components/binary_sensor.arest/">aRest</a> and <a href="https://home-assistant.io/components/binary_sensor.mqtt/">MQTT</a> support (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>New <a href="https://home-assistant.io/components/rollershutter/">rollershutter component</a> including <a href="https://home-assistant.io/components/rollershutter.mqtt/">MQTT</a> support (<a href="https://github.com/sfam">@sfam</a>)</li>
  <li>New <a href="https://home-assistant.io/components/influxdb/">InfluxDB component</a> to store data in InfluxDB (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.ecobee/">Ecobee</a> now supported (<a href="https://github.com/nkgilley">@nkgilley</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.homematic/">Homematic</a> now supported (<a href="https://github.com/goir">@goir</a>)</li>
  <li>Support for <a href="https://home-assistant.io/components/mqtt/#processing-json/">parsing JSON values</a> received over MQTT (<a href="https://github.com/mcdeck">@mcdeck</a>)</li>
  <li>Bunch of bug fixes and optimizations</li>
</ul>

<p>To update, run <code>pip3 install --upgrade homeassistant</code>.</p>

<p class="img">
<img src="https://home-assistant.io/images/screenshots/lock-and-rollershutter-card.png" />
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Community Highlights]]></title>
    <link href="https://home-assistant.io/blog/2015/12/05/community-highlights/"/>
    <updated>2015-12-05T23:39:00-08:00</updated>
    <id>https://home-assistant.io/blog/2015/12/05/community-highlights</id>
    <content type="html"><![CDATA[<p>From time to time we come along things that are worth sharing with fellow Home Assisters. Here a list of some cool stuff from last week:</p>

<p>First is the public beta of <a href="https://letsencrypt.org/">Let’s Encrypt</a>. Let’s Encrypt is a new certificate authority that is free, automated and open. This means that it will now be very easy to secure your connection to Home Assistant while you are away from home. W1ll1am23 has written up <a href="https://automic.us/forum/viewtopic.php?f=4&amp;t=29">a guide how to get started</a>.</p>

<p>The next thing is a show-off of some of the cool stuff people do with Home Assistant. This is miniconfig talking to Home Assistant using the Amazon Echo!</p>

<div style="width: 560px; margin: 0 auto 16px;">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/9QQjklnSQKY" frameborder="0" allowfullscreen=""></iframe>
</div>

<p>And last but not least, Midwestern Mac did a <a href="http://www.midwesternmac.com/blogs/jeff-geerling/raspberry-pi-microsd-card">microSD card performance comparison</a> for the Raspberry Pi. If you’re using a Pi, make sure to check it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Survey November 2015]]></title>
    <link href="https://home-assistant.io/blog/2015/11/22/survey-november-2015/"/>
    <updated>2015-11-22T06:51:18-08:00</updated>
    <id>https://home-assistant.io/blog/2015/11/22/survey-november-2015</id>
    <content type="html"><![CDATA[<p><img src="https://home-assistant.io/images/blog/2015-11-survey/releases.png" style="float: right; margin-left: 8px; margin-bottom: 8px;" height="120" />Around a week ago we started with the first survey. Now 30 people have participated. Thank you very much if you did. We think that’s enough time to have some “only partially representative” data. It’s hard to tell how many Home Assistant users are out there. Currently there are 215 members in our <a href="https://gitter.im/balloob/home-assistant">Gitter chat room</a> and last week <a href="https://pypi.python.org/pypi/homeassistant/">PyPI</a> counted 5063 downloads.</p>

<p>The idea was to anonymously collect some details about the usage of the different parts of Home Assistant and a little bit about the environment its running in.</p>

<!--more-->
<p>Thanks to Python, users are running Home Assistant on the most popular Linux distributions and other operating systems including OS X and Microsoft Windows. One quarter of the operating systems are unknown which leads to the assumption that it is possible to run Home Assistant on most of the available operation systems today. We hope that *BSD users have fun too. The Hardware platform of choice seems to be x86_64 and ARM.</p>

<p>Of course most users are running with the <a href="https://home-assistant.io/components/automation/">automation</a> component otherwise it would make much sense to use Home Assistant. The <a href="https://home-assistant.io/components/sun/">sun</a> component is used a lot too. We hope that this is not because this component is enabled by default.</p>

<p>The <a href="https://home-assistant.io/components/alarm_control_panel/">Alarm control panels</a> and the <a href="https://home-assistant.io/components/camera/">camera component</a> are both used by around one third of the participants of the survey. It’s safe to say that they cover a niche, but they will gain momentum when people discover how they can build alarm systems with Home Assistant.</p>

<p><a href="https://home-assistant.io/components/light.hue/">Philips Hue</a> is the “winner” in the light category closely followed by <a href="components/light.mqtt/">MQTT lights</a>. <a href="https://home-assistant.io/components/media_player.cast/">Google Cast</a> and <a href="https://home-assistant.io/components/media_player.plex/"> Plex</a> are the top media player platforms. <a href="https://home-assistant.io/components/notify.pushbullet/">Pushbullet</a> is by far the most-used <a href="https://home-assistant.io/components/notify/">notification platform</a>. If you followed the recent efforts to improve this platform it’s comprehensible.</p>

<p>It’s interesting to see that most of the sensor, switch, and thermostat platforms are used. A lot of people seem to be interested in the weather data provided by the <a href="https://home-assistant.io/components/sensor.forecast/">Forecast sensor</a>. The MQTT sensors and switches are deployed in almost 50% of all Home Assistant setups.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/releases.png" />
  Home Assistant releases
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/os.png" />
  Operating systems
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/platforms.png" />
  Hardware platforms
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/components.png" />
  Components
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/alarm-cameras.png" />
  Alarm Control Panels and Cameras
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/trackers.png" />
  Device trackers
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/lights.png" />
  Lights
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/players.png" />
  Media players
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/notifications.png" />
  Notifications
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/sensors.png" />
  Sensors
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/switches.png" />
  Switches
</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-11-survey/thermostats.png" />
  Thermostats
</p>

<p>The conclusion is that <a href="http://mqtt.org/">MQTT</a> is popular in almost every section from Alarm Control Panel, presence detection with <a href="http://owntracks.org/">owntracks</a>, sensors and switches, and now even for lights.</p>

<p>The interpretation of the data is up to you. Again, thanks for participating in this survey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.8: Honeywell Thermostats, Orvibo switches and Z-Wave switches and lights ]]></title>
    <link href="https://home-assistant.io/blog/2015/11/16/zwave-switches-lights-and-honeywell-thermostats-now-supported/"/>
    <updated>2015-11-16T20:27:00-08:00</updated>
    <id>https://home-assistant.io/blog/2015/11/16/zwave-switches-lights-and-honeywell-thermostats-now-supported</id>
    <content type="html"><![CDATA[<p><img src="https://home-assistant.io/images/screenshots/custom-icons.png" style="float: right;" />We have all been hard at work to get this latest release ready. One of the big highlights in this release is the introduction of an extended iconset to be used in the frontend (credits to <a href="https://github.com/happyleavesaoc">@happyleavesaoc</a> for idea and prototype). To get started with customizing, pick any icon from <a href="https://MaterialDesignIcons.com">MaterialDesignIcons.com</a>, prefix the name with <code>mdi:</code> and stick it into your <code>customize</code> section in <code>configuration.yaml</code>:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">homeassistant</span>:
  <span class="key">customize</span>:
    <span class="key">switch.ac</span>:
      <span class="key">icon</span>: <span class="string"><span class="content">'mdi:air-conditioner'</span></span>
</pre></div>
</div>
</div>

<h4>Breaking changes</h4>

<ul>
  <li>Any existing zone icon will have to be replaced with one from <a href="https://MaterialDesignIcons.com">MaterialDesignIcons.com</a>.</li>
  <li>LimitlessLED light services require colors to be specified in RGB instead of XY.</li>
</ul>

<h4>Changes</h4>

<p><img src="https://home-assistant.io/images/supported_brands/honeywell.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" height="50" /><img src="https://home-assistant.io/images/supported_brands/orvibo.png" style="clear: right;  border:none; box-shadow: none; float: right; margin-bottom: 16px;" height="50" /><img src="https://home-assistant.io/images/supported_brands/pushetta.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" height="50" /></p>

<ul>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.honeywell/">Honeywell</a> now supported (<a href="https://github.com/sander76">@sander76</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.orvibo/">Orvibo</a> now supported (<a href="https://github.com/happyleavesaoc">@happyleavesaoc</a>)</li>
  <li>Camera: <a href="https://home-assistant.io/components/camera.mjpeg/">mjpeg camera’s</a> now supported (<a href="https://github.com/ryanturner">@ryanturner</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.pushetta/">Pushetta</a> now supported (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.mqtt/">MQTT</a> now supported (<a href="https://github.com/hexxter">@hexxter</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/zwave/">Z-Wave</a> now supported (<a href="https://github.com/leoc">@leoc</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/zwave/">Z-Wave</a> now supported (<a href="https://github.com/leoc">@leoc</a>)</li>
  <li>New component <a href="https://home-assistant.io/components/logger/">logger</a> allows filtering logged data (<a href="https://github.com/badele">@badele</a>)</li>
  <li>New component <a href="https://home-assistant.io/components/updater/">updater</a> will notify users if an update for Home Assistant is available (<a href="https://github.com/rmkraus">@rmkraus</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.pushbullet/">PushBullet</a> now allows targeting contacts/channels/specific devices (<a href="https://github.com/tomduijf">@tomduijf</a>)</li>
  <li>Light: Allow controlling color temperature (<a href="https://github.com/tomduijf">@tomduijf</a>)</li>
  <li>Frontend: about page added (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Switch RGB as the color unit used in light component (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Re-install platform and component dependencies after a Home Assistant version upgrade (<a href="https://github.com/balloob">@balloob</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.7.6: Amazon FireTV, Radiotherm thermostats]]></title>
    <link href="https://home-assistant.io/blog/2015/10/26/firetv-and-radiotherm-now-supported/"/>
    <updated>2015-10-26T18:10:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/10/26/firetv-and-radiotherm-now-supported</id>
    <content type="html"><![CDATA[<p>After two weeks of hard work I’m proud to announce the release of Home Assistant v0.7.6. For this release the main focus was bugs, test coverage and documentation. And we exceeded expectations on all three fronts. Bugs have been squashed, <a href="https://coveralls.io/builds/3946399">test coverage increased to 85%</a> and thanks to the hard work by <a href="https://github.com/fabaff">@fabaff</a> and myself the <a href="https://home-assistant.io/components/">component section</a> on the website has gotten a complete revamp.</p>

<h4>Changes</h4>

<p><img src="https://home-assistant.io/images/supported_brands/radiotherm.png" style="border:none; box-shadow: none; float: right; margin-bottom: 16px;" height="50" /><img src="https://home-assistant.io/images/supported_brands/firetv.png" style="border:none; box-shadow: none; float: right; margin-bottom: 16px; clear: right;" height="50" /><img src="https://home-assistant.io/images/supported_brands/geofancy.png" style="border:none; box-shadow: none; float: right; margin-bottom: 16px; clear: right;" height="50" /></p>

<ul>
  <li>Device tracker: Newer <a href="https://home-assistant.io/components/device_tracker.tplink/">TP-Link routers</a> now supported (<a href="https://github.com/mKeRix">@mKeRix</a>)</li>
  <li>Alarm Control Panel: <a href="https://home-assistant.io/components/alarm_control_panel.manual/">Manual alarm</a> added (<a href="https://github.com/sfam">@sfam</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.radiotherm/">Radiotherm</a> now supported (<a href="https://github.com/toddeye">@toddeye</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.firetv/">Amazon FireTV</a> now supported (<a href="https://github.com/happyleavesaoc">@happyleavesaoc</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.geofancy/">Geofancy</a> now supported (<a href="https://github.com/wind-rider">@wind-rider</a>)</li>
  <li>New component <a href="https://home-assistant.io/components/shell_command/">Shell Command</a> can expose shell commands as services (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li><a href="https://home-assistant.io/components/script/">Scripts</a> can now be customized using <code>customize</code> key in <code>configuration.yaml</code> (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.hyperion/">Hyperion</a> now supported (<a href="https://github.com/MakeMeASandwich">@MakeMeASandwich</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.arest/">aRest</a> can now also read out pins (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.forecast/">Forecast.io</a> now supports specifying units in <code>configuration.yaml</code> (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.heat_control/">Heat Control</a> has been completely rewritten (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.rest/">Rest</a> now supported (<a href="https://github.com/bachp">@bachp</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.plex/">Plex</a> can now be auto discovered and configure itself (<a href="https://github.com/tomduijf">@tomduijf</a>)</li>
  <li><a href="https://home-assistant.io/components/downloader/">Downloader</a> will now treat relative paths based on config dir (<a href="https://github.com/tomduijf">@tomduijf</a>)</li>
  <li>Line Charts will use interpolation for sensor data and show current and target temperature for thermostats (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.ubus/">OpenWRT via ubus</a> now supported (<a href="https://github.com/krzynio">@krzynio</a>)</li>
</ul>

<!--more-->

<h4>Breaking changes</h4>

<p>As part of this release we did some cleanup which introduced backwards incompatible changes:</p>

<p><strong>Heat Control thermostat no longer includes scheduling features.</strong><br />
This feature has been removed completely. Use the <a href="https://home-assistant.io/components/automation/">automation component</a> instead to control target temperature.</p>

<p><strong>Config changed for calling a service from a script.</strong><br />
<code>execute_service:</code> has been replaced with <code>service:</code>. See <a href="https://home-assistant.io/components/script/">component page</a> for example. The old method will continue working for some time.</p>

<p><strong>Scenes can no longer be turned off.</strong><br />
It is no longer possible to turn a scene off after it has been activated. The way it worked was unpredictable and causes a lot of confusion.</p>

<p><strong>Downloader treats relative paths now relative to the config dir instead of the current working dir.</strong><br />
This makes more sense as most people run Home Assistant as a daemon</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Report the temperature with ESP8266 to MQTT]]></title>
    <link href="https://home-assistant.io/blog/2015/10/11/measure-temperature-with-esp8266-and-report-to-mqtt/"/>
    <updated>2015-10-11T12:10:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/10/11/measure-temperature-with-esp8266-and-report-to-mqtt</id>
    <content type="html"><![CDATA[
<p>I recently learned about the ESP8266, a $5 chip that includes WiFi and is Arduino compatible. This means that all your DIY projects can now be done for a fraction of the price.</p>

<p>For this tutorial, I’ll walk through how to get going with ESP8266, get the temperature and humidity and report it to MQTT where Home Asssistant can pick it up.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-10-esp8266-temp/setup.png" />
Picture of the final setup (+ 2 LED for decoration)
</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2015-10-esp8266-temp/ha-sensor.png" />
Home Assistant will keep track of historical values and allow you to integrate it into automation.
</p>

<!--more-->

<h3>Components</h3>

<p>I’ve been using Adafruit for my shopping:</p>

<ul>
  <li><a href="http://www.adafruit.com/product/2471">Adafruit HUZZAH ESP8266 Breakout</a> (<a href="https://learn.adafruit.com/adafruit-huzzah-esp8266-breakout/assembly">assembly instructions</a>)</li>
  <li><a href="http://www.adafruit.com/product/2635">Adafruit HDC1008 Temperature &amp; Humidity Sensor Breakout Board</a> (<a href="https://learn.adafruit.com/adafruit-hdc1008-temperature-and-humidity-sensor-breakout/assembly">assembly instructions</a>)</li>
  <li><a href="https://home-assistant.io/components/mqtt/#picking-a-broker/">MQTT server</a></li>
</ul>

<p><em>Besides this, you will need the usual hardware prototype equipment: a breadboard, some wires, soldering iron + wire, Serial USB cable.</em></p>

<h3>Connections</h3>

<p>On your breadboard, make the following connections from your ESP8266 to the HDC1008:</p>

<table>
  <thead>
    <tr>
      <th>ESP8266</th>
      <th>HDC1008</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GND</td>
      <td>GND</td>
    </tr>
    <tr>
      <td>3V</td>
      <td>Vin</td>
    </tr>
    <tr>
      <td>14</td>
      <td>SCL</td>
    </tr>
    <tr>
      <td>#2</td>
      <td>SDA</td>
    </tr>
  </tbody>
</table>

<p><em>I picked <code>#2</code> and <code>14</code> myself, you can configure them in the sketch.</em></p>

<h3>Preparing your IDE</h3>

<p>Follow <a href="https://github.com/esp8266/Arduino#installing-with-boards-manager">these instructions</a> on how to install and prepare the Arduino IDE for ESP8266 development.</p>

<p>After you’re done installing, open the Arduino IDE, in the menu click on <code>sketch</code> -&gt; <code>include library</code> -&gt; <code>manage libraries</code> and install the following libraries:</p>

<ul>
  <li>PubSubClient by Nick ‘O Leary</li>
  <li>Adafruit HDC1000</li>
</ul>

<h3>Sketch</h3>

<p>If you have followed the previous steps, you’re all set.</p>

<ul>
  <li>Open Arduino IDE and create a new sketch (<code>File</code> -&gt; <code>New</code>)</li>
  <li>Copy and paste the below sketch to the Arduino IDE</li>
  <li>Adjust the values line 6 - 14 to match your setup</li>
  <li>Optional: If you want to connect to an MQTT server without a username or password, adjust line 63.</li>
  <li>To have the ESP8266 accept our new sketch, we have to put it in upload mode. On the ESP8266 device keep the GPIO0 button pressed while pressing the reset button. The red led will glow half bright to indicate it is in upload mode.</li>
  <li>Press the upload button in Arduino IDE</li>
  <li>Open the serial monitor (<code>Tools</code> -&gt; <code>Serial Monitor</code>) to see the output from your device</li>
</ul>

<p>This sketch will connect to your WiFi network and MQTT broker. It will read the temperature and humidity from the sensor every second. It will report it to the MQTT server if the difference is &gt; 1 since last reported value. Reports to the MQTT broker are sent with retain set to <code>True</code>. This means that anyone connecting to the MQTT topic will automatically be notified of the last reported value.</p>

<div class="highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
<a href="#n64" name="n64">64</a>
<a href="#n65" name="n65">65</a>
<a href="#n66" name="n66">66</a>
<a href="#n67" name="n67">67</a>
<a href="#n68" name="n68">68</a>
<a href="#n69" name="n69">69</a>
<strong><a href="#n70" name="n70">70</a></strong>
<a href="#n71" name="n71">71</a>
<a href="#n72" name="n72">72</a>
<a href="#n73" name="n73">73</a>
<a href="#n74" name="n74">74</a>
<a href="#n75" name="n75">75</a>
<a href="#n76" name="n76">76</a>
<a href="#n77" name="n77">77</a>
<a href="#n78" name="n78">78</a>
<a href="#n79" name="n79">79</a>
<strong><a href="#n80" name="n80">80</a></strong>
<a href="#n81" name="n81">81</a>
<a href="#n82" name="n82">82</a>
<a href="#n83" name="n83">83</a>
<a href="#n84" name="n84">84</a>
<a href="#n85" name="n85">85</a>
<a href="#n86" name="n86">86</a>
<a href="#n87" name="n87">87</a>
<a href="#n88" name="n88">88</a>
<a href="#n89" name="n89">89</a>
<strong><a href="#n90" name="n90">90</a></strong>
<a href="#n91" name="n91">91</a>
<a href="#n92" name="n92">92</a>
<a href="#n93" name="n93">93</a>
<a href="#n94" name="n94">94</a>
<a href="#n95" name="n95">95</a>
<a href="#n96" name="n96">96</a>
<a href="#n97" name="n97">97</a>
<a href="#n98" name="n98">98</a>
<a href="#n99" name="n99">99</a>
<strong><a href="#n100" name="n100">100</a></strong>
<a href="#n101" name="n101">101</a>
<a href="#n102" name="n102">102</a>
<a href="#n103" name="n103">103</a>
<a href="#n104" name="n104">104</a>
<a href="#n105" name="n105">105</a>
<a href="#n106" name="n106">106</a>
<a href="#n107" name="n107">107</a>
<a href="#n108" name="n108">108</a>
<a href="#n109" name="n109">109</a>
</pre></td>
  <td class="code"><pre><span class="preprocessor">#include</span> <span class="include">&lt;ESP8266WiFi.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;Wire.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;PubSubClient.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;Adafruit_HDC1000.h&gt;</span>

<span class="preprocessor">#define</span> wifi_ssid <span class="string"><span class="delimiter">&quot;</span><span class="content">YOUR WIFI SSID</span><span class="delimiter">&quot;</span></span>
<span class="preprocessor">#define</span> wifi_password <span class="string"><span class="delimiter">&quot;</span><span class="content">WIFI PASSWORD</span><span class="delimiter">&quot;</span></span>

<span class="preprocessor">#define</span> mqtt_server <span class="string"><span class="delimiter">&quot;</span><span class="content">YOUR_MQTT_SERVER_HOST</span><span class="delimiter">&quot;</span></span>
<span class="preprocessor">#define</span> mqtt_user <span class="string"><span class="delimiter">&quot;</span><span class="content">your_username</span><span class="delimiter">&quot;</span></span>
<span class="preprocessor">#define</span> mqtt_password <span class="string"><span class="delimiter">&quot;</span><span class="content">your_password</span><span class="delimiter">&quot;</span></span>

<span class="preprocessor">#define</span> humidity_topic <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor/humidity</span><span class="delimiter">&quot;</span></span>
<span class="preprocessor">#define</span> temperature_topic <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor/temperature</span><span class="delimiter">&quot;</span></span>

WiFiClient espClient;
PubSubClient client(espClient);
Adafruit_HDC1000 hdc = Adafruit_HDC1000();

<span class="directive">void</span> setup() {
  Serial.begin(<span class="integer">115200</span>);
  setup_wifi();
  client.setServer(mqtt_server, <span class="integer">1883</span>);

  <span class="comment">// Set SDA and SDL ports</span>
  Wire.begin(<span class="integer">2</span>, <span class="integer">14</span>);

  <span class="comment">// Start sensor</span>
  <span class="keyword">if</span> (!hdc.begin()) {
    Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Couldn't find sensor!</span><span class="delimiter">&quot;</span></span>);
    <span class="keyword">while</span> (<span class="integer">1</span>);
  }}

<span class="directive">void</span> setup_wifi() {
  delay(<span class="integer">10</span>);
  <span class="comment">// We start by connecting to a WiFi network</span>
  Serial.println();
  Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">Connecting to </span><span class="delimiter">&quot;</span></span>);
  Serial.println(wifi_ssid);

  WiFi.begin(wifi_ssid, wifi_password);

  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) {
    delay(<span class="integer">500</span>);
    Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">.</span><span class="delimiter">&quot;</span></span>);
  }

  Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>);
  Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">WiFi connected</span><span class="delimiter">&quot;</span></span>);
  Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">IP address: </span><span class="delimiter">&quot;</span></span>);
  Serial.println(WiFi.localIP());
}

<span class="directive">void</span> reconnect() {
  <span class="comment">// Loop until we're reconnected</span>
  <span class="keyword">while</span> (!client.connected()) {
    Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">Attempting MQTT connection...</span><span class="delimiter">&quot;</span></span>);
    <span class="comment">// Attempt to connect</span>
    <span class="comment">// If you do not want to use a username and password, change next line to</span>
    <span class="comment">// if (client.connect(&quot;ESP8266Client&quot;)) {</span>
    <span class="keyword">if</span> (client.connect(<span class="string"><span class="delimiter">&quot;</span><span class="content">ESP8266Client</span><span class="delimiter">&quot;</span></span>, mqtt_user, mqtt_password)) {
      Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">connected</span><span class="delimiter">&quot;</span></span>);
    } <span class="keyword">else</span> {
      Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">failed, rc=</span><span class="delimiter">&quot;</span></span>);
      Serial.print(client.state());
      Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content"> try again in 5 seconds</span><span class="delimiter">&quot;</span></span>);
      <span class="comment">// Wait 5 seconds before retrying</span>
      delay(<span class="integer">5000</span>);
    }
  }
}

<span class="predefined-type">bool</span> checkBound(<span class="predefined-type">float</span> newValue, <span class="predefined-type">float</span> prevValue, <span class="predefined-type">float</span> maxDiff) {
  <span class="keyword">return</span> newValue &lt; prevValue - maxDiff || newValue &gt; prevValue + maxDiff;
}

<span class="predefined-type">long</span> lastMsg = <span class="integer">0</span>;
<span class="predefined-type">float</span> temp = <span class="float">0</span><span class="float">.0</span>;
<span class="predefined-type">float</span> hum = <span class="float">0</span><span class="float">.0</span>;
<span class="predefined-type">float</span> diff = <span class="float">1</span><span class="float">.0</span>;

<span class="directive">void</span> loop() {
  <span class="keyword">if</span> (!client.connected()) {
    reconnect();
  }
  client.loop();

  <span class="predefined-type">long</span> now = millis();
  <span class="keyword">if</span> (now - lastMsg &gt; <span class="integer">1000</span>) {
    lastMsg = now;

    <span class="predefined-type">float</span> newTemp = hdc.readTemperature();
    <span class="predefined-type">float</span> newHum = hdc.readHumidity();

    <span class="keyword">if</span> (checkBound(newTemp, temp, diff)) {
      temp = newTemp;
      Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">New temperature:</span><span class="delimiter">&quot;</span></span>);
      Serial.println(String(temp).c_str());
      client.publish(temperature_topic, String(temp).c_str(), <span class="predefined-constant">true</span>);
    }

    <span class="keyword">if</span> (checkBound(newHum, hum, diff)) {
      hum = newHum;
      Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">New humidity:</span><span class="delimiter">&quot;</span></span>);
      Serial.println(String(hum).c_str());
      client.publish(humidity_topic, String(hum).c_str(), <span class="predefined-constant">true</span>);
    }
  }
}
</pre></td>
</tr></table>
</div>

<h3>Configuring Home Assistant</h3>

<p>The last step is to integrate the sensor values into Home Assistant. This can be done by setting up Home Assistant to connect to the MQTT broker and subscribe to the sensor topics.</p>

<div class="highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
</pre></td>
  <td class="code"><pre><span class="key">mqtt</span>:
  <span class="key">broker</span>: <span class="string"><span class="content">YOUR_MQTT_SERVER_HOST</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">your_username</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">your_password</span></span>

<span class="key">sensor</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
  <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Temperature</span><span class="delimiter">&quot;</span></span>
  <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor/temperature</span><span class="delimiter">&quot;</span></span>
  <span class="key">qos</span>: <span class="string"><span class="content">0</span></span>
  <span class="key">unit_of_measurement</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ºC</span><span class="delimiter">&quot;</span></span>

<span class="key">sensor 2</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
  <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Humidity</span><span class="delimiter">&quot;</span></span>
  <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor/humidity</span><span class="delimiter">&quot;</span></span>
  <span class="key">qos</span>: <span class="string"><span class="content">0</span></span>
  <span class="key">unit_of_measurement</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">%</span><span class="delimiter">&quot;</span></span>
</pre></td>
</tr></table>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.7.5: Blinkstick, SNMP, Telegram]]></title>
    <link href="https://home-assistant.io/blog/2015/10/11/rfxtrx-blinkstick-and-snmp-support/"/>
    <updated>2015-10-11T10:10:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/10/11/rfxtrx-blinkstick-and-snmp-support</id>
    <content type="html"><![CDATA[<p>We discovered two issues annoying enough to warrent the release of 0.7.5:</p>

<ul>
  <li>Home Assistant package did not include the CloudMQTT certificate.</li>
  <li>A bug in the core caused issues when some platforms are loaded twice.</li>
</ul>

<p>This release also includes some new platforms (because they keep coming!):</p>

<p><img src="https://home-assistant.io/images/supported_brands/blinkstick.png" style="border:none; box-shadow: none; float: right;" height="50" /><img src="https://home-assistant.io/images/supported_brands/rfxtrx.png" style="border:none; box-shadow: none; float: right; clear: right;" height="50" /><img src="https://home-assistant.io/images/supported_brands/telegram.png" style="border:none; box-shadow: none; float: right; clear: right;" height="50" /></p>

<ul>
  <li>Light: <a href="https://home-assistant.io/components/light.blinksticklight/">blinkstick platform</a> added (<a href="https://github.com/alanbowman">@alanbowman</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.snmp/">SNMP platform</a> added (<a href="https://github.com/tomduijf">@tomduijf</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.rfxtrx/">rfxtrx platform</a> added (<a href="https://github.com/badele">@badele</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.rfxtrx/">rfxtrx platform</a> added (<a href="https://github.com/badele">@badele</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.telegram/">telegram platform</a> added (<a href="https://github.com/fabaff">@fabaff</a>)</li>
</ul>

<p>Also, the media player was extended by <a href="https://github.com/maddox">@maddox</a> to support the play media command. This has been implemented for the <a href="https://home-assistant.io/components/media_player.itunes/">iTunes platform</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Home Assistant goes geo with OwnTracks]]></title>
    <link href="https://home-assistant.io/blog/2015/10/05/home-assistant-goes-geo-with-owntracks/"/>
    <updated>2015-10-05T21:49:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/10/05/home-assistant-goes-geo-with-owntracks</id>
    <content type="html"><![CDATA[<p>A few weeks have past and it is time again for another release: version 0.7.4. This time we’re very glad to be able to introduce brand new integration with OwnTracks to allow tracking of people on a map. The geo support consists of three different parts:</p>

<ul>
  <li><a href="https://home-assistant.io/components/device_tracker.owntracks/">OwnTracks platform for the device tracker</a> to get locations for devices</li>
  <li>Brand new <a href="https://home-assistant.io/components/zone/">zone component</a> to define zones to identify locations and <a href="https://home-assistant.io/components/automation/#zone-trigger/">trigger automation</a></li>
  <li>A map in the UI to see all this (<a href="https://home-assistant.io/demo/">see it in action in the demo</a>)</li>
</ul>

<p>We have added a new <a href="https://home-assistant.io/getting-started/presence-detection/">getting started section</a> to get up and running.</p>

<p class="img">
<img src="https://home-assistant.io/images/screenshots/map.png" />
Map in Home Assistant showing two people and three zones (home, school, work)
</p>

<p>Ofcourse more things happened in the last three weeks. I’m moving away from my usual long post to a short summary of highlights:</p>

<p><a href="https://home-assistant.io/components/media_player.plex/">
<img src="https://home-assistant.io/images/supported_brands/plex.png" style="border:none; box-shadow: none; float: right;" height="50" />
</a></p>

<ul>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.rest/">rest platform</a> added (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>Alarm Control Panel: <a href="https://home-assistant.io/components/alarm_control_panel.mqtt/">MQTT platform</a> added (<a href="https://github.com/sfam">@sfam</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.plex/">Plex platform</a> added (<a href="https://github.com/miniconfig, [@adrienbrault](https://github.com/adrienbrault)">@miniconfig</a></li>
  <li>Dev Tools: services can now show description of fields (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>MQTT: Support for certificates and improved error reporting (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.limitlessled/">limitlessled platform</a> extended with white light support (<a href="https://github.com/auchter">@auchter</a>)</li>
  <li>Fuzzy matching for scenes (<a href="https://github.com/pavoni">@pavoni</a>)</li>
  <li>Scene support for media player (<a href="https://github.com/maddox">@maddox</a>)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alarms, Sonos and iTunes now supported]]></title>
    <link href="https://home-assistant.io/blog/2015/09/19/alarm-sonos-and-itunes-support/"/>
    <updated>2015-09-19T21:47:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/09/19/alarm-sonos-and-itunes-support</id>
    <content type="html"><![CDATA[<p>It’s like someone opened a can of rock solid developers and emptied it above our <a href="https://gitter.im/balloob/home-assistant">chat channel</a> because it exploded with great conversations and solid contributions. Featured in release 0.7.3: Sonos, iTunes, Alarm component and Automation upgrade.</p>

<p>See <a href="https://github.com/balloob/home-assistant/releases/tag/0.7.3">GitHub</a> for more detailed release notes.</p>

<p><em>Migration note: the <code>scheduler</code> component has been removed in favor of the <code>automation</code> component.</em></p>

<p><strong>Sonos</strong><br />
<img src="https://home-assistant.io/images/supported_brands/sonos.png" style="border:none; box-shadow: none; float: right;" height="50" /> Sonos support has been added by <a href="https://github.com/rhooper">@rhooper</a> and <a href="https://github.com/SEJeff">@SEJeff</a>. Home Assistant is now able to automatically detect Sonos devices in your network and set them up for you. It will allow you to control music playing on your Sonos and change the volume.</p>

<p><strong>iTunes and airplay speakers</strong><br />
<img src="https://home-assistant.io/images/supported_brands/itunes.png" style="border:none; box-shadow: none; float: right;" height="50" /> <a href="https://github.com/maddox">@maddox</a> has contributed support for controlling iTunes and airplay speakers. For this to work you will have to run <a href="https://github.com/maddox/itunes-api">itunes-api</a> on your Mac as middleware.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">media_player</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">itunes</span></span>
  <span class="key">name</span>: <span class="string"><span class="content">iTunes</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">http://192.168.1.50</span></span>
  <span class="key">port</span>: <span class="string"><span class="content">8181</span></span>
</pre></div>
</div>
</div>

<!--more-->

<p><strong>Automation</strong><br />
Automation has gotten a lot of love. It now supports conditions, multiple triggers and new types of triggers. The best to get started with it is to head over to the new <a href="https://home-assistant.io/getting-started/automation/">getting started with automation</a> page.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example of entry in configuration.yaml</span>
<span class="key">automation</span>:
  <span class="key">alias</span>: <span class="string"><span class="content">Light on in the evening</span></span>
  <span class="key">trigger</span>:
    - <span class="string"><span class="content">platform: sun</span></span>
      <span class="key">event</span>: <span class="string"><span class="content">sunset</span></span>
      <span class="key">offset</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">-01:00:00</span><span class="delimiter">&quot;</span></span>
    - <span class="string"><span class="content">platform: state</span></span>
      <span class="key">entity_id</span>: <span class="string"><span class="content">group.all_devices</span></span>
      <span class="key">state</span>: <span class="string"><span class="content">home</span></span>
  <span class="key">condition</span>:
    - <span class="string"><span class="content">platform: state</span></span>
      <span class="key">entity_id</span>: <span class="string"><span class="content">group.all_devices</span></span>
      <span class="key">state</span>: <span class="string"><span class="content">home</span></span>
    - <span class="string"><span class="content">platform: time</span></span>
      <span class="key">after</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">16:00:00</span><span class="delimiter">&quot;</span></span>
      <span class="key">before</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">23:00:00</span><span class="delimiter">&quot;</span></span>
  <span class="key">action</span>:
    <span class="key">service</span>: <span class="string"><span class="content">homeassistant.turn_on</span></span>
    <span class="key">entity_id</span>: <span class="string"><span class="content">group.living_room</span></span>
</pre></div>
</div>
</div>

<p><strong>Verisure Alarms</strong><br />
<img src="https://home-assistant.io/images/supported_brands/verisure.png" style="border:none; box-shadow: none; float: right;" height="50" /> We now support arming and disarming your verisure alarm from within Home Assistant thanks to added support by <a href="https://github.com/persandstrom">@persandstrom</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Monitoring with Glances]]></title>
    <link href="https://home-assistant.io/blog/2015/09/18/monitoring-with-glances-and-home-assistant/"/>
    <updated>2015-09-18T02:00:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/09/18/monitoring-with-glances-and-home-assistant</id>
    <content type="html"><![CDATA[<p><img src="https://home-assistant.io/images/supported_brands/glances.png" style="border:none; box-shadow: none; float: right;" height="80" /><br />
Inspried by a <a href="https://github.com/balloob/home-assistant/issues/310">feature requests</a> I started looking into the available options to do monitoring of remote hosts. The feature request is about displaying system information in a similar way than the <a href="https://home-assistant.io/components/sensor.systemmonitor/">systemmonitor</a> sensor does it for the local system. After a while I started to think that it would be a nice addition for a small home network where no full-blown system monitoring setup is present.</p>

<!--more-->

<p>The basic problem is to get the data from the remote host. Starting with <a href="https://pypi.python.org/pypi/psutil">psutil</a> that is used by the systemmonitor sensor, a possible solution is only a click away and named <a href="https://github.com/nicolargo/glances">Glances</a>. Glances has a nice curses-based interface and a <a href="https://github.com/nicolargo/glances/wiki/The-Glances-RESTFULL-JSON-API">RESTful API</a>.</p>

<p>The <a href="https://home-assistant.io/components/sensor.glances/">Glances sensor</a> sensor uses that API to get all needed data.</p>

<p>In this post a default Fedora 22 Workstation installation is used on the host that should be monitored. In fact, it doesn’t matter if the system is the local one or a remote one as long as Glances is available. With some adjustments it should work on your own systems too. The difference will be the package and the firewall management tools.</p>

<p>First some extra packages are needed beside Glances, especially the <a href="http://bottlepy.org/docs/dev/index.html">bottle</a> webserver. I guess that Glances is available for your distribution as well. Otherwise follow those <a href="https://github.com/nicolargo/glances#installation">instructions</a>.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ sudo dnf -y install glances python-bottle
</pre></div>
</div>
</div>

<p>On Fedora the Firewall settings are strict. Let’s open port 61208 to allow other hosts to connect to that port. This is not needed if you just want to observe your local machine.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ sudo firewall-cmd --permanent --add-port=61208/tcp
$ sudo firewall-cmd --reload
</pre></div>
</div>
</div>

<p>Launch <code>glances</code> and keep an eye on the output.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ glances -w
Glances web server started on http://0.0.0.0:61208/
</pre></div>
</div>
</div>

<p>Now browse to http://IP_ADRRESS:61208/. You should see the webified view of Glances.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-glances/web-glances.png" />
  Glances web interface
</p>

<p>Another check is to access the API located at http://IP_ADRRESS:61208/api/2/mem/used and to confirm that a detail about your memory usage is provided as a JSON response. If so, you are good to proceed.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ curl -X GET http://IP_ADDRESS:61208/api/2/mem/used
{&quot;used&quot;: 203943936}
</pre></div>
</div>
</div>

<p>Add the <a href="https://home-assistant.io/components/sensor.glances/">glances sensor</a> entry to your <code>configuration.yaml</code> file and restart Home Assistant then.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
  - <span class="string"><span class="content">platform: glances</span></span>
    <span class="key">name</span>: <span class="string"><span class="content">NAS</span></span>
    <span class="key">host</span>: <span class="string"><span class="content">IP_ADDRESS</span></span>
    <span class="key">resources</span>:
      - <span class="string"><span class="content">'disk_use_percent'</span></span>
      - <span class="string"><span class="content">'disk_use'</span></span>
      - <span class="string"><span class="content">'disk_free'</span></span>
</pre></div>
</div>
</div>

<p>If there are no error in the log file then you should see your new sensors.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-glances/sensors.png" />
  The Glances sensors
</p>

<p><a href="https://github.com/nicolargo/glances">Glances</a> has a couple of optional dependencies which are extenting the range of provided information. This means that it would be possible to get details about the RAID system, HDD temperature, IP addresses, sensors, etc., please create a <a href="https://github.com/balloob/home-assistant/pulls">Pull request</a> with your additions or a <a href="https://github.com/balloob/home-assistant/issues/new">Feature request</a> if you want see more details in your Home Assistant frontend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Home Assistant meets IFTTT]]></title>
    <link href="https://home-assistant.io/blog/2015/09/13/home-assistant-meets-ifttt/"/>
    <updated>2015-09-13T09:28:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/09/13/home-assistant-meets-ifttt</id>
    <content type="html"><![CDATA[<p>Today we announce the release of Home Assistant v0.7.2 which includes brand new support by <a href="https://github.com/sfam">@sfam</a> to integrate with <a href="https://ifttt.com">IFTTT</a>. IFTTT stands for If This, Then That and is a webservice that integrates with almost every possible webservice out there. Adding Home Assistant to this mix means Home Assistant can connect with all via IFTTT.</p>

<p>It is now possible to disable your irregation system if it is going to be cloudy tomorrow or tweet if your smoke alarm goes off.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-ifttt/splash.png" />
</p>

<p>Head over to the <a href="https://home-assistant.io/components/ifttt/">setup instructions</a> to get started with IFTTT. Click the read more button for some example recipes.</p>

<!--more-->

<p>In each of the following examples, make sure to replace the XXX in the url with your correct host address and api password.</p>

<h2><a class="title-link" name="turn-off-irregation-system-when-not-needed" href="#turn-off-irregation-system-when-not-needed"></a> Turn off irregation system when not needed</h2>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-ifttt/recipe-weather.png" />
</p>

<p>Maker channel setup:</p>

<table>
  <thead>
    <tr>
      <th>Field</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>URL</td>
      <td>http://xxx.xxx.xxx.xxx:8123/api/services/switch/turn_off?api_password=xxxxxxxx</td>
    </tr>
    <tr>
      <td>METHOD</td>
      <td>POST</td>
    </tr>
    <tr>
      <td>CONTENT TYPE</td>
      <td>application/json</td>
    </tr>
    <tr>
      <td>BODY</td>
      <td>{ “entity_id”: “switch.irrigation” }</td>
    </tr>
  </tbody>
</table>

<h2><a class="title-link" name="tweet-when-important-events-happen" href="#tweet-when-important-events-happen"></a> Tweet when important events happen</h2>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-ifttt/recipe-twitter.png" />
</p>

<p>This will tweet a message when an MQTT message is received that the smoke alarm has been triggered. Setup Maker channel with event name <code>HA_FIRE_ALARM</code> and Twitter channel to tweet the message in <code>value1</code>.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Configuration.yaml entry</span>
<span class="key">automation</span>:
- <span class="string"><span class="content">alias: Post a tweet when fire alarm is triggered</span></span>
  <span class="key">trigger</span>:
    <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
    <span class="key">mqtt_topic</span>: <span class="string"><span class="content">home/alarm/fire</span></span>
    <span class="key">mqtt_payload</span>: <span class="string"><span class="content">'on'</span></span>

  <span class="key">action</span>:
    <span class="key">service</span>: <span class="string"><span class="content">ifttt.trigger</span></span>
    <span class="key">data</span>: <span class="string"><span class="content">{&quot;event&quot;:&quot;HA_FIRE_ALARM&quot;, &quot;value1&quot;:&quot;The fire alarm just triggered!&quot;}</span></span>
</pre></div>
</div>
</div>

<h2><a class="title-link" name="turn-on-lights-when-i-get-home" href="#turn-on-lights-when-i-get-home"></a> Turn on lights when I get home</h2>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-ifttt/recipe-geo.png" />
</p>

<p>Maker channel setup:</p>

<table>
  <thead>
    <tr>
      <th>Field</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>URL</td>
      <td>http://xxx.xxx.xxx.xxx:8123/api/services/light/turn_on?api_password=xxxxxxxx</td>
    </tr>
    <tr>
      <td>METHOD</td>
      <td>POST</td>
    </tr>
    <tr>
      <td>CONTENT TYPE</td>
      <td>application/json</td>
    </tr>
    <tr>
      <td>BODY</td>
      <td>{ “entity_id”: “light.kitchen” }</td>
    </tr>
  </tbody>
</table>

<h2><a class="title-link" name="flash-lights-when-a-new-pr-comes-in-for-home-assistant" href="#flash-lights-when-a-new-pr-comes-in-for-home-assistant"></a> Flash lights when a new PR comes in for Home Assistant</h2>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-ifttt/recipe-github.png" />
</p>

<p>Maker channel setup:</p>

<table>
  <thead>
    <tr>
      <th>Field</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>URL</td>
      <td>http://xxx.xxx.xxx.xxx:8123/api/services/light/turn_on?api_password=xxxxxxxx</td>
    </tr>
    <tr>
      <td>METHOD</td>
      <td>POST</td>
    </tr>
    <tr>
      <td>CONTENT TYPE</td>
      <td>application/json</td>
    </tr>
    <tr>
      <td>BODY</td>
      <td>{ “entity_id”: “group.all_lights”, “flash”:”yes” }</td>
    </tr>
  </tbody>
</table>

<h2><a class="title-link" name="fire-events-when-pressing-the-do-button" href="#fire-events-when-pressing-the-do-button"></a> Fire events when pressing the DO button</h2>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-ifttt/recipe-do.png" />
</p>

<p>Maker channel setup:</p>

<table>
  <thead>
    <tr>
      <th>Field</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>URL</td>
      <td>http://xxx.xxx.xxx.xxx:8123/api/events/do_button_pressed?api_password=xxxxxxxx</td>
    </tr>
    <tr>
      <td>METHOD</td>
      <td>POST</td>
    </tr>
    <tr>
      <td>CONTENT TYPE</td>
      <td>application/json</td>
    </tr>
  </tbody>
</table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MQTT with Home Assistant]]></title>
    <link href="https://home-assistant.io/blog/2015/09/11/different-ways-to-use-mqtt-with-home-assistant/"/>
    <updated>2015-09-11T02:19:38-07:00</updated>
    <id>https://home-assistant.io/blog/2015/09/11/different-ways-to-use-mqtt-with-home-assistant</id>
    <content type="html"><![CDATA[
<p><img src="https://home-assistant.io/images/supported_brands/mqtt.png" style="border:none; box-shadow: none; float: right;" height="80" /> <a href="https://en.wikipedia.org/wiki/MQTT">MQTT</a> support was added to Home Assistant recently. The <a href="https://home-assistant.io/components/mqtt/">MQTT component</a> will enable you to do all sort of things. Most likely you will use it to communicate with your devices. But Home Assistant doesn’t care where the data is coming from or is limited to real hardware as long as there is MQTT support. This means that it doesn’t matter if the data is coming from a human, a web service, or a device.</p>

<p>A great example is shown in a <a href="https://home-assistant.io/blog/2015/08/26/laundry-automation-with-moteino-mqtt-and-home-assistant/">Laundry Automation</a> post in this blog.</p>

<p>This post will give you a small overview of some other possibilities on how to use MQTT with Home Assistant.</p>

<!--more-->

<h3><a class="title-link" name="manual-usage" href="#manual-usage"></a> Manual usage</h3>

<p>The simplest but not the coolest way as a human to interact with a Home Assistant sensor is launching a command manually. Let’s create a “Mood” sensor. For simplicity Home Assistant and the MQTT broker are both running on the same host. The needed configuration snipplets to add to the <code>configuration.yaml</code> file consists of two parts: one for the broker and one for the sensor.</p>

<div class="highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre><span class="key">mqtt</span>:
  <span class="key">broker</span>: <span class="string"><span class="content">127.0.0.1</span></span>

<span class="key">sensor</span>:
  - <span class="string"><span class="content">platform: mqtt</span></span>
    <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Fabian's Mood</span><span class="delimiter">&quot;</span></span>
    <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">home-assistant/fabian/mood</span><span class="delimiter">&quot;</span></span>
</pre></td>
</tr></table>
</div>

<p>After a restart of Home Assistant the “Mood” sensor will show up in the frontend. For more details about the configuration of MQTT itself and the sensor, please refer to the <a href="https://home-assistant.io/components/mqtt/">MQTT component</a> or the <a href="https://home-assistant.io/components/sensor.mqtt/">MQTT sensor</a> documentation.</p>

<p>Now we can set the mood. The commandline tool (<code>mosquitto_pub</code>) which is shipped with <code>mosquitto</code> is used to send an MQTT message.</p>

<div class="highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>$ mosquitto_pub  -h 127.0.0.1 -t &quot;home-assistant/fabian/mood&quot; -m &quot;bad&quot;
</pre></td>
</tr></table>
</div>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-mqtt/mood.png" />
  The Mood sensor
</p>

<p>This is a really bad example. Don’t do this in the real world because you won’t be able to create diagrams of historical data. Better use a numerical value.</p>

<h3><a class="title-link" name="python-mqtt-bindings" href="#python-mqtt-bindings"></a> Python MQTT bindings</h3>

<p>The last section was pretty boring, I know. Nobody wants to send MQTT messages by hand if there is a computer on the desk. If you are playing the lottery this section is for you. If not, read it anyway because the lottery is just an example :-).</p>

<p>This example is using the <a href="https://eclipse.org/paho/clients/python/">Paho MQTT Python binding</a> because those binding should be available on the host where Home Assistant is running. If you want to use this example on another machine, please make sure that the bindings are installed (<code>pip3 install paho-mqtt</code>).</p>

<p>The first step is to add an additional MQTT sensor to the <code>configuration.yaml</code> file. The sensor will be called “Lottery” and the unit of measurement will be “No.”.</p>

<div class="highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre>  - <span class="string"><span class="content">platform: mqtt</span></span>
    <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Lottery</span><span class="delimiter">&quot;</span></span>
    <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">home-assistant/lottery/number</span><span class="delimiter">&quot;</span></span>
    <span class="key">unit_of_measurement</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">No.</span><span class="delimiter">&quot;</span></span>
</pre></td>
</tr></table>
</div>

<p>Don’t forget to restart Home Assistant to make the configuration active.</p>

<p>To play, we need numbers from 1 to 49 which can be marked on the ticket. Those numbers should be random and displayed in the Home Assistant frontend. The Python script below is another simple example on how to send MQTT messages from the commandline; this time in a loop. For further information and examples please check the <a href="https://eclipse.org/paho/clients/python/docs/">Paho MQTT</a> documentation.</p>

<div class="highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
</pre></td>
  <td class="code"><pre><span class="comment">#!/usr/bin/python3</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">time</span>
<span class="keyword">import</span> <span class="include">random</span>
<span class="keyword">import</span> <span class="include">paho.mqtt.client</span> <span class="keyword">as</span> mqtt
<span class="keyword">import</span> <span class="include">paho.mqtt.publish</span> <span class="keyword">as</span> publish

broker = <span class="string"><span class="delimiter">'</span><span class="content">127.0.0.1</span><span class="delimiter">'</span></span>
state_topic = <span class="string"><span class="delimiter">'</span><span class="content">home-assistant/lottery/number</span><span class="delimiter">'</span></span>
delay = <span class="integer">5</span>

<span class="comment"># Send a single message to set the mood</span>
publish.single(<span class="string"><span class="delimiter">'</span><span class="content">home-assistant/fabian/mood</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">good</span><span class="delimiter">'</span></span>, hostname=broker)

<span class="comment"># Send messages in a loop</span>
client = mqtt.Client(<span class="string"><span class="delimiter">&quot;</span><span class="content">ha-client</span><span class="delimiter">&quot;</span></span>)
client.connect(broker)
client.loop_start()

<span class="keyword">while</span> <span class="predefined-constant">True</span>:
    client.publish(state_topic, random.randrange(<span class="integer">0</span>, <span class="integer">50</span>, <span class="integer">1</span>))
    time.sleep(delay)
</pre></td>
</tr></table>
</div>

<p>Every 5 seconds a message with a new number is sent to the broker and picked up by Home Assistant. By the way, my mood is much better now.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-mqtt/lottery.png" />
  The Lottery sensor
</p>

<p>With only a few lines of Python and an MQTT broker you can create your own “smartdevice” or send information to Home Assistant which you haven’t think of. Of course this is not limited to Python. If there is an MQTT library available, the device can be used with Home Assistant now.</p>

<h3><a class="title-link" name="arduino" href="#arduino"></a> Arduino</h3>

<p>To get started with real hardware that is capable to send MQTT messages, the Arduino platform is an inexpensive way to do it. In this section an Arduino UNO with an Ethernet shield and a photo resistor is used. The photo resistor is connected to analog pin 0 (A0) and has an output from 0 to 1024.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-mqtt/arduino-shield.png" />
  The Arduino UNO with Ethernet shield and photo resistor
</p>

<p>The <a href="http://knolleary.github.io/pubsubclient/">MQTT client</a> for the Arduino needs to be available in your Arduino IDE. Below you will find a sketch which could act as a starting point. Please modify the IP addresses, the MAC address, and the pin as needed and upload the sketch to your Arduino.</p>

<div class="highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
<a href="#n51" name="n51">51</a>
<a href="#n52" name="n52">52</a>
<a href="#n53" name="n53">53</a>
<a href="#n54" name="n54">54</a>
<a href="#n55" name="n55">55</a>
<a href="#n56" name="n56">56</a>
<a href="#n57" name="n57">57</a>
<a href="#n58" name="n58">58</a>
<a href="#n59" name="n59">59</a>
<strong><a href="#n60" name="n60">60</a></strong>
<a href="#n61" name="n61">61</a>
<a href="#n62" name="n62">62</a>
<a href="#n63" name="n63">63</a>
<a href="#n64" name="n64">64</a>
<a href="#n65" name="n65">65</a>
<a href="#n66" name="n66">66</a>
<a href="#n67" name="n67">67</a>
<a href="#n68" name="n68">68</a>
</pre></td>
  <td class="code"><pre><span class="comment">/*
  This sketch is based on the basic MQTT example by
  http://knolleary.github.io/pubsubclient/
*/</span>

<span class="preprocessor">#include</span> <span class="include">&lt;SPI.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;Ethernet.h&gt;</span>
<span class="preprocessor">#include</span> <span class="include">&lt;PubSubClient.h&gt;</span>

<span class="preprocessor">#define</span> DEBUG <span class="integer">1</span> <span class="comment">// Debug output to serial console</span>

<span class="comment">// Device settings</span>
IPAddress deviceIp(<span class="integer">192</span>, <span class="integer">168</span>, <span class="integer">0</span>, <span class="integer">43</span>);
byte deviceMac[] = { <span class="hex">0xAB</span>, <span class="hex">0xCD</span>, <span class="hex">0xFE</span>, <span class="hex">0xFE</span>, <span class="hex">0xFE</span>, <span class="hex">0xFE</span> };
<span class="predefined-type">char</span>* deviceId  = <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor01</span><span class="delimiter">&quot;</span></span>; <span class="comment">// Name of the sensor</span>
<span class="predefined-type">char</span>* stateTopic = <span class="string"><span class="delimiter">&quot;</span><span class="content">home-assistant/sensor01/brightness</span><span class="delimiter">&quot;</span></span>; <span class="comment">// MQTT topic where values are published</span>
<span class="predefined-type">int</span> sensorPin = A0; <span class="comment">// Pin to which the sensor is connected to</span>
<span class="predefined-type">char</span> buf[<span class="integer">4</span>]; <span class="comment">// Buffer to store the sensor value</span>
<span class="predefined-type">int</span> updateInterval = <span class="integer">1000</span>; <span class="comment">// Interval in miliseconds</span>

<span class="comment">// MQTT server settings</span>
IPAddress mqttServer(<span class="integer">192</span>, <span class="integer">168</span>, <span class="integer">0</span>, <span class="integer">12</span>);
<span class="predefined-type">int</span> mqttPort = <span class="integer">1883</span>;

EthernetClient ethClient;
PubSubClient client(ethClient);

<span class="directive">void</span> reconnect() {
  <span class="keyword">while</span> (!client.connected()) {
<span class="preprocessor">#if</span> DEBUG
    Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">Attempting MQTT connection...</span><span class="delimiter">&quot;</span></span>);
<span class="preprocessor">#endif</span>
    <span class="keyword">if</span> (client.connect(deviceId)) {
<span class="preprocessor">#if</span> DEBUG
      Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">connected</span><span class="delimiter">&quot;</span></span>);
<span class="preprocessor">#endif</span>
    } <span class="keyword">else</span> {
<span class="preprocessor">#if</span> DEBUG
      Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">failed, rc=</span><span class="delimiter">&quot;</span></span>);
      Serial.print(client.state());
      Serial.println(<span class="string"><span class="delimiter">&quot;</span><span class="content"> try again in 5 seconds</span><span class="delimiter">&quot;</span></span>);
<span class="preprocessor">#endif</span>
      delay(<span class="integer">5000</span>);
    }
  }
}

<span class="directive">void</span> setup() {
  Serial.begin(<span class="integer">57600</span>);
  client.setServer(mqttServer, mqttPort);
  Ethernet.begin(deviceMac, deviceIp);
  delay(<span class="integer">1500</span>);
}

<span class="directive">void</span> loop() {
  <span class="keyword">if</span> (!client.connected()) {
    reconnect();
  }
  client.loop();

  <span class="predefined-type">int</span> sensorValue = analogRead(sensorPin);
<span class="preprocessor">#if</span> DEBUG
  Serial.print(<span class="string"><span class="delimiter">&quot;</span><span class="content">Sensor value: </span><span class="delimiter">&quot;</span></span>);
  Serial.println(sensorValue);
<span class="preprocessor">#endif</span>
  client.publish(stateTopic, itoa(sensorValue, buf, <span class="integer">10</span>));
  delay(updateInterval);
}
</pre></td>
</tr></table>
</div>

<p>The Arduino will send the value of the sensor every second. To use the data in Home Assistant, add an additional MQTT sensor to the <code>configuration.yaml</code> file.</p>

<div class="highlighter-coderay"><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre>  - <span class="string"><span class="content">platform: mqtt</span></span>
    <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Brightness</span><span class="delimiter">&quot;</span></span>
    <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">home-assistant/sensor01/brightness</span><span class="delimiter">&quot;</span></span>
    <span class="key">unit_of_measurement</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">cd</span><span class="delimiter">&quot;</span></span>
</pre></td>
</tr></table>
</div>

<p>After a restart of Home Assistant the values of your Arduino will be available.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-09-mqtt/arduino.png" />
  The Brightness sensor
</p>

<p>I hope that this post could give you some ideas about the usage Home Assistant and MQTT. If you are working on a cool project that includes Home Assistant, please let us now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.7: Better UI and improved distribution]]></title>
    <link href="https://home-assistant.io/blog/2015/08/31/version-7-revamped-ui-and-improved-distribution/"/>
    <updated>2015-08-31T14:12:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/08/31/version-7-revamped-ui-and-improved-distribution</id>
    <content type="html"><![CDATA[<p>As Home Assistant is gaining more and more users we started to feel the pain from not having a proper release mechanism. We had no version numbering and required users to checkout the source using Git to get started. On top of that, as the number of devices that we support keeps raising, so did the number of dependencies that are used. That’s why we decided to change the way we roll. From now on:</p>

<ul>
  <li>Each release will have a version number, starting with version 0.7. This was chosen because it shows that we have been around for some time but are not considering ourselves to be fully stable.</li>
  <li>Each release will be pushed to PyPi. This will be the only supported method of distribution.</li>
  <li>Home Assistant is available after installation as a command-line utility <code>hass</code>.</li>
  <li>The default configuration location has been moved from <code>config</code> in the current working directory to <code>~/.homeassistant</code> (<code>%APPDATA%/.homeassistant</code> on Windows).</li>
  <li>Requirements for components and platforms are no longer installed into the current Python environment (being virtual or not) but will be installed in <code>&lt;config-dir&gt;/lib</code>.</li>
</ul>

<p>A huge shout out to <a href="https://github.com/rmkraus">Ryan Kraus</a> for making this all possible. Please make sure you read <a href="https://home-assistant.io/blog/2015/08/31/version-7-revamped-ui-and-improved-distribution/#read-more/">the full blog post</a> for details on how to migrate your existing setup.</p>

<p>And while Ryan was fixing distribution, I have been hard at work in giving Home Assistant a face lift. We already looked pretty good but lacked proper form of organization for users with many devices. The new UI moves away from a card per entity and has cards per group and domain instead. <a href="https://home-assistant.io/demo/">The demo</a> has been updated so give it a spin.</p>

<p class="img">
  <a href="https://home-assistant.io/demo/">
    <img src="https://home-assistant.io/images/screenshots/ui2015.png" />
  </a>
  Screenshots of the new UI
</p>

<!--more-->

<h3><a class="title-link" name="migration-to-version-07" href="#migration-to-version-07"></a> Migration to version 0.7</h3>

<p>For this example, let’s say we have an old Home Assistant installation in <code>/home/paulus/home-assistant</code>.</p>

<p>If you want to migrate your existing configuration to be used as the default configuration:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ cp -r /home/paulus/home-assistant ~/.homeassistant
</pre></div>
</div>
</div>

<p>It If you want to have the configuration in a different location, for example <code>/home/paulus/home-assistant-config</code>, you will have to point Home Assistant at this configuration folder when launching:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ hass --config /home/paulus/home-assistant-config
</pre></div>
</div>
</div>

<h3><a class="title-link" name="new-platforms" href="#new-platforms"></a> New platforms</h3>

<p>And last, but not least: new platforms!</p>

<p><strong>MQTT Sensors and Switches</strong><br />
<img src="https://home-assistant.io/images/supported_brands/mqtt.png" style="border:none; box-shadow: none; float: right;" height="50" /> <a href="https://github.com/sfam">@sfam</a> has blessed us with two more MQTT platforms to extend our integration with MQTTT: <a href="https://home-assistant.io/components/sensor.mqtt/">sensor</a> and <a href="https://home-assistant.io/components/switch.mqtt/">switch</a>. Both platforms require the MQTT component to be connected to a broker.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yml entr</span>
<span class="key">sensor</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
  <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">MQTT Sensor</span><span class="delimiter">&quot;</span></span>
  <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">home/bedroom/temperature</span><span class="delimiter">&quot;</span></span>
  <span class="key">unit_of_measurement</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ºC</span><span class="delimiter">&quot;</span></span>

<span class="key">switch</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
  <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Bedroom Switch</span><span class="delimiter">&quot;</span></span>
  <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">home/bedroom/switch1</span><span class="delimiter">&quot;</span></span>
  <span class="key">command_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">home/bedroom/switch1/set</span><span class="delimiter">&quot;</span></span>
  <span class="key">payload_on</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ON</span><span class="delimiter">&quot;</span></span>
  <span class="key">payload_off</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">OFF</span><span class="delimiter">&quot;</span></span>
  <span class="key">optimistic</span>: <span class="string"><span class="content">false</span></span>
</pre></div>
</div>
</div>

<p><strong>Actiontec MI424WR Verizon FIOS Wireless router</strong><br />
<img src="https://home-assistant.io/images/supported_brands/actiontec.png" style="border:none; box-shadow: none; float: right;" height="50" /> <a href="https://github.com/nkgilley">Nolan</a> has contributed support for Actiontec wireless routers.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">device_tracker</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">actiontec</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">YOUR_ROUTER_IP</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">YOUR_ADMIN_USERNAME</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">YOUR_ADMIN_PASSWORD</span></span>
</pre></div>
</div>
</div>

<p><strong>DHT temperature and humidty sensors</strong><br />
<a href="https://github.com/makemeasandwich">@MakeMeASandwich</a> has contributed support for DHT temperature and humidity sensors. It allows you to get the current temperature and humidity from a DHT11, DHT22, or AM2302 device.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">sensor</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">dht</span></span>
  <span class="key">sensor</span>: <span class="string"><span class="content">DHT22</span></span>
  <span class="key">pin</span>: <span class="string"><span class="content">23</span></span>
  <span class="key">monitored_conditions</span>:
    - <span class="string"><span class="content">temperature</span></span>
    - <span class="string"><span class="content">humidity</span></span>
</pre></div>
</div>
</div>

<p><strong>Aruba device tracker</strong><br />
<a href="https://github.com/michaelarnauts">Michael Arnauts</a> has contributed support for Aruba wireless routers for presence detection.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">device_tracker</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">aruba</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">YOUR_ACCESS_POINT_IP</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">YOUR_ADMIN_USERNAME</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">YOUR_ADMIN_PASSWORD</span></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laundry Automation: insight and notifications]]></title>
    <link href="https://home-assistant.io/blog/2015/08/26/laundry-automation-with-moteino-mqtt-and-home-assistant/"/>
    <updated>2015-08-26T08:12:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/08/26/laundry-automation-with-moteino-mqtt-and-home-assistant</id>
    <content type="html"><![CDATA[<p><em>This is a guest post by Home Assistant user and contributor <a href="https://github.com/nkgilley">Nolan Gilley</a>.</em></p>

<p>In our house, laundry has been a struggle for quite some time.  Our washer and dryer both lack a buzzer which leads to forgotten laundry, and stinky mess that needs to be rewashed.  I decided to create a solution by monitoring the washer and dryer myself with some cheap electronics.</p>

<p>As an avid user of Home Assistant, I decided it would be the perfect application to manage the UI and notification system.  Now all I needed was a way to monitor the washer and dryer.  I tried using sound sensors but found them unreliable.  I ended up opting for an accelerometer attached to the back of each appliance.  I also added magnetic reed switches on the doors of the washer and dryer to detect if the doors are open or closed.  I connected the accelerometers and reed switches to a <a href="https://lowpowerlab.com/moteino/">Moteino</a>, an arduino clone with an RF transceiver.  The Moteino can perform the logic to figure out which state the appliances are in and wirelessly communicate that data with another Moteino that is connected via serial to my Raspberry Pi.  The Raspberry Pi reads the serial data and repeats it over MQTT for Home Assistant to use.  This is great because I don’t have to run Home Assistant on the Raspberry Pi.  I can run it on a faster machine and point the <a href="https://home-assistant.io/components/mqtt/">MQTT component</a> to my Raspberry Pi.</p>

<p>After taking some sample data from the accelerometers while each appliance was in operation, I decided to plot the data to help determine the proper thresholds of when the devices were running or off.  I had to do this in order to get precise ranges so the dryer sensor wouldn’t get tripped by the washer or vice versa.  In the plot below you can see the acceleration in the x direction for the accelerometer connected to the washing machine.   It’s easy to see when the washing machine is in operation here.  I used the same technique for the dryer’s accelerometer.</p>

<p class="img">
  <a href="https://home-assistant.io/images/blog/2015-08-laundry-automation/data-graph.png">
    <img src="https://home-assistant.io/images/blog/2015-08-laundry-automation/data-graph.png" />
  </a>
  Graph showing the accelerometer data
</p>

<!--more-->

<p>Next it was just a matter of integrating everything with Home Assistant.  I was able to use the <a href="https://home-assistant.io/components/mqtt/">MQTT component</a> to read the washer and dryer states from the Moteino and display it in Home Assistant.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2015-08-laundry-automation/screenshot-ha.png" />
  Status of the dryer and washer in Home Assistant
</p>

<p>Next I wrote <a href="https://home-assistant.io/components/script/">scripts</a> that are run whenever the washer or dryer completes a load.  This is triggered by the <a href="https://home-assistant.io/components/automation/">automation component</a>.  When the laundry is complete I have the lights in the house turn red and <a href="https://home-assistant.io/components/notify.pushbullet/">notify me via PushBullet</a>.  Once the laundry is taken care of another script runs that sets the lights back to normal.  So far it has been very helpful and very reliable.</p>

<p class="img">
  <a href="https://home-assistant.io/images/blog/2015-08-laundry-automation/moteino-and-sensors.jpg">
    <img src="https://home-assistant.io/images/blog/2015-08-laundry-automation/moteino-and-sensors.jpg" />
  </a>
  Top left: reed switch. Bottom left: moteino. Right: Accelerometer.
</p>

<p>Materials used:</p>

<ul>
  <li><a href="https://lowpowerlab.com/moteino/">Moteino</a></li>
  <li><a href="http://www.amazon.com/gp/product/B008BOPN40">2 x Accelerometers</a></li>
  <li><a href="http://www.amazon.com/gp/product/B004PARDRO">2 x Reed switch</a></li>
  <li><a href="https://home-assistant.io/">Home Assistant</a></li>
</ul>

<p><a href="https://codebender.cc/sketch:144743">Sketch for the Moteino is available here.</a></p>

<p>Home Assistant Configuration:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">mqtt</span>:
  <span class="key">broker</span>: <span class="string"><span class="content">192.168.1.100</span></span>
  <span class="key">port</span>: <span class="string"><span class="content">1883</span></span>
  <span class="key">keepalive</span>: <span class="string"><span class="content">60</span></span>
  <span class="key">qos</span>: <span class="string"><span class="content">0</span></span>

<span class="key">sensor</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
  <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Dryer Status</span><span class="delimiter">&quot;</span></span>
  <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor/dryer</span><span class="delimiter">&quot;</span></span>
  <span class="key">unit_of_measurement</span>: <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>

<span class="key">sensor 2</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
  <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Washer Status</span><span class="delimiter">&quot;</span></span>
  <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">sensor/washer</span><span class="delimiter">&quot;</span></span>
  <span class="key">unit_of_measurement</span>: <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>

<span class="key">automation</span>:
  <span class="key">alias</span>: <span class="string"><span class="content">Dryer complete</span></span>

  <span class="key">platform</span>: <span class="string"><span class="content">state</span></span>
  <span class="key">state_entity_id</span>: <span class="string"><span class="content">sensor.dryer_status</span></span>
  <span class="key">state_from</span>: <span class="string"><span class="content">'Running'</span></span>
  <span class="key">state_to</span>: <span class="string"><span class="content">'Complete'</span></span>

  <span class="key">execute_service</span>: <span class="string"><span class="content">script.turn_on</span></span>
  <span class="key">service_entity_id</span>: <span class="string"><span class="content">script.dryer_complete</span></span>

<span class="key">automation 2</span>:
  <span class="key">alias</span>: <span class="string"><span class="content">Dryer emptied</span></span>

  <span class="key">platform</span>: <span class="string"><span class="content">state</span></span>
  <span class="key">state_entity_id</span>: <span class="string"><span class="content">sensor.dryer_status</span></span>
  <span class="key">state_from</span>: <span class="string"><span class="content">'Complete'</span></span>
  <span class="key">state_to</span>: <span class="string"><span class="content">'Empty'</span></span>

  <span class="key">execute_service</span>: <span class="string"><span class="content">script.turn_on</span></span>
  <span class="key">service_entity_id</span>: <span class="string"><span class="content">script.dryer_cleared</span></span>

<span class="key">script</span>:
  <span class="key">dryer_complete</span>:
    <span class="key">alias</span>: <span class="string"><span class="content">Dryer Complete Script</span></span>
    <span class="key">sequence</span>:
      - <span class="string"><span class="content">alias: Pushbullet Notification</span></span>
        <span class="key">execute_service</span>: <span class="string"><span class="content">notify.notify</span></span>
        <span class="key">service_data</span>:
          <span class="key">message</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">The dryer has finished its cycle, please empty it!</span><span class="delimiter">&quot;</span></span>
      - <span class="string"><span class="content">alias: Living Room Lights Red</span></span>
        <span class="key">execute_service</span>: <span class="string"><span class="content">scene.turn_on</span></span>
        <span class="key">service_data</span>:
          <span class="key">entity_id</span>: <span class="string"><span class="content">scene.red</span></span>
      - <span class="string"><span class="content">delay:</span><span class="content">
          seconds: 1</span></span>
      - <span class="string"><span class="content">alias: Living Room Lights Off</span></span>
        <span class="key">execute_service</span>: <span class="string"><span class="content">light.turn_off</span></span>
        <span class="key">service_data</span>:
          <span class="key">entity_id</span>: <span class="string"><span class="content">group.living_room</span></span>
      - <span class="string"><span class="content">delay:</span><span class="content">
          seconds: 1</span></span>
      - <span class="string"><span class="content">alias: Living Room Lights Red</span></span>
        <span class="key">execute_service</span>: <span class="string"><span class="content">scene.turn_on</span></span>
        <span class="key">service_data</span>:
          <span class="key">entity_id</span>: <span class="string"><span class="content">scene.red</span></span>

  <span class="key">dryer_cleared</span>:
    <span class="key">alias</span>: <span class="string"><span class="content">Dryer Cleared Script</span></span>
    <span class="key">sequence</span>:
      - <span class="string"><span class="content">alias: Living Room Lights Off</span></span>
        <span class="key">execute_service</span>: <span class="string"><span class="content">light.turn_off</span></span>
        <span class="key">service_data</span>:
          <span class="key">entity_id</span>: <span class="string"><span class="content">group.living_room</span></span>
      - <span class="string"><span class="content">delay:</span><span class="content">
          seconds: 1</span></span>
      - <span class="string"><span class="content">alias: Living Room Lights Normal</span></span>
        <span class="key">execute_service</span>: <span class="string"><span class="content">scene.turn_on</span></span>
        <span class="key">service_data</span>:
          <span class="key">entity_id</span>: <span class="string"><span class="content">scene.normal</span></span>
</pre></div>
</div>
</div>

<p>Resources used:</p>

<ul>
  <li><a href="http://www.instructables.com/id/Uber-Home-Automation-w-Arduino-Pi/step13/Washer-Dryer-Smartifier-Water-Leak-Sensor/">Inspiration and Help with Arduino code</a></li>
  <li><a href="https://github.com/LowPowerLab/RFM69/">Moteino Code</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verisure devices and modern TP-Link routers now supported]]></title>
    <link href="https://home-assistant.io/blog/2015/08/17/verisure-and-modern-tp-link-router-support/"/>
    <updated>2015-08-17T20:00:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/08/17/verisure-and-modern-tp-link-router-support</id>
    <content type="html"><![CDATA[<p>A minor bug fix release to fix some issues that have come up since the last release. Please upgrade as soon as possible by running <code>git pull</code> from the Home Assistant directory.</p>

<p>This release is a major milestone in our test coverage as we’ve crossed into the 80s! It has to be noted that this covers mainly the core and automation components. Platforms that communicate with IoT devices have been excluded.</p>

<p>As we didn’t want to just push out bug fixes, this release includes a few additions:</p>

<ul>
  <li>Support for modern TP-Link routers like the ArcherC9 line has been contributed by <a href="https://github.com/chrisvis">@chrisvis</a>.</li>
  <li>Improved support for MQTT topic subscriptions has been contributed by <a href="https://github.com/qrtn">@qrtn</a></li>
</ul>

<p><strong>Verisure Support</strong><br />
<img src="https://home-assistant.io/images/supported_brands/verisure.png" style="border:none; box-shadow: none; float: right;" height="50" /> Home Assistant support to integrate your <a href="https://www.verisure.com/">Verisure</a> alarms, hygrometers, sensors and thermometers has been contributed by <a href="https://github.com/persandstrom">@persandstrom</a>.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">verisure</span>:
  <span class="key">username</span>: <span class="string"><span class="content">user@example.com</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">password</span></span>
  <span class="key">alarm</span>: <span class="string"><span class="content">1</span></span>
  <span class="key">hygrometers</span>: <span class="string"><span class="content">0</span></span>
  <span class="key">smartplugs</span>: <span class="string"><span class="content">1</span></span>
  <span class="key">thermometers</span>: <span class="string"><span class="content">0</span></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MQTT, Rasperry PI, Logitech Squeezebox and ASUSWRT routers now supported]]></title>
    <link href="https://home-assistant.io/blog/2015/08/09/mqtt-raspberry-pi-squeezebox-asuswrt-support/"/>
    <updated>2015-08-09T18:01:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/08/09/mqtt-raspberry-pi-squeezebox-asuswrt-support</id>
    <content type="html"><![CDATA[<p>It’s time for the August release and there is some serious good stuff this time. The core of Home Assistant has gone some serious clean up and a bump in test coverage thanks to <a href="https://github.com/balloob">@balloob</a>. If you’re a developer, make sure you read up on <a href="https://github.com/balloob/home-assistant/pull/251">the deprecation notices</a>. <a href="https://github.com/fabaff">@fabaff</a> did another great round of documentating all the various components.</p>

<p><strong>MQTT Support</strong><br />
<img src="https://home-assistant.io/images/supported_brands/mqtt.png" style="border:none; box-shadow: none; float: right;" height="50" /> The big new addition in this release is the support for the MQTT protocol by <a href="https://github.com/fabaff">@fabaff</a> with some help from <a href="https://github.com/balloob">@balloob</a>. It will now be possible to integrate any IoT device that talks via MQTT. For the initial release we support connecting Home Assistant to a broker (no TLS yet). Components can now subscribe and publish to MQTT topics (<a href="https://github.com/balloob/home-assistant/blob/dev/config/custom_components/mqtt_example.py">see the example</a>) and also support for the automation component <a href="https://home-assistant.io/components/automation/#mqtt-based-automation/">has been added</a>. For more information, see <a href="https://home-assistant.io/components/mqtt/">the MQTT component page</a>.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">mqtt</span>:
  <span class="key">broker</span>: <span class="string"><span class="content">IP_ADDRESS_BROKER</span></span>
  <span class="comment"># All the other options are optional:</span>
  <span class="key">port</span>: <span class="string"><span class="content">1883</span></span>
  <span class="key">keepalive</span>: <span class="string"><span class="content">60</span></span>
  <span class="key">qos</span>: <span class="string"><span class="content">0</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">your_username</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">your_secret_password</span></span>
</pre></div>
</div>
</div>

<!--more-->

<p><strong>Raspberry PI GPIO Support</strong><br />
<img src="https://home-assistant.io/images/supported_brands/raspberry-pi.png" style="border:none; box-shadow: none; float: right;" height="50" /> <a href="https://github.com/gbarba">@gbarba</a> has contributed support to use the general purpose input and output pins on a Raspberry PI as switches inside Home Assistant.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">switch</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">rpi_gpio</span></span>
  <span class="key">ports</span>:
    <span class="key">11</span>: <span class="string"><span class="content">Fan Office</span></span>
    <span class="key">12</span>: <span class="string"><span class="content">Light Desk</span></span>
</pre></div>
</div>
</div>

<p><strong>ASUSWRT based routers</strong><br />
<img src="https://home-assistant.io/images/supported_brands/asus.png" style="border:none; box-shadow: none; float: right;" height="50" /> <a href="https://github.com/persandstrom">@persandstrom</a> has contributed support to do prescence detection using ASUSWRT based routers.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">device_tracker</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">asuswrt</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">YOUR_ROUTER_IP</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">YOUR_ADMIN_USERNAME</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">YOUR_ADMIN_PASSWORD</span></span>
</pre></div>
</div>
</div>

<p><strong>Logitech Squeezebox media player support</strong><br />
<img src="https://home-assistant.io/images/supported_brands/logitech.png" style="border:none; box-shadow: none; float: right;" height="50" /> <a href="https://github.com/persandstrom">@persandstrom</a> also contributed support for the Logitech Squeezebox media player. This allows you to control your Logitech Squeezebox from Home Assistant.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">media_player</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">squeezebox</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">192.168.1.21</span></span>
  <span class="key">port</span>: <span class="string"><span class="content">9090</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">user</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">password</span></span>
</pre></div>
</div>
</div>

<p><strong>Slack notification support</strong><br />
<img src="https://home-assistant.io/images/supported_brands/slack.png" style="border:none; box-shadow: none; float: right;" height="50" /> <a href="https://github.com/jamespcole">@jamespcole</a> has contributed a Slack platform for the notification platform. This allows you to deliver messages to any channel.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">notify</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">slack</span></span>
  <span class="key">api_key</span>: <span class="string"><span class="content">ABCDEFGHJKLMNOPQRSTUVXYZ</span></span>
  <span class="key">default_channel</span>: <span class="string"><span class="content">'#general'</span></span>
</pre></div>
</div>
</div>

<p><strong>Edimax Smart Switches support</strong><br />
<img src="https://home-assistant.io/images/supported_brands/edimax.png" style="border:none; box-shadow: none; float: right;" height="50" /> <a href="https://github.com/rkabadi">@rkabadi</a> has contributed support for integrating Edimax Smart Switches into Home Assistant.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">switch</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">edimax</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">192.168.1.32</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">YOUR_USERNAME</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">YOUR_PASSWORD</span></span>
  <span class="key">name</span>: <span class="string"><span class="content">Edimax Smart Plug</span></span>
</pre></div>
</div>
</div>

<p><strong>RFXtrx sensor support</strong><br />
<a href="https://github.com/danielhiversen">@danielhiversen</a> has contributed support for RFXtrx sensors. It supports sensors that communicate in the frequency range of 433.92 MHz.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">sensor</span>:
  - <span class="string"><span class="content">platform: rfxtrx</span></span>
    <span class="key">device</span>: <span class="string"><span class="content">PATH_TO_DEVICE</span></span>
</pre></div>
</div>
</div>

<p>The path to your device, e.g. <code>/dev/serial/by-id/usb-RFXCOM_RFXtrx433_A1Y0NJGR-if00-port0</code></p>

<p><strong>TEMPer temperature sensor support</strong><br />
Support for Temper temperature sensors has been contributed by <a href="https://github.com/rkabadi">@rkabadi</a>.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">sensor</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">temper</span></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IP Cameras, Arduinos, Kodi and Efergy Energy Monitors now supported]]></title>
    <link href="https://home-assistant.io/blog/2015/07/11/ip-cameras-arduino-kodi-efergy-support/"/>
    <updated>2015-07-11T01:37:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/07/11/ip-cameras-arduino-kodi-efergy-support</id>
    <content type="html"><![CDATA[<p>Another month has passed and some great new features have landed in Home Assistant. This month release has been made possible by <a href="https://github.com/balloob">balloob</a>, <a href="https://github.com/ettisan">ettisan</a>, <a href="https://github.com/fabaff">fabaff</a>, <a href="https://github.com/gyran">gyran</a>, <a href="https://github.com/jamespcole">jamespcole</a>, <a href="https://github.com/michaelarnauts">michaelarnauts</a>, <a href="https://github.com/miniconfig">miniconfig</a> and <a href="https://github.com/rmkraus">rmkraus</a>.</p>

<p>This release includes some architectural changes by me. The first is that the frontend is now based on a <a href="http://optimizely.github.io/nuclear-js/">NuclearJS</a> JavaScript backend. This has greatly helped to organize and optimize the frontend code. Another change is that Home Assistant will now install dependencies on-demand instead of installing dependencies for all supported devices.</p>

<p><strong>IP Camera Support</strong><br />
James has worked very hard to add support for IP cameras to Home Assistant which is included in this release. The initial release focusses on providing generic IP camera support. This means that any webcam that can exposes a JPEG image via a url can be integrated.</p>

<p>Home Assistant will route the requests to your camera via the server allowing you to expose IP camera’s inside your network via the Home Assistant app.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">camera</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">generic</span></span>
  <span class="key">name</span>: <span class="string"><span class="content">my sample camera</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">MY_USERNAME</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">MY_PASSWORD</span></span>
  <span class="key">still_image_url</span>: <span class="string"><span class="content">http://194.218.96.92/jpg/image.jpg</span></span>
</pre></div>
</div>
</div>

<p class="note">
To update to the latest version, run <code>scripts/update</code>. Please report any issues on <a href="https://github.com/balloob/home-assistant/issues">GitHub</a>.
</p>

<!--more-->

<p><strong>Arduino</strong><br />
<img src="https://home-assistant.io/images/supported_brands/arduino.png" style="border:none; box-shadow: none; float: right;" height="50" /> Fabian has contributed support for interfacing with Arduinos. This makes it possible to connect your Arduino via USB and expose pins as sensor data and write to pins via switches. Have a look at <a href="https://home-assistant.io/components/arduino/">the docs</a> for an extensive guide to get started.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">switch</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">arduino</span></span>
  <span class="key">pins</span>:
    <span class="key">11</span>:
      <span class="key">name</span>: <span class="string"><span class="content">Fan Office</span></span>
      <span class="key">type</span>: <span class="string"><span class="content">digital</span></span>
    <span class="key">12</span>:
      <span class="key">name</span>: <span class="string"><span class="content">Light Desk</span></span>
      <span class="key">type</span>: <span class="string"><span class="content">digital</span></span>

<span class="key">sensor</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">arduino</span></span>
  <span class="key">pins</span>:
    <span class="key">1</span>:
      <span class="key">name</span>: <span class="string"><span class="content">Door switch</span></span>
      <span class="key">type</span>: <span class="string"><span class="content">analog</span></span>
    <span class="key">0</span>:
      <span class="key">name</span>: <span class="string"><span class="content">Brightness</span></span>
      <span class="key">type</span>: <span class="string"><span class="content">analog</span></span>
</pre></div>
</div>
</div>

<p><strong>Kodi (XBMC)</strong><br />
<img src="https://home-assistant.io/images/supported_brands/kodi.png" style="border:none; box-shadow: none; float: right;" height="50" /> Ettisan has contributed a Kodi (XBMC) platform for the media player component. This allows you to track all the media that you are playing and allow you to control it.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">media_player</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">kodi</span></span>
  <span class="key">name</span>: <span class="string"><span class="content">Kodi</span></span>
  <span class="key">url</span>: <span class="string"><span class="content">http://192.168.0.123/jsonrpc</span></span>
  <span class="key">user</span>: <span class="string"><span class="content">kodi</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">my_secure_password</span></span>
</pre></div>
</div>
</div>

<p><strong>TP-Link</strong><br />
<img src="https://home-assistant.io/images/supported_brands/tp-link.png" style="border:none; box-shadow: none; float: right;" width="150" /> Michael has added TP-Link support to the device tracker. This allows you to now detect presence if you have a TP-Link router.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">device_tracker</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">tplink</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">YOUR_ROUTER_IP</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">YOUR_ADMIN_USERNAME</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">YOUR_ADMIN_PASSWORD</span></span>
</pre></div>
</div>
</div>

<p><strong>Efergy energy monitor</strong><br />
<img src="https://home-assistant.io/images/supported_brands/efergy.png" style="border:none; box-shadow: none; float: right;" height="50" /> Miniconfig has contributed support for the <a href="https://efergy.com">Efergy energy meters</a>. To get an app token, log in to your efergy account, go to the Settings page, click on App tokens, and click “Add token”.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">sensor</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">efergy</span></span>
  <span class="key">app_token</span>: <span class="string"><span class="content">APP_TOKEN</span></span>
  <span class="key">utc_offset</span>: <span class="string"><span class="content">UTC_OFFSET</span></span>
  <span class="key">monitored_variables</span>:
    - <span class="string"><span class="content">type: instant_readings</span></span>
    - <span class="string"><span class="content">type: budget</span></span>
    - <span class="string"><span class="content">type: cost</span></span>
      <span class="key">period</span>: <span class="string"><span class="content">day</span></span>
      <span class="key">currency</span>: <span class="string"><span class="content">$</span></span>
</pre></div>
</div>
</div>

<p><strong>Forecast.io</strong><br />
Fabian has added support for <a href="https://forecast.io/">Forecast.io</a> to get weather forecasts for Home Assistant. You need an API key which is free but requires a <a href="https://developer.forecast.io/register">registration</a>. To add Forecast.io to your installation, add the following to your <code>configuration.yaml</code> file:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">sensor</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">forecast</span></span>
  <span class="key">api_key</span>: <span class="string"><span class="content">YOUR_APP_KEY</span></span>
  <span class="key">monitored_conditions</span>:
    - <span class="string"><span class="content">summary</span></span>
    - <span class="string"><span class="content">precip_type</span></span>
    - <span class="string"><span class="content">precip_intensity</span></span>
    - <span class="string"><span class="content">temperature</span></span>
    - <span class="string"><span class="content">dew_point</span></span>
    - <span class="string"><span class="content">wind_speed</span></span>
    - <span class="string"><span class="content">wind_bearing</span></span>
    - <span class="string"><span class="content">cloud_cover</span></span>
    - <span class="string"><span class="content">humidity</span></span>
    - <span class="string"><span class="content">pressure</span></span>
    - <span class="string"><span class="content">visibility</span></span>
    - <span class="string"><span class="content">ozone</span></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release notes for June 10, 2015]]></title>
    <link href="https://home-assistant.io/blog/2015/06/10/release-notes/"/>
    <updated>2015-06-10T18:54:00-07:00</updated>
    <id>https://home-assistant.io/blog/2015/06/10/release-notes</id>
    <content type="html"><![CDATA[<p>Wow, almost a month has gone by since the last release and this release is <em>packed</em>. The biggest part of this release is probably one that you won’t notice: the frontend has been upgraded from Polymer 0.5 to the brand new released Polymer 1.0. Polymer has been declared stable by the Google overlords which will allow us to expand functionality that was waiting for this moment to arrive.</p>

<p>This release sets a record for the amount of people involved: 8! <a href="https://github.com/Andythigpen">Andythigpen</a>, <a href="https://github.com/Jamespcole">Jamespcole</a>, <a href="https://github.com/Azelphur">Azelphur</a>, <a href="https://github.com/Fabaff">Fabaff</a>, <a href="https://github.com/Dutchy-">Dutchy-</a>, <a href="https://github.com/Fbradyirl">Fbradyirl</a>, <a href="https://github.com/wind-rider">wind-rider</a> and <a href="https://github.com/ettisan">ettisan</a>, thanks a lot for your contributions!</p>

<p>A big improvement has been brought this release by wind-rider. He took the time to revive the Chromecast support and started improving the media player integration. This triggered other people to join in resulting in a revamped media player experience and support for the Music Player Daemon.</p>

<p class="img">
  <img src="https://home-assistant.io/images/screenshots/media_player-card.png" />   Example of the new media player cards
</p>

<p class="note">
To update to the latest version, run <code>scripts/update</code>. Please report any issues on <a href="https://github.com/balloob/home-assistant/issues">GitHub</a>.
</p>

<!--more-->

<p>Before jumping into the newly supported platforms, here are the other improvements that are landing this release:</p>

<ul>
  <li>Fronted upgraded to Polymer 1.0 by @balloob</li>
  <li>Include other YAML files using the <code>!include</code> keyword by @andythigpen</li>
  <li>Switch support and bug fixes for Vera platform by @jamespcole</li>
  <li>HTTP session support for the HTTP component by @jamespcole</li>
  <li>Device tracker bugfixes by @Dutchy-</li>
  <li>Bugfix for device tracker platform by @fbradyirl</li>
  <li>Fixing Chromecast support by @wind-rider</li>
  <li>Media player improvements by @balloob and @wind-rider</li>
  <li>Nest thermostat bugfixes by @balloob</li>
  <li>Fix the device tracker getting in a deadlock by @balloob</li>
  <li>Update documentation by @fabaff</li>
</ul>

<p><strong>Music Player Daemon</strong><br />
<img src="https://home-assistant.io/images/supported_brands/mpd.png" style="border:none; box-shadow: none; float: right;" height="50" /> Fabaff has contributed MusicPlayerDaemon support. The mpd platform allows you to control a <a href="http://www.musicpd.org/">Music Player Daemon</a> from Home Assistant. Right now, only playback is supported and not playlist manipulation.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">media_player</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mpd</span></span>
  <span class="key">server</span>: <span class="string"><span class="content">127.0.0.1</span></span>
  <span class="key">port</span>: <span class="string"><span class="content">6600</span></span>
  <span class="key">location</span>: <span class="string"><span class="content">bedroom</span></span>
</pre></div>
</div>
</div>

<p><strong>Command line switch</strong><br />
A switch platform that issues specific commands when it is turned on and off. This might very well become our most popular platform as it allows anyone to integrate any type of switch into Home Assistant that can be controlled from the command line, including calling other scripts!</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">switch</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">command_switch</span></span>
  <span class="key">switches</span>:
    - <span class="string"><span class="content">kitchen_light:</span><span class="content">
        oncmd: switch_command on kitchen
        offcmd: switch_command off kitchen</span></span>
</pre></div>
</div>
</div>

<p><strong>LimitlessLED</strong><br />
This new platform can control your LimitlessLED lights from within Home Assistant. The lights are also known as EasyBulb, AppLight, AppLamp, MiLight, LEDme, dekolight or iLight.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">light</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">limitlessled</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">192.168.1.10</span></span>
  <span class="key">group_1_name</span>: <span class="string"><span class="content">Living Room</span></span>
  <span class="key">group_2_name</span>: <span class="string"><span class="content">Bedroom</span></span>
  <span class="key">group_3_name</span>: <span class="string"><span class="content">Office</span></span>
  <span class="key">group_4_name</span>: <span class="string"><span class="content">Kitchen</span></span>
</pre></div>
</div>
</div>

<p><strong>Bitcoin sensor</strong><br />
<img src="https://home-assistant.io/images/supported_brands/bitcoin.png" style="border:none; box-shadow: none; float: right;" height="50" /> The bitcoin platform displays various details about the <a href="https://bitcoin.org">Bitcoin</a> network. If you have an online wallet from <a href="https://blockchain.info/">Blockchain.info</a> the sensor is capable to show your current balance.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">sensor</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">bitcoin</span></span>
  <span class="key">wallet</span>: <span class="string"><span class="content">'YOUR WALLET_ID'</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">YOUR_ACCOUNT_PASSWORD</span></span>
  <span class="key">currency</span>: <span class="string"><span class="content">YOUR CURRENCY</span></span>
  <span class="key">display_options</span>:
    - <span class="string"><span class="content">exchangerate</span></span>
    - <span class="string"><span class="content">trade_volume_btc</span></span>
    - <span class="string"><span class="content">miners_revenue_usd</span></span>
    - <span class="string"><span class="content">btc_mined</span></span>
    - <span class="string"><span class="content">trade_volume_usd</span></span>
    - <span class="string"><span class="content">difficulty</span></span>
    - <span class="string"><span class="content">minutes_between_blocks</span></span>
    - <span class="string"><span class="content">number_of_transactions</span></span>
    - <span class="string"><span class="content">hash_rate</span></span>
    - <span class="string"><span class="content">timestamp</span></span>
    - <span class="string"><span class="content">mined_blocks</span></span>
    - <span class="string"><span class="content">blocks_size</span></span>
    - <span class="string"><span class="content">total_fees_btc</span></span>
    - <span class="string"><span class="content">total_btc_sent</span></span>
    - <span class="string"><span class="content">estimated_btc_sent</span></span>
    - <span class="string"><span class="content">total_btc</span></span>
    - <span class="string"><span class="content">total_blocks</span></span>
    - <span class="string"><span class="content">next_retarget</span></span>
    - <span class="string"><span class="content">estimated_transaction_volume_usd</span></span>
    - <span class="string"><span class="content">miners_revenue_btc</span></span>
    - <span class="string"><span class="content">market_price_usd</span></span>
</pre></div>
</div>
</div>

<p><strong>SMTP notificatoin platform</strong><br />
<img src="https://home-assistant.io/images/supported_brands/smtp.png" style="border:none; box-shadow: none; float: right;" height="50" /> The smtp platform allows you to deliver notifications from Home Assistant to an e-mail recipient.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">notify</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mail</span></span>
  <span class="key">server</span>: <span class="string"><span class="content">MAIL_SERVER</span></span>
  <span class="key">port</span>: <span class="string"><span class="content">YOUR_SMTP_PORT</span></span>
  <span class="key">sender</span>: <span class="string"><span class="content">SENDER_EMAIL_ADDRESS</span></span>
  <span class="key">starttls</span>: <span class="string"><span class="content">1 or 0</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">YOUR_SMTP_USERNAME</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">YOUR_SMTP_PASSWORD</span></span>
  <span class="key">recipient</span>: <span class="string"><span class="content">YOUR_RECIPIENT</span></span>
</pre></div>
</div>
</div>

<p><strong>Syslog notification platform</strong><br />
The syslog platform allows you to deliver notifications from Home Assistant to the local syslog.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">notify</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">syslog</span></span>
</pre></div>
</div>
</div>

<p><strong>Swiss Public transport sensor</strong><br />
The swiss public transport sensor will give you the next two departure times from a given location to another one in Switzerland. See the <a href="https://home-assistant.io/components/sensor.swiss_public_transport/">component page</a> for more information how to set it up.</p>

<p><strong>Transmission turtle mode switch</strong><br />
<img src="https://home-assistant.io/images/supported_brands/transmission.png" style="border:none; box-shadow: none; float: right;" height="50" /> The transmission platform allows you to control your <a href="http://www.transmissionbt.com/">Transmission</a> client from within Home Assistant. The platform enables you switch to your ‘Alternative Speed Limits’ (aka ‘Turtle mode’) setting.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">switch</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">transmission</span></span>
  <span class="key">name</span>: <span class="string"><span class="content">Transmission</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">192.168.1.26</span></span>
  <span class="key">port</span>: <span class="string"><span class="content">9091</span></span>
  <span class="key">username</span>: <span class="string"><span class="content">YOUR_USERNAME</span></span>
  <span class="key">password</span>: <span class="string"><span class="content">YOUR_PASSWORD</span></span>
</pre></div>
</div>
</div>

<p><strong>Hikvision camera motion detection support</strong><br />
This switch platform allows you to control your motion detection setting on your Hikvision camera.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example configuration.yaml entry</span>
<span class="key">switch</span>:
    <span class="key">platform</span>: <span class="string"><span class="content">hikvisioncam</span></span>
    <span class="key">name</span>: <span class="string"><span class="content">Hikvision Cam 1 Motion Detection</span></span>
    <span class="key">host</span>: <span class="string"><span class="content">192.168.1.26</span></span>
    <span class="key">username</span>: <span class="string"><span class="content">YOUR_USERNAME</span></span>
    <span class="key">password</span>: <span class="string"><span class="content">YOUR_PASSWORD</span></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Home Assistant]]></title>
  <link href="https://home-assistant.io/atom.xml" rel="self"/>
  <link href="https://home-assistant.io/"/>
  <updated>2016-05-20T18:04:19+00:00</updated>
  <id>https://home-assistant.io/</id>
  <author>
    <name><![CDATA[Paulus Schoutsen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why we use web components and Polymer]]></title>
    <link href="https://home-assistant.io/blog/2016/05/18/why-we-use-polymer/"/>
    <updated>2016-05-18T00:09:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/05/18/why-we-use-polymer</id>
    <content type="html"><![CDATA[<p>I’ve been planning to write this post for a while now as we get questions like this a lot: <em>“Why does Home Assistant use Polymer? Why not React, Redux and what not?”</em></p>

<p>It’s understandable, Polymer is quite the underdog in the world of web frameworks. A corporate backer does not guarantee popularity or an active community and this shows in the number of projects using Polymer.</p>

<p>Still, <a href="https://home-assistant.io/demo">we use Polymer and it’s awesome</a>. To explain why, I’ll be referencing the React workflow quite a bit, as they do a lot of things right, and show how it is done in Polymer.</p>

<p>Polymer gives us components for the web, just like React, but based on web standards: <a href="https://www.w3.org/standards/techs/components#w3c_all">web components</a>, <a href="https://www.w3.org/TR/css-variables/">CSS variables</a>. These standards don’t have wide browser support yet but it’s being implemented by every major browser: It’s the future. For now they are being polyfilled and that works just fine but in the future the Home Assistant web app will be able to run native in the browsers == fast.</p>

<!--more-->

<p>Polymer does not have the nice developer experience that one can have with React and the <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en">React Dev Tools</a> but that’s a matter of time. The developer tools in every browser have seen a lot of improvements recently and each improvement helps support for web components.</p>

<p>Another major benefit of Polymer for Home Assistant is that we get <a href="https://elements.polymer-project.org/browse?package=paper-elements">material design for free</a>. The material design components that come with Polymer have a very high quality. Google is using these components themselves and make sure that performance and accessibility using screen readers/keyboards are great. As an open source project, the more we can outsource, the better - so our contributors can focus on the core product: home automation.</p>

<p>What about Flux, data management and interaction between components? It’s actually pretty similar to React or any other component based framework. Flux-like architectures work with Polymer just like with React: whenever data changes it will update the attributes of a component which will propagate to the children. For Home Assistant we use <a href="https://optimizely.github.io/nuclear-js/">NuclearJS</a> with our <a href="http://paulusschoutsen.nl/blog/2015/07/using-polymer-with-flux-and-a-global-app-state/">own Polymer bindings</a>. For data moving from child to parent the Polymer pattern is using DOM events instead of callbacks but the end result is the same. It is so similar in fact, that it took me only two hours to make a <a href="https://github.com/balloob/home-assistant-react-native-ios">React Native frontend for on top of our core</a>.</p>

<p>So what about Babel and ES2015? Also this is covered. Each web component exists of a HTML template and a JavaScript class to back it. Think of the HTML template as the render method in React. In Home Assistant we have the HTML templates import one another and have a separate chain for the JavaScript classes backing each component. This allows us to use Babel and NPM modules for the JavaScript part (<a href="https://github.com/home-assistant/home-assistant-polymer#building-the-app">more info here</a>). This does however come with the downside of other JS based frameworks: the browser blocks any painting while the JavaScript is being parsed instead of upgrading the website incrementally. This, however, is something we take for granted right now and hope that module bundlers will be able to solve this for us eventually. Tree shaking is a very promising improvement in this space.</p>

<p>Most of this blog post has been comparing Polymer to React. In many ways Polymer is similar to React but it is not as far evolved yet. I like React but I do not see it as a technology that will be around forever. Given the trend of previous popular JS frameworks, React will probably get replaced by another framework that works even better. Web components however will be here forever as they are part of the HTML standard. And this gives us peace of mind at the virtual Home Assistant headquarters: we do not have to be afraid of having to rewrite our frontend just to stay relevant or because people don’t want to include another dependency just to run this legacy piece.</p>

<p>So there it is, the reason why we use Polymer.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video: How To Configure Home Assistant]]></title>
    <link href="https://home-assistant.io/blog/2016/05/12/video-configuring-home-assistant/"/>
    <updated>2016-05-12T00:09:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/05/12/video-configuring-home-assistant</id>
    <content type="html"><![CDATA[<p>Ben from <a href="http://www.bruhautomation.com">BRUH Automation</a> authors a lot of great video’s about how he is using Home Assistant and how you can get started with it too. The video below will walk you through how to configure Home Assistant. Enjoy!</p>

<p>Make sure to subscribe to <a href="https://www.youtube.com/channel/UCLecVrux63S6aYiErxdiy4w">his YouTube channel</a> for more Home Assistant video’s.</p>

<div class="videoWrapper">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/hFDVB2H6TNo" frameborder="0" allowfullscreen=""></iframe>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.19: Empowering scripts and Alexa]]></title>
    <link href="https://home-assistant.io/blog/2016/05/07/empowering-scripts-and-alexa/"/>
    <updated>2016-05-07T18:06:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/05/07/empowering-scripts-and-alexa</id>
    <content type="html"><![CDATA[<p>This release is big. Until now, our automations and scripts have been very static. Starting today it should all be a bit more dynamic.</p>

<p><strong>Scripts</strong> are now available in automations and when responding to Alexa/Amazon Echo. Both of these components will now expose data to be used in script templates (including <code>from_state</code> !). Passing data to script entities is available by passing the data to the script services.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">automation</span>:
  <span class="key">trigger</span>:
    <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
    <span class="key">topic</span>: <span class="string"><span class="content">some/notify/topic</span></span>
  <span class="key">action</span>:
    <span class="key">service</span>: <span class="string"><span class="content">notify.notify</span></span>
    <span class="key">data_template</span>:
      <span class="key">message</span>: 

<span class="key">automation 2</span>:
  <span class="key">trigger</span>:
    <span class="key">platform</span>: <span class="string"><span class="content">state</span></span>
    <span class="key">entity_id</span>: <span class="string"><span class="content">light.hue</span></span>
  <span class="key">action</span>:
    <span class="key">service</span>: <span class="string"><span class="content">notify.notify</span></span>
    <span class="key">data_template</span>:
      <span class="key">message</span>:  <span class="string"><span class="content">is now </span></span>
</pre></div>
</div>
</div>

<p><strong>Entity Namespaces</strong> allow you to influence the entity ids for a specific platform. For example you can turn <code>light.living_room</code> into <code>light.holiday_home_living_room</code> with the following config:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">light</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">hue</span></span>
  <span class="key">entity_namespace</span>: <span class="string"><span class="content">holiday_home</span></span>
</pre></div>
</div>
</div>

<ul>
  <li>Automation: allow <a href="https://home-assistant.io/getting-started/scripts/">script syntax</a> for action (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Automation: expose <a href="https://home-assistant.io/getting-started/automation-templating/#available-trigger-data/"><code>trigger</code> variable</a> to script templates (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Script: allow passing variables for script templates in the <a href="https://home-assistant.io/components/script/#passing-parameters-in-service-calls/">script service calls</a> (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Alexa/Amazon Echo: allow <a href="https://home-assistant.io/getting-started/scripts/">script syntax</a> for action (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Alexa/Amazon Echo: <a href="https://home-assistant.io/components/alexa/#configuring-home-assistant/">expose intent variables</a> to script templates (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Script syntax: <a href="https://home-assistant.io/getting-started/scripts-conditions/">conditions now supported</a> to interrupt execution (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Automation: use <a href="https://home-assistant.io/getting-started/scripts-conditions/">new condition syntax</a> (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Script syntax: two new conditions <a href="https://home-assistant.io/getting-started/scripts-conditions/#and-condition/"><code>and</code></a> and <a href="https://home-assistant.io/getting-started/scripts-conditions/#or-condition/"><code>or</code></a> to combine conditions (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Any platform: Allow setting <a href="https://home-assistant.io/topics/platform_options/#entity-namespace/">entity namespace</a> to prefix entity_ids. (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.rpi_rf/">Raspberry Pi generic 433 Mhz GPIO adapters</a> now supported (<a href="https://github.com/milaq/">@milaq</a>)</li>
  <li>Z-Wave: use more sane defaults (<a href="https://github.com/danieljkemp/">@danieljkemp</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.snapcast/">Snapcast</a> now supports picking a source (<a href="https://github.com/happyleavesaoc/">@happyleavesaoc</a>)</li>
  <li>MySensors: major cleanup (<a href="https://github.com/MartinHjelmare/">@MartinHjelmare</a>)</li>
  <li>Binary Sensor: <a href="https://home-assistant.io/components/sensor.command_line/">Command line sensor</a> now supports classes (<a href="https://github.com/fabaff/">@fabaff</a>)</li>
  <li>MQTT: <a href="https://home-assistant.io/components/mqtt/">allow client key authentication</a> (<a href="https://github.com/timharton/">@timharton</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.forecast/">Forecast.io</a> now supports minutely, hourly and daily summaries (<a href="https://github.com/aceat64/">@aceat64</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.pioneer/">Pioneer AVR</a> now supported (<a href="https://github.com/kylehendricks/">@kylehendricks</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.acer_projector/">Acer Projectors</a> now supported (<a href="https://github.com/deisi/">@deisi</a>)</li>
  <li>New <a href="https://home-assistant.io/components/hvac/">HVAC component</a> added with Z-Wave support (<a href="https://github.com/turbokongen/">@turbokongen</a>)</li>
  <li>Support added for <a href="https://home-assistant.io/components/octoprint/">OctoPrint</a> (<a href="https://github.com/w1ll1am23/">@w1ll1am23</a>)</li>
  <li>Configuration.yaml can now refer to environment variables using <code>!env_var</code> (<a href="https://github.com/bah2830/">@bah2830</a>)</li>
  <li>Lock: <a href="https://home-assistant.io/components/lock.zwave/">Z-Wave</a> now supported (<a href="https://github.com/devdelay/">@devdelay</a>)</li>
  <li>New <a href="https://home-assistant.io/components/dweet/">Dweet component</a> to export data (<a href="https://github.com/fabaff/">@fabaff</a>)</li>
  <li>Media Player now supports stop command + initial kodi support (<a href="https://github.com/hmronline/">@hmronline</a>)</li>
  <li>Zigbee: push updates now supported (<a href="https://github.com/flyte/">@flyte</a>)</li>
  <li>Wink devices with battery level will now show these (<a href="https://github.com/w1ll1am23/">@w1ll1am23</a>)</li>
  <li>Templates: new <a href="https://home-assistant.io/topics/templating/#home-assistant-template-extensions/"><code>as_timestamp</code></a> method now available (<a href="https://github.com/srcLurker/">@srcLurker</a>)</li>
  <li>API: Add [<code>/api/discovery_info</code>] with basic instance info (<a href="https://github.com/robbiet480/">@robbiet480</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.google_travel_time/">Google Maps travel time</a> added (<a href="https://github.com/Danielhiversen/">@Danielhiversen</a>)</li>
  <li>HTTP: Allow adding <a href="https://home-assistant.io/components/http/">CORS headers</a> (<a href="https://github.com/robbiet480/">@robbiet480</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.fitbit/">Fitbit</a> support added (<a href="https://github.com/robbiet480/">@robbiet480</a>)</li>
  <li>Bug fixes and tweaks by <a href="https://github.com/turbokongen/">@turbokongen</a>, <a href="https://github.com/danieljkemp/">@danieljkemp</a>, <a href="https://github.com/Danielhiversen/">@Danielhiversen</a>, <a href="https://github.com/TheRealLink/">@TheRealLink</a>, <a href="https://github.com/persandstrom/">@persandstrom</a>, <a href="https://github.com/sander76/">@sander76</a>, <a href="https://github.com/fabaff/">@fabaff</a>, <a href="https://github.com/ishults/">@ishults</a>, <a href="https://github.com/Bart274/">@Bart274</a>, <a href="https://github.com/robbiet480/">@robbiet480</a>, <a href="https://github.com/Cinntax/">@Cinntax</a>, <a href="https://github.com/blackdog70/">@blackdog70</a>, <a href="https://github.com/gwendalg/">@gwendalg</a>, <a href="https://github.com/JshWright/">@JshWright</a>, <a href="https://github.com/kylehendricks/">@kylehendricks</a>, <a href="https://github.com/bradsk88/">@bradsk88</a>, <a href="https://github.com/shaftoe/">@shaftoe</a>, <a href="https://github.com/molobrakos/">@molobrakos</a>, <a href="https://github.com/bah2830/">@bah2830</a>, <a href="https://github.com/nkgilley/">@nkgilley</a></li>
</ul>

<h3>Deprecations</h3>
<ul>
  <li>Conditions in automations should now specify which condition to use with <code>condition:</code> instead of <code>platform:</code>. For example <code>condition: state</code>.</li>
  <li>RFXtrx has a new config format.</li>
</ul>

<p>Old RFXtrx config format:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>  <span class="key">devices</span>:
    <span class="key">123efab1</span>:
      <span class="key">name</span>: <span class="string"><span class="content">My DI.0 light device</span></span>
      <span class="key">packetid</span>: <span class="string"><span class="content">1b2200000890efab1213f60</span></span>
</pre></div>
</div>
</div>

<p>New RFXtrx config format:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>  <span class="key">devices</span>:
    <span class="key">1b2200000890efab1213f60</span>:
      <span class="key">name</span>: <span class="string"><span class="content">My DI.0 light device</span></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: Automating your home with Home Assistant (OpenIoT Summit)]]></title>
    <link href="https://home-assistant.io/blog/2016/05/06/open-iot-summit-talk/"/>
    <updated>2016-05-06T14:09:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/05/06/open-iot-summit-talk</id>
    <content type="html"><![CDATA[<p>At the beginning of April I gave a talk about Home Assistant at the OpenIoT summit in San Diego. I talk about the Home Assistant architecture and explain how to get started integrating your devices. Big thanks to my employer AppFolio (<a href="http://www.appfolioinc.com/jobs-openings">we’re hiring!</a>) for letting me attend. <a href="https://docs.google.com/presentation/d/1P2WsmwGSSni4gAriY5IA0-m-FUGO1kno3gIkRYz20Kw/edit#slide=id.p">Slides.</a></p>

<div class="videoWrapper">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/4-6rTwKl6ww" frameborder="0" allowfullscreen=""></iframe>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iBeacons: Making presence detection work better (part I)]]></title>
    <link href="https://home-assistant.io/blog/2016/04/30/ibeacons-part-1-making-presence-detection-work-better/"/>
    <updated>2016-04-30T06:50:09+00:00</updated>
    <id>https://home-assistant.io/blog/2016/04/30/ibeacons-part-1-making-presence-detection-work-better</id>
    <content type="html"><![CDATA[<p><em>This post is by Home Assistant contributor <a href="https://github.com/pavoni">Greg Dowling</a>.</em></p>

<p>In 2013 Apple introduced iBeacons: a class of Bluetooth low energy (LE) devices that broadcast their identifier to nearby devices, including most smartphones. At first glance it’s hard to imagine why they might be useful. In this two part blog I’ll try and explain why they are useful and how you can use them with Home Assistant.</p>

<p>The reason I started using iBeacons was to improve presence detection (and I think that’s the case with most people) so that’s what I’ll discuss in <em>part 1</em>. In <em>part 2</em> I’ll talk about using iBeacons to track devices that can’t track themselves.</p>

<h3><a class="title-link" name="using-beacons-to-improve-owntracks-location-data" href="#using-beacons-to-improve-owntracks-location-data"></a> Using beacons to improve OwnTracks location data</h3>

<p>When you use OwnTracks in standard <em>major move</em> mode (which is kind to your phone battery) it sometimes fails to update when you’d like it to. In my case I found that it would often send a location update as I was on my way home, but then not update when I got home. The result would be that Home Assistant would think I was 500M away from home, and take quite a while to notice I was home. It would also mean that the automation that should turn on my lights when I got home didn’t work very well! There were a few times when my phone location updated at 2am and turned the lights on for me. Fortunately my wife is very patient!</p>

<p>Luckily, OwnTracks supports iBeacons so I could use them to make presence detection more reliable. When OwnTracks sees a beacon it recognises, it will send an update. This means that if you put a beacon at your front door - OwnTracks will see it within a few seconds of you arriving home - and send an update saying it has seen this iBeacon.</p>

<!--more-->

<h3><a class="title-link" name="getting-started" href="#getting-started"></a> Getting Started</h3>

<p>To do this you first need to set up <a href="https://home-assistant.io/components/mqtt/#picking-a-broker/">MQTT</a> and <a href="https://home-assistant.io/components/device_tracker.owntracks/">OwnTracks</a> in Home assistant - and make sure that HA can track your phone.</p>

<p>You then have to (A) tell Home Assistant where the beacon is located and (B) tell OwnTracks to recognise the beacon.</p>

<h4><a class="title-link" name="a-tell-home-assistant-where-your-beacon-is-located" href="#a-tell-home-assistant-where-your-beacon-is-located"></a> A. Tell Home Assistant where your beacon is located</h4>

<p>You tell HomeAssistant about fixed locations by creating a Zone with the longitude and latitude of your beacon. You should also give the zone a name which you will also use when you set up OwnTracks. An an example this zone specifies the location of my drive way.</p>

<p><strong>Example <code>configuration.yaml</code> entry</strong></p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>
<span class="key">zone</span>:
    - <span class="string"><span class="content">name: 'Drive'</span></span>
      <span class="key">latitude</span>: <span class="string"><span class="content">XXX</span></span>
      <span class="key">longitude</span>: <span class="string"><span class="content">YYY</span></span>
      <span class="key">radius</span>: <span class="string"><span class="content">100</span></span>
</pre></div>
</div>
</div>

<p>The radius isn’t used by the beacon code, but it is used by the GPS location sensing code. I’ll come back to this a little later. For now just use 50 or 100.</p>

<p>Once you’ve created the zone - you need to restart HA. The next step is:-</p>

<h4><a class="title-link" name="b-tell-owntracks-to-track--your-beacon" href="#b-tell-owntracks-to-track--your-beacon"></a> B. Tell OwnTracks to track  your beacon</h4>

<ol>
  <li>Go to the OwnTracks app on your phone</li>
  <li>Touch the <code>Regions</code> menu at the bottom of the screen</li>
  <li>Touch the <code>+</code> symbol at the top right of the screen</li>
  <li>Give the beacon a name e.g. <code>-drive</code> ’(start the name with a <code>-</code> see below for the reason)</li>
  <li>Turn Share to <code>On</code></li>
  <li>Skip the <code>Circular Region</code> section</li>
  <li>Enter the <code>UUID</code> of your beacon - this may be written on your beacon - or you can copy it from the management app that came with your iBeacon device. It’s a long number – so it’s easier to copy if you can!</li>
  <li>Enter the <code>Minor</code> and <code>Major</code> numbers for your iBeacon - or leave them at 0 which will match all beacons with that <code>UUID</code></li>
</ol>

<p class="img">
  <img width="200" border="2" src="https://home-assistant.io/images/blog/2016-04-ibeacons/owntracks_beacon_setup.png" />
</p>

<p>Once you’ve added the iBeacon - you should be able to see it on the OwnTracks region screen. If your phone can see the packets from that beacon, OwnTracks will turn the relevant Region red.</p>

<p class="img">
  <img width="200" src="https://home-assistant.io/images/blog/2016-04-ibeacons/owntracks_red_beacon.png" />
</p>

<p>When OwnTracks sees the beacon (and turns the region red), it also sends an MQTT packet to HA to say that you have entered that region.</p>

<p>The result of the configuration above would be to set the location of device.phone to <code>Drive</code> , (and the GPS location to XXX,YYY) when your phone sees the beacon.</p>

<p>So with the steps above you should be able to improve the reliability of tracking your phone - and send timely updates to HA. I did this for my home - and the lights now turn on before I reach the house on foot. If I arrive by car they turn on within a few seconds of arriving, before I can get to the front door.</p>

<p>I’m also pleased to say I no longer get an <em>arrive home</em> event at 2am that turns the lights on. I hope I’ve convinced you that iBeacons are worth trying!</p>

<h3><a class="title-link" name="mixing-beacons-and-gps-locations" href="#mixing-beacons-and-gps-locations"></a> Mixing Beacons and GPS locations</h3>

<p>You will probably use beacons to make entry into your existing GPS zones more reliable. By default either a beacon or a GPS location can cause you to enter a zone - and HA has some logic that should make them two work well together (it ignores GPS updates when you’re in an iBeacon Zone).</p>

<p>However you can also use beacons for situations where GPS doesn’t work well.</p>

<p>This might be because the zones are too close together - or even on top of each other!<br />
For example, my wife works next door - and I couldn’t detect whether she’s at home or in the office via GPS because the accuracy wasn’t high enough. However I can do this by using two beacons.</p>

<p>To make this type of presence detection work you need to turn GPS off for a zone in Home Assistant by making them <code>passive</code>. This is important because otherwise HA will try to decide between two close together zones without enough data. This doesn’t work well.</p>

<p>A passive zone can only be entered via an iBeacon, so a GPS location update will always pick the other zone.</p>

<p>I set up my Home zone to be a standard region, and my office zone to be passive, so the home zone can be entered in the normal way via either GPS or a Beacon.</p>

<p><strong>Example <code>configuration.yaml</code> entry</strong></p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>
<span class="key">zone</span>:
    - <span class="string"><span class="content">name: 'Office'</span></span>
      <span class="key">latitude</span>: <span class="string"><span class="content">XXX</span></span>
      <span class="key">longitude</span>: <span class="string"><span class="content">YYY</span></span>
      <span class="key">radius</span>: <span class="string"><span class="content">3</span></span>
      <span class="key">passive</span>: <span class="string"><span class="content">true</span></span>
</pre></div>
</div>
</div>

<p>You could use this technique to try to detect which room someone is in. This might allow you to notice whether someone is in the living room or the bedroom - even though one is above the other (although beacon packets do pass through walls and floors).</p>

<p>To get this to work you’ll probably need to experiment with the beacon signal strength to try to match the beacon reception area to the location you want to track. Let me know if you get this to work (it doesn’t make sense in my open plan house)</p>

<h3><a class="title-link" name="conclusion" href="#conclusion"></a> Conclusion</h3>

<p>Presence tracking sounds easy - and it’s an important part of Home Automation. Trying it shows how difficult it is to get presence detection right.  I’ve found that iBeacons have improved the reliability and timeliness of knowing where I am, and I hope I encouraged you to try them too.</p>

<h3><a class="title-link" name="tips" href="#tips"></a> Tips</h3>

<p>You can find out more about configuring the OwnTracks application and beacons <a href="http://owntracks.org/booklet/features/beacons/">here</a></p>

<p>There is information about configuring Homeassistant to use beacons <a href="https://home-assistant.io/components/device_tracker.owntracks/">here</a></p>

<h4><a class="title-link" name="connections-and-disconnecting" href="#connections-and-disconnecting"></a> Connections and disconnecting</h4>

<p>Owntracks treats a region name with a leading <code>-</code> as a hint that it shouldn’t disconnect after a single missed packet. This improves the ability to keep a connection to a beacon.</p>

<p>However, even when using this feature I’ve noticed that you can still lose connections (although it seems to vary by beacon manufacturer and type - I’ll talk more about this in <em>part 2</em>). This means that it’s best to take into account that you may see false enter/leave events in HA. You may be able to improve this by changing how often the beacons send packets - and by increasing the signal strength (both will drain your beacon batteries more quickly). You can usually change these parameters in the app supplied by the iBeacon maker. You can also find some high power beacons (which have worked well for me).</p>

<p>In automations you can use a <code>for:</code> to avoid triggering during a brief disconnect, or use a script with a delay. Stay tuned for <em>part 2</em> for an example of this.</p>

<h4><a class="title-link" name="using-multiple-beacons-for-the-same-zone" href="#using-multiple-beacons-for-the-same-zone"></a> Using Multiple beacons for the same Zone</h4>
<p>iBeacons have a <code>UUID</code> (usually set to the same value for beacons from the same manufacturer), as well as a <code>minor</code> and <code>major</code> number. If you set two beacons to have exactly same details then OwnTracks will think multiple beacons are at the same location.</p>

<p>This means you can have more than one beacon around your home - and a connection to any of them will count as <code>home</code> to OwnTracks and HA. This reduces disconnections.</p>

<p>You can achieve the same effect by using the same the same <code>UUID</code> but different <code>major</code> / <code>minor</code> numbers - and tell OwnTracks not to worry about the <code>minor</code> / <code>major</code> numbers for a particular region by setting them to 0).</p>

<p><em>Stay tuned for part II where I’ll talk about how to use iBeacons to track any object.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.18: Bluetooth, LG WebOS TVs and Roombas.]]></title>
    <link href="https://home-assistant.io/blog/2016/04/20/bluetooth-lg-webos-tvs-and-roombas/"/>
    <updated>2016-04-20T06:10:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/04/20/bluetooth-lg-webos-tvs-and-roombas</id>
    <content type="html"><![CDATA[<p>It’s time for 0.18. This release cycle is 2 days shorter than usual as I’ll be travelling to Europe. This also means that it can take some more time before you get feedback on PRs.</p>

<p>Since the last release we have moved all Home Assistant source code etc into it’s own <a href="https://github.com/home-assistant">organisation on GitHub</a>. We’re growing up! This sadly did cause us to have to move all Docker images. Check the breaking changes section for more info.</p>

<p><a href="https://home-assistant.io/demo/"><img src="https://home-assistant.io/images/blog/2016-04-release-18/media_player.png" style="box-shadow: none; border: 0;" /></a></p>

<p><img src="https://home-assistant.io/images/supported_brands/bluetooth.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/webos.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/rss.gif" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/eq3.gif" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/thinkingcleaner.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="100" /></p>

<ul>
  <li>Media Player: redesign in the UI! (<a href="https://github.com/DesignFirst/">@DesignFirst</a>, <a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>New component: <a href="https://home-assistant.io/components/zeroconf/">Zeroconf</a> for Home Assistant discovery (<a href="https://github.com/robbiet480/">@robbiet480</a>)</li>
  <li>Garage door: <a href="https://home-assistant.io/components/garage_door.mqtt/">MQTT</a> now supported (<a href="https://github.com/joelash/">@joelash</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.homematic/">Homematic platform</a> now supports Max! devices (<a href="https://github.com/bimbar/">@bimbar</a>)</li>
  <li>New component Thinkingcleaner (<a href="https://home-assistant.io/components/switch.thinkingcleaner/">switch</a>/<a href="https://home-assistant.io/components/sensor.thinkingcleaner/">sensor</a>) to integrate your Roomba into Home Assistant (<a href="https://github.com/TheRealLink/">@TheRealLink</a>)</li>
  <li>New component: <a href="https://home-assistant.io/components/upnp/">upnp</a> to automatically open a upnp port on your router for Home Assistant (<a href="https://github.com/robbiet480/">@robbiet480</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.eq3btsmart/">EQ3 Bluetooth Smart Thermostats</a> now supported (<a href="https://github.com/bimbar/">@bimbar</a>)</li>
  <li>New component <a href="https://home-assistant.io/components/feedreader/">Feedreader</a> will track RSS feeds (<a href="https://github.com/shaftoe/">@shaftoe</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.bluetooth_tracker/">Bluetooth tracking platform</a> added (<a href="https://github.com/vmulpuru/">@vmulpuru</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.webostv/">LG WebOS TVs</a> now supported (<a href="https://github.com/TheRealLink/">@TheRealLink</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.webostv/">LG WebOS TVs</a> now supported (<a href="https://github.com/TheRealLink/">@TheRealLink</a>)</li>
  <li>HTTP: Use constant time comparison for auth (<a href="https://github.com/JshWright/">@JshWright</a>)</li>
  <li>Config and service validations (<a href="https://github.com/jaharkes/">@jaharkes</a>, <a href="https://github.com/Danielhiversen/">@Danielhiversen</a>)</li>
  <li>MySensors: Entity IDs will more clearly differentiate between node ID and child ID (<a href="https://github.com/oeysteinhansen/">@oeysteinhansen</a>)</li>
  <li>MySensors: Add support for <a href="https://home-assistant.io/components/mysensors/">ethernet gateway</a> (<a href="https://github.com/MartinHjelmare/">@MartinHjelmare</a>)</li>
  <li>Media player: <a href="https://home-assistant.io/components/media_player.plex/">Plex</a> will now monitor the server and add clients as they pop up (<a href="https://github.com/infamy/">@infamy</a>)</li>
  <li>Core: We now use iso8601 for datetimes (<a href="https://github.com/balloob/">@balloob</a>).</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.mpd/">MPD</a> now supports service to play playlists (<a href="https://github.com/Cinntax/">@Cinntax</a>)</li>
  <li>Z-Wave should be a little bit more stable (<a href="https://github.com/Turbokongen/">@Turbokongen</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.sonos/">Sonos</a> will now only add visible devices (<a href="https://github.com/jpmossin/">@jpmossin</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.wink/">Wink</a> will now allow controlling the colors (<a href="https://github.com/bradsk88/">@bradsk88</a>)</li>
</ul>

<h3>Breaking changes</h3>
<ul>
  <li>We have migrated our datetime format to be iso8601. This will only impact you if you are consuming the date times from the API directly. You can ignore this if you are just using Home Assistant via configuration and the frontend.</li>
  <li>The constant <code>TEMP_CELCIUS</code> is now correctly called <code>TEMP_CELSIUS</code>. Old one is deprecated and will eventually be removed.</li>
  <li>The location of the Docker image has changed. There was no possibility for us to keep maintaining the old image (as it was bound to the GitHub repo under my name) or to make a redirect. So if you are using the Home Assistant Docker image,  change it to run <code>homeassistant/home-assistant:latest</code> for the latest release and <code>homeassistant/home-assistant:dev</code> for the latest dev version.</li>
  <li>MySensors received two big changes that will cause you to update your configs. See <a href="https://home-assistant.io/components/mysensors/">component page</a> for new example config.
    <ol>
      <li>All MySensors entity IDs are different! There was an error in the naming that caused MySensors to append node ID and child ID instead of separating them with an underscore. This has been fixed but will cause all your MySensors entity IDs to change. This is a one time breaking change.</li>
      <li>The second change is that we now support the TCP ethernet gateway. This is causing a slight change to the config format: you have to change <code>port:</code> under <code>gateways</code> to <code>device:</code>.</li>
    </ol>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Infinity and Beyond 🚀]]></title>
    <link href="https://home-assistant.io/blog/2016/04/19/to-infinity-and-beyond/"/>
    <updated>2016-04-19T05:44:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/04/19/to-infinity-and-beyond</id>
    <content type="html"><![CDATA[<p>After 2.5 years I think we can proudly say: Home Assistant is a success. I write <em>we</em> because Home Assistant is no longer a one-person side project. It has become the side project of many people who spend countless hours on making Home Assistant the best home automation software out there. To acknowledge this we migrated the repositories from being under my name to be under our own <a href="https://github.com/home-assistant/">organisation on GitHub</a>.</p>

<p>On our journey we’ve reached many noteworthy milestones:</p>

<ul>
  <li>#1 on HackerNews</li>
  <li>Featured on ProductHunt</li>
  <li>Trending repository on GitHub</li>
  <li>3000 stars on GitHub</li>
  <li>1.5 million page views on our website</li>
  <li>Speaker at OpenIoT Summit 2016</li>
</ul>

<p>All these accomplishments are a nice pat on the back but our journey is far from over. There are a lot of challenges ahead if we want to become the go to solution for home automation <em>for everyone</em>.</p>

<p>Until now the focus has been on making a platform that developers love to use. A platform that is simple but customizable. A platform that is both powerful and reliable. But most important: a platform that is local and open. Home Assistant does a great job at all these things.</p>

<p>There will be some major challenges ahead of us to target groups other than developers. Easy installation and easy configuration being the #1. I’m sure that we’ll be able to eventually achieve these goals. I can’t say yet how or when. As with everything Home Assistant, we’ll take tiny steps, gathering feedback along the way to make sure we’re solving the right problems.</p>

<p>I am confident that we will get there because we are set up for success: we have a robust architecture, high test coverage and an active community of world class developers and users. On top of that, we use Python which allows us to move fast and tackle complex problems in elegant ways. It is so easy to learn that it allows any programmer, experienced or not, to contribute support for devices and services. It’s as simple as <a href="https://home-assistant.io/developers/platform_example_sensor/#code/">filling in the blanks</a>.</p>

<p>I would like to put out a big thank you to all our contributors who make Home Assistant what it is today. It doesn’t matter if it is form of code, documentation or giving support in our <a href="https://gitter.im/home-assistant/home-assistant">chat room</a> or <a href="https://community.home-assistant.io/">forums</a>. You. all. rock.</p>

<p>Cheers to the future!</p>

<p>Paulus</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated documentation]]></title>
    <link href="https://home-assistant.io/blog/2016/04/17/updated-documentation/"/>
    <updated>2016-04-17T06:09:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/04/17/updated-documentation</id>
    <content type="html"><![CDATA[<p>One of the main complaints that we receive is something along the lines “I read that X is possible yet I am unable to find it on the website.”. This post is to announce that we have taken the first steps to improve it by revamping the <a href="https://home-assistant.io/getting-started/">getting started</a> and <a href="https://home-assistant.io/developers/">developers</a> sections. It’s still a work in progress but we now have a solid foundation to build on for the future 👍.</p>

<p>Our documentation has been going through various phases. Initially it was just the README in our GitHub repository. I discovered Jekyll and GitHub pages in December 2014 and created home-assistant.io. I more or less broke the README in 5 pages and <a href="https://home-assistant.io/blog/2014/12/18/website-launched/">called it a website</a>. Back then we had a whopping <a href="https://github.com/home-assistant/home-assistant.io/blob/86bb2df430ce267ab2123d51592d3f068ae509b5/source/components/index.markdown">11 components</a>.</p>

<p>As Home Assistant grew, so did our documentation. <a href="https://github.com/fabaff">Fabian Affolter</a> does an amazing job in making sure there is at least a documentation stub for each new feature that lands. And that’s quite a feat given our <a href="https://home-assistant.io/blog/categories/release-notes/">frequent releases</a>! But despite all the efforts, the documentation outgrew our existing documentation organisation.</p>

<p>Today it has been almost 1.5 years since we started the website. We now have <a href="https://home-assistant.io/components/">264 components and platforms</a> under our belt and have been honored with 1.5 million page views ✨. And hopefully we now also have documentation that our community deserves.</p>

<p>Finally, if you see some content that could use more clarifcation or is outdated, don’t hesitate to use the ‘Edit in GitHub’ link that is present on each page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.17: Onkyo, Panasonic, GTFS and config validation]]></title>
    <link href="https://home-assistant.io/blog/2016/04/09/onkyo-panasonic-gtfs-and-config-validation/"/>
    <updated>2016-04-09T06:10:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/04/09/onkyo-panasonic-gtfs-and-config-validation</id>
    <content type="html"><![CDATA[<p>Another awesome release ready to hit your homes. YAML can be hard for beginners and more experienced automators. So to help catch those pesky errors that sneak into your files we’ve been hard at work to introduce config validation! Especially huge thanks to <a href="https://github.com/jaharkes/">@jaharkes</a> for his hard work on this. Config validation is still in it’s early stages. More common platforms and components have been added but we didn’t do everything yet.</p>

<p>When we encounter an invalid config we will now write a warning to your logs. You can see those in the frontend by clicking on the last developer tool. We’re looking into options to make it more clear - it is a work in progress.</p>

<p>Another big thing is the addition of GTFS support. You probably don’t know it, but GTFS is the standard that public transit companies all over the world use to distribute their schedule. This means that you can now have the time of the next bus/train/etc right in your frontend.</p>

<p><img src="https://home-assistant.io/images/supported_brands/onkyo.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/loop.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/panasonic.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /></p>

<ul>
  <li>Config validation (<a href="https://github.com/balloob/">@balloob</a>, <a href="https://github.com/jaharkes/">@jaharkes</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.gtfs/">GTFS</a> support (public transit open standard) (<a href="https://github.com/robbiet480/">@robbiet480</a>)</li>
  <li>Camera: <a href="https://home-assistant.io/components/camera.rpi_camera/">Raspberry PI</a> support added (<a href="https://github.com/LucaSoldi/">@LucaSoldi</a>)</li>
  <li>Z-Wave: improved startup reliability (<a href="https://github.com/srcLurker/">@srcLurker</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.onkyo/">Onkyo receiver</a> now supported (<a href="https://github.com/danieljkemp/">@danieljkemp</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.loop_energy/">Loop Energy</a> now supported (<a href="https://github.com/pavoni/">@pavoni</a>)</li>
  <li>Thermostat: <a href="https://home-assistant.io/components/thermostat.zwave/">Z-Wave</a> now supported (<a href="https://github.com/coteyr/">@coteyr</a>, <a href="https://github.com/turbokongen/">@turbokongen</a>, <a href="https://github.com/luxus/">@luxus</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.nzbget/">NZBGet</a> now supported (<a href="https://github.com/justyns/">@justyns</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.panasonic_viera/">Panasonic Viera TV</a> now supported (<a href="https://github.com/florianholzapfel/">@florianholzapfel</a>)</li>
  <li>Thermostats: Use whole degrees if user uses Fahrenheit (<a href="https://github.com/JshWright/">@JshWright</a>)</li>
  <li>Frontend: more material love (<a href="https://github.com/balloob/">@balloob</a>)</li>
</ul>

<h3>Breaking changes</h3>

<p>As of now we are not aware of any breaking changes. However, it might be that Home Assistant will not start for you because of an invalid configuration. A common mistake that people are making is that they are still referring to <code>execute_service</code> in their script configs. This should be <code>service</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static website]]></title>
    <link href="https://home-assistant.io/blog/2016/04/07/static-website/"/>
    <updated>2016-04-07T06:28:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/04/07/static-website</id>
    <content type="html"><![CDATA[<p>The frontend of Home Assistant is served with the help of a local web server. If you have <a href="https://home-assistant.io/getting-started/devices/#customizing-devices-and-services/">customized</a> your installation you already use this functionality. The content of your folder <code>www</code> in your Home Assistant configuration directory (<code>.homeassistant</code>) is available under <code>/local</code> (eg. <a href="https://localhost:8123/local">https://localhost:8123/local</a>).</p>

<p>But there is more you can do! You can not only host images for customization there but HTML files or even web applications including CSS and Javascript.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2016-04-display/ha-display.png" />
</p>

<!--more-->

<p>In the past the buzz word “Smart mirror” was used a couple of times in our <a href="https://gitter.im/balloob/home-assistant">chatroom</a> and even made it into the <a href="https://github.com/home-assistant/home-assistant/issues/1392">issue tracker</a>. The existing solutions (<a href="http://docs.smart-mirror.io/">Smart mirror</a>, <a href="http://michaelteeuw.nl/tagged/magicmirror">MagicMirror</a>, and <a href="https://github.com/HannahMitt/HomeMirror">HomeMirror</a>) seems to be overkill if you already have Home Assistant running somewhere in your house or apartment. Why not simple display a web page served by Home Assistant on the tablet? No app and no Raspberry Pi running in the background.</p>

<p>There are plenty of ways to achieve this…<a href="https://home-assistant.io/developers/rest_api/">RESTful API</a>, <a href="https://home-assistant.io/developers/python_api/">Python API</a>, or one of the <a href="https://home-assistant.io/components/#history/">history components</a>. If it is to be a web page I’m using the <a href="https://home-assistant.io/components/mqtt_eventstream/">MQTT Eventstream component</a> and <a href="http://git.eclipse.org/c/paho/org.eclipse.paho.mqtt.javascript.git/tree/src">mqttws31.js</a>.</p>

<p>The <a href="https://pypi.python.org/pypi/hbmqtt">HBMQTT</a> broker provides websockets support for MQTT and mqttws31.js included in web page gives you access to the MQTT messages. It’s a matter of minutes. OK, it took a little longer because I’m not a Javascript guy to create the software part that will show details about your environment. The source is available at <a href="https://github.com/fabaff/home-assistant-display">https://github.com/fabaff/home-assistant-display</a> and the screenshot above shows the result. I guess that every person who is familiar with Javascript would be able to reduce the amount of code and to make it more flexible. Well, it’s a only prototype and showcase to include an image in this blog post.</p>

<p>I hope that this little article could give you an idea of extending Home Assistant in an unconventional way.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your hub should be local and open]]></title>
    <link href="https://home-assistant.io/blog/2016/04/05/your-hub-should-be-local-and-open/"/>
    <updated>2016-04-05T04:11:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/04/05/your-hub-should-be-local-and-open</id>
    <content type="html"><![CDATA[<p>Today the news spread that Google will be <a href="https://medium.com/@arlogilbert/the-time-that-tony-fadell-sold-me-a-container-of-hummus-cb0941c762c1#.rmppks86a">shutting down the Revolv hubs</a>. And shutting down here doesn’t mean they stop selling or supporting them - no, they are sending an update to each hub to turn your perfectly fine home automation hub into a useless piece of plastic. The fact that this seemed like a good idea by Google astonishes me. If anything, they should have gone the same route as <a href="https://discuss.ninjablocks.com/t/ninja-blocks-whats-been-happening-whats-happening-next/3608">ninjasphere</a>: open it all up and let people decide on the fate of their <em>own</em> hub.</p>

<p>I’ve said it <a href="https://home-assistant.io/blog/2016/01/19/perfect-home-automation/#your-system-should-run-at-home-not-in-the-cloud/">before</a> but I’ll repeat it again:</p>

<blockquote>
  <p>The cloud should be treated as an extension to your smart home instead of running it.</p>
</blockquote>

<p>Your hub should not be affected when your internet breaks down or the company that sold you your hub goes out of business. It should work locally so that it can continue to work even long after the vendor goes out of business or decides to kill it. Preferably, your hub should also be open so that the community can take over development after the vendor stops caring.</p>

<p>Unless you can afford losing a product here and there, be cautious when buying IoT products that depend on the cloud from companies that are not well established. The chances are high that they go bankrupt or get acquired and closed. This however is easier said than done as <a href="http://www.gartner.com/newsroom/id/2869521">Gartner</a> predicts that by 2017, 50 percent of IoT solutions will originate in startups that are less than three years old.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.16: Embedded MQTT broker, Uber, Yamaha receivers and Growl]]></title>
    <link href="https://home-assistant.io/blog/2016/03/26/embedded-mqtt-broker-uber-yamaha-growl/"/>
    <updated>2016-03-26T07:10:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/03/26/embedded-mqtt-broker-uber-yamaha-growl</id>
    <content type="html"><![CDATA[<p>Party people, 0.16 is here! The big thing with this release is that we have completely removed the barrier to get started by MQTT by being able to launch an embedded MQTT server: <a href="https://github.com/beerfactory/hbmqtt">hbMQTT</a>. Just add <code>mqtt:</code> to your config and a broker is launched and connected with Home Assistant. See the <a href="https://home-assistant.io/components/mqtt/#use-the-embedded-broker/">documentation</a> for more info.</p>

<p>Further in this release a bunch of cool new stuff, bug fixes and rewrites for the Vera and Tellstick component (see breaking changes section at bottom for this!).</p>

<p>Rock on.</p>

<p><img src="https://home-assistant.io/images/supported_brands/message_bird.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/pulseaudio.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/uber.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/gntp.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="100" /><img src="https://home-assistant.io/images/supported_brands/yamaha.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /></p>

<ul>
  <li>Device Tracker - <a href="https://home-assistant.io/components/device_tracker.owntracks/">OwnTracks</a>: Allow entry into passive zones using iBeacons (<a href="https://github.com/pavoni">@pavoni</a>)</li>
  <li>Tellstick: rewrite to <a href="https://home-assistant.io/components/tellstick/">component</a> to address concurrency issues (<a href="https://github.com/stefan-jonasson">@stefan-jonasson</a>)</li>
  <li>Z-Wave: add <a href="https://home-assistant.io/components/zwave/#services/">services</a> to heal and soft reset network (<a href="https://github.com/srcLurker">@srcLurker</a>)</li>
  <li>New component <a href="https://home-assistant.io/components/input_slider/">input_slider</a> added (<a href="https://github.com/persandstrom">@persandstrom</a>)</li>
  <li>Light - <a href="https://home-assistant.io/components/light.hue/">Hue</a>: Option added to ignore unreachable property (<a href="https://github.com/maddox">@maddox</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.message_bird/">MessageBird</a> support added (<a href="https://github.com/florianholzapfel">@florianholzapfel</a>)</li>
  <li>HTTP: Failed login attempts are now logged (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>Vera: rewrite to <a href="https://home-assistant.io/components/vera/">component</a> to simplify code and organize for reusability (<a href="https://github.com/pavoni">@pavoni</a>)</li>
  <li>Discovery: support for Squeezebox (Logitech media) server added (<a href="https://github.com/jaharkes">@jaharkes</a>)</li>
  <li>Discovery: fix uPNP discovery crashing some routers (<a href="https://github.com/jaharkes">@jaharkes</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.wake_on_lan/">Wake on LAN</a> platform added (<a href="https://github.com/joopert">@joopert</a>)</li>
  <li>Services for thermostats, notify and media player will now validate passed in parameters (<a href="https://github.com/MartinHjelmare">@MartinHjelmare</a>)</li>
  <li>Switch - <a href="https://home-assistant.io/components/switch.arduino/">Arduino</a>: support for default state and negate port functionality (<a href="https://github.com/tilutza">@tilutza</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.pulseaudio_loopback/">PulseAudio loopback</a> now supported (<a href="https://github.com/Cinntax">@Cinntax</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.uber/">Uber</a> now supported (<a href="https://github.com/robbiet480">@robbiet480</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.gntp/">Growl (GNTP)</a> now supported (<a href="https://github.com/robbiet480">@robbiet480</a>)</li>
  <li>Media Player: <a href="https://home-assistant.io/components/media_player.yamaha/">Yamaha receivers</a> now supported (<a href="https://github.com/aoakeson">@aoakeson</a>)</li>
</ul>

<h3>Breaking changes</h3>
<ul>
  <li>
    <p>Automation: support for old deprecated config has been removed</p>
  </li>
  <li>
    <p>Tellstick configuration has changed</p>
  </li>
</ul>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">tellstick</span>:
  <span class="key">signal_repetitions</span>: <span class="string"><span class="content">X</span></span>
</pre></div>
</div>
</div>

<ul>
  <li>Vera configuration has changed</li>
</ul>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">vera</span>:
  <span class="key">vera_controller_url</span>: <span class="string"><span class="content">http://192.168.1.161:3480/</span></span>
  <span class="comment"># Optional to exclude devices - this is a list of vera device ids</span>
  <span class="key">exclude</span>: <span class="string"><span class="content">[ 13, 14, 16, 20, 23, 72, 73, 74, 75, 76, 77, 78, 88, 89, 99]</span></span>
  <span class="comment"># Optional to import switches as lights - this is a list of vera device ids</span>
  <span class="key">lights</span>: <span class="string"><span class="content">[15, 17, 19, 21, 22, 24, 26, 43, 64, 70, 87]</span></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.15: Unforked Open Z-Wave, templated service calls, extended scene support and PEP257 compliance.]]></title>
    <link href="https://home-assistant.io/blog/2016/03/12/z-wave-pep257-templated-service-calls/"/>
    <updated>2016-03-12T18:55:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/03/12/z-wave-pep257-templated-service-calls</id>
    <content type="html"><![CDATA[<p>Two weeks has past so here is 0.15! We have been focussing a lot on quality. Making sure the system is more stable and reliable. I usually try to highlight one cool thing in the release notes but this release has 4 exciting announcements!</p>

<ul>
  <li><a href="https://github.com/fabaff">@fabaff</a> has upgraded the codebase to follow the PEP257 documentation standard.</li>
  <li><a href="https://github.com/PartOfTheThing">@partofthething</a> has migrated us to use the main Python Open Z-Wave library instead of our forked version.</li>
  <li>To make our automations more powerful, <a href="https://github.com/persandstrom">@persandstrom</a> added the option to use templates to dynamically create service calls. This works for automation, Alexa, universal media player, template switch. <a href="https://home-assistant.io/topics/service_calls/#use-templates-to-decide-which-service-to-call/">Learn more.</a></li>
  <li><a href="https://github.com/MartinHjelmare">@MartinHjelmare</a> has upgraded our scene support to now support all built-in services and components.</li>
</ul>

<p>Besides bug fixes, this release also brings:</p>

<p><img src="https://home-assistant.io/images/supported_brands/hunter-douglas-powerview.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /></p>

<ul>
  <li>Scene: Converted to a platform based component (<a href="https://github.com/sander76">@sander76</a>)</li>
  <li>Scene: <a href="https://home-assistant.io/components/scene.hunterdouglas_powerview/">Hunter Douglas Powerview</a> now supported (<a href="https://github.com/sander76">@sander76</a>)</li>
  <li>Lock: <a href="https://home-assistant.io/components/lock.mqtt/">MQTT</a> platform added (<a href="https://github.com/fabaff">@fabaff</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.owntracks/">OwnTracks</a> will allow filtering inaccurate GPS locations (<a href="https://github.com/HydrelioxGitHub">@HydrelioxGitHub</a>)</li>
  <li>Binary Sensor: Wemo Motion now supported (<a href="https://github.com/pavoni">@pavoni</a>, <a href="https://github.com/ryanlaux">@ryanlaux</a>)</li>
</ul>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="comment"># Example using templates for service and data in service call.</span>
<span class="comment"># Works for automation, Alexa, universal media player, template switch.</span>
<span class="key">automation</span>:
  - <span class="string"><span class="content">trigger:</span><span class="content">
      - platform: state
        entity_id: switch.bathroom</span></span>
    <span class="key">action</span>:
      <span class="key">service_template</span>: <span class="string"><span class="delimiter">&gt;</span><span class="content">
        {% if is_state('switch.bathroom', 'on') %}
          switch.turn_on
        {% else %}
          switch.turn_off
        {% endif %}</span></span>
      <span class="key">data_template</span>:
        <span class="key">entity_id</span>: <span class="string"><span class="content">switch.{{ states('input_select.is') }}</span></span>
</pre></div>
</div>
</div>

<h3>Breaking Changes</h3>

<ul>
  <li>Media Player: Attributes to call service play_media has been renamed to<br />
<code>media_content_type</code> and <code>media_content_id</code>, to match the corresponding media<br />
player state attributes. This change affects automations, scripts and scenes.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.14: Steam, D-Link smart plugs and Neurio Energy Sensors]]></title>
    <link href="https://home-assistant.io/blog/2016/02/27/steam-d-link-smart-plugs-and-neurio-energy-sensors/"/>
    <updated>2016-02-27T22:15:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/27/steam-d-link-smart-plugs-and-neurio-energy-sensors</id>
    <content type="html"><![CDATA[<p>It’s been another two weeks which means it’s time for release: 0.14!</p>

<p><img src="https://home-assistant.io/images/supported_brands/neurio.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/dlink.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/steam.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="90" /></p>

<ul>
  <li>Notify: <a href="https://home-assistant.io/components/notify.command_line/">Command line platform</a> added (<a href="https://github.com/stefan-jonasson">@stefan-jonasson</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.verisure/">Verisure</a> mousedetectors now supported (<a href="https://github.com/turbokongen">@turbokongen</a>)</li>
  <li>Core: Entities can now expose if they assume their state representation is correct (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.tcp/">TCP</a> platform added (<a href="https://github.com/flyte">@flyte</a>)</li>
  <li>Binary Sensor: <a href="https://home-assistant.io/components/binary_sensor.tcp/">TCP</a> platform added (<a href="https://github.com/flyte">@flyte</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.neurio_energy/">Neurio energy sensor</a> now supported (<a href="https://github.com/infamy">@infamy</a>)</li>
  <li>Binary Sensor: <a href="https://home-assistant.io/components/binary_sensor.nx584/">nx584</a> support added (<a href="https://github.com/kk7ds">@kk7ds</a>)</li>
  <li>Improve and clarify CI testing (<a href="https://github.com/sdague">@sdague</a>)</li>
  <li>Automation: State <a href="https://home-assistant.io/getting-started/automation-trigger/#state-trigger/">triggers</a> and <a href="https://home-assistant.io/getting-started/automation-condition/#state-condition/">conditions</a> now takes optional <code>for</code> config parameter to only trigger when a state hasn’t changed for a certain period of time (<a href="https://github.com/pavoni">@pavoni</a>, <a href="https://github.com/stefan-jonasson">@stefan-jonasson</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.nest/">Nest</a> weather data added (<a href="https://github.com/w1ll1am23">@w1ll1am23</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.unifi/">Ubiquiti Unifi</a> now supported (<a href="https://github.com/kk7ds">@kk7ds</a>)</li>
  <li>Binary Sensor: <a href="https://home-assistant.io/components/binary_sensor.mysensors/">MySensors</a> now supported (<a href="https://github.com/MartinHjelmare">@MartinHjelmare</a>)</li>
  <li>Binary Sensor: <a href="https://home-assistant.io/components/binary_sensor.bloomsky/">Bloomsky</a> now supported (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Binary Sensor: <a href="https://home-assistant.io/components/binary_sensor.zwave/">Z-Wave</a> now supported (<a href="https://github.com/tpatja">@tpatja</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/switch.dlink/">D-Link smart plugs</a> now supported (<a href="https://github.com/LinuxChristian">@LinuxChristian</a>)</li>
  <li>Script: Toggle support added (<a href="https://github.com/Andythigpen">@Andythigpen</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.wemo/">Wemo</a> now supported (<a href="https://github.com/jaharkes">@jaharkes</a>)</li>
  <li>Rollershutter: <a href="https://home-assistant.io/components/rollershutter.command_line/">Command line platform</a> added (<a href="https://github.com/t30">@t30</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.steam_online/">Steam</a> now supported (<a href="https://github.com/GreenTurtwig">@GreenTurtwig</a>)</li>
  <li>Binary Sensor: <a href="https://home-assistant.io/components/binary_sensor.wink/">Wink</a> now supported (<a href="https://github.com/w1ll1am23">@w1ll1am23</a>)</li>
  <li>Demo has been updated (<a href="https://github.com/kfgoode">@kfgoode</a>)</li>
  <li>Frontend: new UI for camera’s (<a href="https://github.com/balloob">@balloob</a>)</li>
</ul>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2016-02-release-14/screenshot-webcam.png" />
  Camera feeds are now directly embedded in the frontend.
</p>

<h3>Backwards incompatible changes</h3>
<ul>
  <li>Component: Simple Alarm has been removed. Still available in <a href="https://home-assistant.io/cookbook/python_component_simple_alarm/">the cookbook</a>.</li>
  <li>Script: Turning on a <a href="https://home-assistant.io/components/script/">script</a> that is already on is now a no-op instead of skipping current delay.</li>
  <li>Wemo switches now have to be set up via the main <a href="https://home-assistant.io/components/wemo/">Wemo component</a></li>
  <li>Command line platforms for <a href="https://home-assistant.io/components/switch.command_line/">switch</a>, <a href="https://home-assistant.io/components/sensor.command_line/">sensor</a> and <a href="https://home-assistant.io/components/binary_sensor.command_line/">binary_sensor</a> have been renamed to <code>command_line</code>.</li>
  <li>The rfxtrx sensors entity ids will incur a one time change to move to a stable format. See <a href="https://home-assistant.io/components/sensor.rfxtrx/">the docs</a> for more details.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Community Highlights]]></title>
    <link href="https://home-assistant.io/blog/2016/02/20/community-highlights/"/>
    <updated>2016-02-20T09:06:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/20/community-highlights</id>
    <content type="html"><![CDATA[<p>Home Assistant land has been busy and a lot of people have been creating awesome stuff. We’ve added <a href="https://home-assistant.io/cookbook/">a cookbook section</a> to the website full of examples how you can automate different things. Make sure you take a look and share your own recipes too!</p>

<h3><a class="title-link" name="home-automation-demo-by-part-of-the-thing" href="#home-automation-demo-by-part-of-the-thing"></a> Home automation demo by Part of the Thing</h3>

<div class="videoWrapper">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/Mc_29EC3aZw" frameborder="0" allowfullscreen=""></iframe>
</div>

<h3><a class="title-link" name="haaska---alexa-skill-adapter-for-home-assistant" href="#haaska---alexa-skill-adapter-for-home-assistant"></a> Haaska - Alexa Skill Adapter for Home Assistant</h3>

<p>Haaska allows you to control lights, switches, and scenes exposed by your Home Assistant instance using an Amazon Echo. This is different from our own <a href="https://home-assistant.io/components/alexa/">Alexa</a> component because it will teach the Amazon Echo directly about the devices instead of teaching it to talk to Home Assistant. It will not allow you to use custom sentences but it will allow you to skip the ‘Ask Home Assistant’ part when giving commands:</p>

<ul>
  <li>“Alexa, set kitchen to twenty percent”</li>
  <li>“Alexa, turn on evening scene”</li>
  <li>“Alexa, turn off bedroom light”</li>
</ul>

<p><a href="https://github.com/auchter/haaska">Haaska on GitHub</a></p>

<h3><a class="title-link" name="integrating-home-assistant-with-homekit" href="#integrating-home-assistant-with-homekit"></a> Integrating Home Assistant with HomeKit</h3>

<p>Contributor Maddox has created a plugin for HomeBridge, an open-source HomeKit bridge. This will allow you to control your home using Siri on your Apple devices. HomeBridge has recently restructured so you’ll have to install the plugin separately with the homebridge-homeassistant npm package.</p>

<p>Example config.json entry to load Home Assistant:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key"><span class="delimiter">&quot;</span><span class="content">platforms</span><span class="delimiter">&quot;</span></span>: [
    {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">platform</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">HomeAssistant</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">HomeAssistant</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">host</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">http://192.168.1.50:8123</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">password</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">xxx</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">supported_types</span><span class="delimiter">&quot;</span></span>: [<span class="string"><span class="delimiter">&quot;</span><span class="content">light</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">switch</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">media_player</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">scene</span><span class="delimiter">&quot;</span></span>]
    }
]
</pre></div>
</div>
</div>

<p><a href="https://github.com/nfarina/homebridge">HomeBridge on GitHub</a><br />
<a href="https://github.com/maddox/homebridge-homeassistant">HomeBridge Home Assistant Plugin</a></p>

<h3><a class="title-link" name="custom-alarm-system-with-home-assistant" href="#custom-alarm-system-with-home-assistant"></a> Custom alarm system with Home Assistant</h3>

<p>User thaijames <a href="https://community.home-assistant.io/t/controlling-house-alarm-from-ha/67">describes in the Home Assistant forums</a> how he has created his own NFC-based alarm system using Home Assistant, DIY components and Garfield dolls.</p>

<p class="img">
<img src="https://home-assistant.io/images/blog/2016-02-community-highlights/garfield-nfc.png" />
Hold your NFC tag against the belly of Garfield to unlock the alarm.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-room audio with Snapcast, Mopidy, and Home Assistant]]></title>
    <link href="https://home-assistant.io/blog/2016/02/18/multi-room-audio-with-snapcast/"/>
    <updated>2016-02-18T05:10:56+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/18/multi-room-audio-with-snapcast</id>
    <content type="html"><![CDATA[<p>Would you like to listen to music in every room in your home, controlled from one source? Then multi-room audio is for you.</p>

<p>Multi-room audio can be achieved by having a computer attached to speakers in every room. On each computer, services run to play and/or control the audio. With this DIY approach, the kind of computer and speakers is very much up to you. It could be your desktop computer with attached powered speakers, your HTPC hooked up to your TV and receiver, a Raspberry Pi with Amp or DAC, or even an Android device.</p>

<p>You’ll need two key software packages, besides Home Assistant. The first is <a href="https://www.mopidy.com/">Mopidy</a>, a music server that can play local files, or connect to streaming music services like Spotify. The second is <a href="https://github.com/badaix/snapcast/">Snapcast</a>, which enables synchronized audio streaming across your network. Both can be integrated into Home Assistant. Each room audio device will run an instance of the Snapcast client, and optionally a Mopidy instance. Your server will run a special instance of Mopidy and the Snapcast server.</p>

<p>Finally, you also need a player to control Mopidy. Any MPD-compatible player will work, and there are several <a href="https://docs.mopidy.com/en/latest/ext/web/#ext-web">Mopidy-only web-based options</a> available. On Android, <a href="https://play.google.com/store/apps/details?id=se.anil.remotedy">Remotedy</a> is particularly nice since you can access multiple Mopidy instances in one place.</p>

<p>Home Assistant will provide device status, and volume control for each room. If you want to play music in all your rooms (on all your clients), access the server instance of Mopidy. If you want to play music only in a specific room, access that specific Mopidy instance. If you’re using a web UI for Mopidy, you can add links to each instance in Home Assistant with the <a href="https://home-assistant.io/components/weblink/">weblink</a> component.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2016-02-snapcast/diagram.png" />
</p>

<!--more-->

<h2>Staging</h2>

<ul>
  <li><a href="https://www.mopidy.com/">Install</a> Mopidy (2.0.0 or greater)</li>
  <li><a href="https://github.com/badaix/snapcast/releases/">Download</a> and <a href="https://github.com/badaix/snapcast/tree/v0.5.0-beta-1#installation">Install</a> Snapcast (0.5.0 or greater)</li>
</ul>

<h2>Configure Mopidy</h2>

<p>Mopidy can be run with multiple configuration files, each extending the previous file. This is helpful when we’re running multiple instances with varying functionality.</p>

<h3>core.conf</h3>
<p>The core configuration is shared between all instances:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[mpd]
hostname = ::

[http]
hostname = ::

[audio]
output = alsasink

[spotify]
username = &lt;redacted&gt;
password = &lt;redacted&gt;
</pre></div>
</div>
</div>

<h3>local.conf</h3>
<p>Add the local configuration on computers that have local media files:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[local]
media_dir = &lt;your/music/here&gt;
</pre></div>
</div>
</div>

<h3>snapcast.conf</h3>
<p>Finally, the Mopidy instance that connects with Snapcast needs special configuration. Run on a different port to avoid conflicts if you have a second Mopidy instance running on your computer. The audio output is sent to a named pipe - Snapcast will read from there. Note that you may have to adjust the audio output attribute depending on your system and audio sources.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>[mpd]
hostname = ::
port = 6601

[http]
hostname = ::
port = 6681

[audio]
output = audioresample ! audio/x-raw,rate=48000,channels=2,format=S16LE ! audioconvert ! wavenc ! filesink location=/tmp/snapfifo
</pre></div>
</div>
</div>

<h2>Run Mopidy</h2>

<p>To run a room-specific instance:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ mopidy --config $CONF_DIR/core.conf
</pre></div>
</div>
</div>

<p>To run a room-specific instance with local media:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ mopidy --config $CONF_DIR/core.conf:$CONF_DIR/local.conf
</pre></div>
</div>
</div>

<p>To run the special Snapcast-connected instance (with local media):</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ mopidy --config $CONF_DIR/core.conf:$CONF_DIR/local.conf:$CONF_DIR/snapcast.conf
</pre></div>
</div>
</div>

<h2>Run Snapcast</h2>

<p>Start the <code>snapserver</code> on the same server running Mopidy with the snapcast configuration.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ snapserver   # or use systemd
</pre></div>
</div>
</div>

<p>Start the <code>snapclient</code> on computers that will be playing audio.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ snapclient   # or use systemd, add -h &lt;server host&gt; if necessary
</pre></div>
</div>
</div>

<h2>Configure Snapcast</h2>

<p>There are a number of snapcast configuration options, but the one relevant to Home Assistant is the client names. You can set them in the snapserver configuration file, by default located at <code>~/.config/Snapcast/settings.json</code>. Only edit this file while the <code>snapserver</code> is not running. Modify the <code>name</code> JSON value to your liking - this is how the client will be named in Home Assistant.</p>

<h2>Configure Home Assistant</h2>

<p>Use the <a href="https://home-assistant.io/components/media_player.mpd/">mpd</a> and <a href="https://home-assistant.io/components/media_player.snapcast/">snapcast</a> components. Optionally, use <a href="https://home-assistant.io/components/weblink/">weblink</a> to provide easy access to a Mopidy web UI.</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">media_player</span>:
- <span class="string"><span class="content">platform: snapcast</span></span>
  <span class="key">host</span>: <span class="string"><span class="content">xxxxx</span></span>
- <span class="string"><span class="content">platform: mpd</span></span>
  <span class="key">server</span>: <span class="string"><span class="content">xxxx</span></span>
  <span class="key">location</span>: <span class="string"><span class="content">Multi-Room Controller</span></span>
- <span class="string"><span class="content">platform: mpd</span></span>
  <span class="key">server</span>: <span class="string"><span class="content">xxx</span></span>
  <span class="key">location</span>: <span class="string"><span class="content">Room 1</span></span>

<span class="key">weblink</span>:
  <span class="key">entities</span>:
  - <span class="string"><span class="content">name: Multi-Room Player</span></span>
    <span class="key">url</span>: <span class="string"><span class="content">xxxx</span></span>
</pre></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.13: Speedtest.net, Bloomsky, Splunk and Garage Doors]]></title>
    <link href="https://home-assistant.io/blog/2016/02/13/speedtest-bloomsky-splunk-and-garage-doors/"/>
    <updated>2016-02-13T06:15:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/13/speedtest-bloomsky-splunk-and-garage-doors</id>
    <content type="html"><![CDATA[<p>The focus of 0.13 was on test coverage, big cheers to <a href="https://github.com/rmkraus/">@rmkraus</a> for his hard work on this. I’m proud to announce that we’ve hit the 90% test coverage of the core + important components. A big milestone for the project.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2016-02-release-13/input_select__input_boolean__weblink.png" />
  Examples of the new <a href="https://home-assistant.io/components/input_select/">input_select</a> and <a href="https://home-assistant.io/components/weblink/">weblink</a> components.
</p>

<p>Not only did we gain a lot of test coverage, we also attracted a lot of new developers that contributed a variety of components and platforms:</p>

<p><img src="https://home-assistant.io/images/supported_brands/speedtest.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="70" /><img src="https://home-assistant.io/images/supported_brands/apcupsd.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/splunk.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/bloomsky.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/ubiquiti.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/networx.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/samsung.png" style="clear: right; margin-left: 5px; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /></p>

<ul>
  <li>Core: Add service to restart Home Assistant (<a href="https://github.com/rmkraus/">@rmkraus</a>)</li>
  <li>Core: Allow device to report as unavailable (<a href="https://github.com/MartinHjelmare/">@MartinHjelmare</a>)</li>
  <li>Core: Allow overriding polling interval in platforms and <a href="https://home-assistant.io/cookbook/customize_polling_interval/">via config</a> (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Frontend: support for a <a href="https://home-assistant.io/components/group/">default view</a> have been added to replace the show all view (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Component: Added <a href="https://home-assistant.io/components/apcupsd/">apcupsd</a> component (<a href="https://github.com/flyte/">@flyte</a>)</li>
  <li>Component: Added component to log values to <a href="https://home-assistant.io/components/splunk/">Splunk</a> (<a href="https://github.com/miniconfig/">@miniconfig</a>)</li>
  <li>Component: Added <a href="https://home-assistant.io/components/garage_door/">garage door</a> component including <a href="https://home-assistant.io/components/garage_door.wink/">Wink</a> support (<a href="https://github.com/xrolfex/">@xrolfex</a>)</li>
  <li>Component: Added <a href="https://home-assistant.io/components/input_select/">input_select</a> component (<a href="https://github.com/balloob/">@balloob</a>)</li>
  <li>Component: Added <a href="https://home-assistant.io/components/proximity/">proximity</a> component to track people closest to a location (<a href="https://github.com/nickwaring/">@nickwaring</a>, <a href="https://github.com/Bart274/">@Bart274</a> )</li>
  <li>Component: Added support for <a href="https://home-assistant.io/components/bloomsky/">Bloomsky Weather Station</a> (<a href="https://github.com/haraldnagel/">@haraldnagel</a>)</li>
  <li>Component: Added support for pushing stats to <a href="https://home-assistant.io/components/graphite/">graphite</a> (<a href="https://github.com/kk7ds/">@kk7ds</a>)</li>
  <li>Component: Added support for <a href="https://home-assistant.io/components/scsgate/">SCSGate</a> devices (<a href="https://github.com/flavio/">@flavio</a>)</li>
  <li>Component: Added <a href="https://home-assistant.io/components/weblink/">weblink</a> component to link to other pages (<a href="https://github.com/MagnusKnutas/">@MagnusKnutas</a>)</li>
  <li>Component: Support for Ubiquiti mFI <a href="https://home-assistant.io/components/sensor.mfi/">sensors</a> and <a href="https://home-assistant.io/components/switch.mfi/">switchable devices</a> added (<a href="https://github.com/kk7ds/">@kk7ds</a>)</li>
  <li>Alarm control panel: Added <a href="https://home-assistant.io/components/alarm_control_panel.nx584/">Caddx/GE/Interlogix NetworX</a> support (<a href="https://github.com/kk7ds/">@kk7ds</a>)</li>
  <li>Camera: <a href="https://home-assistant.io/components/camera.mjpeg/">MJPEG</a> camera’s will now show real stream instead of a 2fps stream (<a href="https://github.com/stjohnjohnson/">@stjohnjohnson</a>)</li>
  <li>Camera: Added <a href="https://home-assistant.io/components/camera.uvc/">Unifi video cameras</a> support (<a href="https://github.com/kk7ds/">@kk7ds</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.aruba/">Aruba</a> platform now uses SSH instead of telnet (<a href="https://github.com/carlosmgr/">@carlosmgr</a>)</li>
  <li>History: Show correct graphs for thermostats (<a href="https://github.com/sdague/">@sdague</a>)</li>
  <li>Light: Added <a href="https://home-assistant.io/components/light.mysensors/">MySensors</a> support (<a href="https://github.com/MartinHjelmare/">@MartinHjelmare</a>)</li>
  <li>Lock: Added <a href="https://home-assistant.io/components/lock.verisure/">Verisure</a> support (<a href="https://github.com/turbokongen/">@turbokongen</a>)</li>
  <li>Media Player: Added <a href="https://home-assistant.io/components/media_player.samsungtv/">Samsung TV</a> support (<a href="https://github.com/stefan-jonasson/">@stefan-jonasson</a>)</li>
  <li>Media Player: Added <a href="https://home-assistant.io/components/media_player.snapcast/">Snapcast</a> support (<a href="https://github.com/happyleavesaoc/">@happyleavesaoc</a>)</li>
  <li>MQTT: Allow using templates in <a href="https://home-assistant.io/components/mqtt/#publish-service/">publish service</a> (<a href="https://github.com/flyte/">@flyte</a>)</li>
  <li>Notify: Added <a href="https://home-assistant.io/components/notify.rest/">REST</a> support (<a href="https://github.com/Theb-1/">@Theb-1</a>)</li>
  <li>Sensor: Added <a href="https://home-assistant.io/components/sensor.speedtest/">Speedtest.net</a> support (<a href="https://github.com/nkgilley/">@nkgilley</a>)</li>
  <li>Switch: Added <a href="https://home-assistant.io/components/switch.template/">template</a> platform (<a href="https://github.com/pavoni/">@pavoni</a>)</li>
  <li>Thermostat: Support for <a href="https://home-assistant.io/components/thermostat.honeywell/">Honeywell</a> in the US added (<a href="https://github.com/kk7ds/">@kk7ds</a>)</li>
  <li>Z-Wave: Allow <a href="https://home-assistant.io/components/zwave/#configuration/">configuring polling</a> and <a href="https://home-assistant.io/components/zwave/#events/">support scenes</a> (<a href="https://github.com/lukas-hetzenecker/">@lukas-hetzenecker</a>)</li>
  <li>Bug fixes and improvements by <a href="https://github.com/persandstrom/">@persandstrom</a>, <a href="https://github.com/fabaff/">@fabaff</a>, <a href="https://github.com/balloob/">@balloob</a>, <a href="https://github.com/pavoni/">@pavoni</a>, <a href="https://github.com/philipbl/">@philipbl</a>, <a href="https://github.com/MartinHjelmare/">@MartinHjelmare</a>, <a href="https://github.com/rmkraus/">@rmkraus</a>, <a href="https://github.com/molobrakos/">@molobrakos</a>, <a href="https://github.com/lukas-hetzenecker/">@lukas-hetzenecker</a>, <a href="https://github.com/TangoAlpha/">@TangoAlpha</a>, <a href="https://github.com/deisi/">@deisi</a>, <a href="https://github.com/Danielhiversen/">@Danielhiversen</a>, <a href="https://github.com/roqeer/">@roqeer</a>, <a href="https://github.com/jaharkes/">@jaharkes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classifying the Internet of Things]]></title>
    <link href="https://home-assistant.io/blog/2016/02/12/classifying-the-internet-of-things/"/>
    <updated>2016-02-12T06:31:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/12/classifying-the-internet-of-things</id>
    <content type="html"><![CDATA[<p>The core of home automation is knowing what’s going on. The faster we know about a state change, the better we can serve the user. If you want to have your lights to turn on when you arrive at home, it doesn’t help if it only knows about it after you’ve already opened the door and manually (!!) turned on the light.</p>

<p>Each smart device consists of the ‘normal’ device and the piece that makes it ‘smart’: the connectivity. The connectivity part of a device can consists of either control, state or both.</p>

<p>State describes what a device is up to right now. For example, a light can be on with a red color and a medium brightness.</p>

<p>Control is about controlling the smart device by sending commands via an API. These commands can vary from configuring how a device works till mimicking how a user would interact with a device. A media player can allow skipping to the next track and a sensor could allow to configure its sensitivity or polling interval.</p>

<p>The Home Assistant APIs are setup to be as convenient as possible. However, a network is always as weak as it’s weakest link. In our case these are the integrations. Take for example controlling a light that does not report state. The only state Home Assistant can report on after sending a command is the assumed state: what do we expect the state of the light to be if the command worked.</p>

<p>We want our users to get the best home automation experience out there and this starts with making sure they have devices that work well with Home Assistant. That’s why we will start applying the following classifiers to our integrations:</p>

<p><a name="classifiers"></a></p>
<table>
  <tr>
    <th colspan="2">Classifier</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><i class="icon-adjust"></i></td>
    <td style="white-space: nowrap;">Assumed State</td>
    <td>
      We are unable to get the state of the device. Best we can do is to assume the state based on our last command.
    </td>
  </tr>

  <tr>
    <td><i class="icon-cloud-upload"></i></td>
    <td>Cloud Polling</td>
    <td>
      Integration of this device happens via the cloud and requires an active internet connection. Polling the state means that an update might be noticed later.
    </td>
  </tr>

  <tr>
    <td><i class="icon-cloud-download"></i></td>
    <td>Cloud Push</td>
    <td>
      Integration of this device happens via the cloud and requires an active internet connection. Home Assistant will be notified as soon as a new state is available.
    </td>
  </tr>

  <tr>
    <td><i class="icon-download-alt"></i></td>
    <td>Local Polling</td>
    <td>
      Offers direct communication with device. Polling the state means that an update might be noticed later.
    </td>
  </tr>

  <tr>
    <td><i class="icon-upload-alt"></i></td>
    <td>Local Push</td>
    <td>
      Offers direct communication with device. Home Assistant will be notified as soon as a new state is available.
    </td>
  </tr>
</table>

<p>The background to how we got to these classifiers can be read after the break.<br />
<!--more--></p>

<h2><a class="title-link" name="state" href="#state"></a> State</h2>

<p>How state is communicated can be broken down into 5 categories. They are not mutually exclusive - a device state can be available both via the cloud and local connectivity.</p>

<h3><a class="title-link" name="no-state-available" href="#no-state-available"></a> No state available</h3>
<p>These are devices that do not have the capabilities to make their state available. They only allow to be controlled. For example, devices with infrared remote controls like TVs and ACs. You can press the turn on button on the remote but can only assume that your command was received and executed successfully. The device might not be powered or something is blocking the infrared receiver.</p>

<p>Home automation will have to approach such devices based on the assumption that it’s commands are received correctly: using optimistic updates. This means that after sending a command it will update the state of the device as if the command was received successfully.</p>

<p>Advantages:</p>

<ul>
  <li>None</li>
</ul>

<p>Disadvantages:</p>

<ul>
  <li>Home automation will assume the wrong state if the the command is not received correctly or if the device is controlled in any other way outside of the home automation system.</li>
</ul>

<h3><a class="title-link" name="polling-the-cloud" href="#polling-the-cloud"></a> Polling the cloud</h3>
<p>These are devices that will only report their state to their own cloud backend. The cloud backend will allow reading the state but will not notify when a new state has arrived. This requires the home automation to check frequently if the state has been updated.</p>

<p>Advantages:</p>

<ul>
  <li>Able to control devices while at home or away.</li>
  <li>Cloud has access to more computing power to mine the device data to suggest optimizations to the user.</li>
</ul>

<p>Disadvantages:</p>

<ul>
  <li>It doesn’t work if the internet is down or the company stops support.</li>
  <li>You are no longer in control about who has access to your data.</li>
</ul>

<h3><a class="title-link" name="cloud-pushing-new-state" href="#cloud-pushing-new-state"></a> Cloud pushing new state</h3>
<p>All off the previous section applies to this one. On top of that the cloud will now notify the home automation when a new state has arrived. This means that as soon as the cloud knows, the home automation knows.</p>

<p>Advantages:</p>

<ul>
  <li>New state known as soon as available in the cloud.</li>
</ul>

<h3><a class="title-link" name="polling-the-local-device" href="#polling-the-local-device"></a> Polling the local device</h3>
<p>These devices will offer an API that is locally accessible. The home automation will have to frequently check if the state has been updated.</p>

<p>Advantages:</p>

<ul>
  <li>Does not depend on the internet</li>
</ul>

<p>Disadvantages:</p>

<ul>
  <li>To be pollable, a device needs to be always online which requires the device to be connected to a power source.</li>
</ul>

<h3><a class="title-link" name="local-device-pushing-new-state" href="#local-device-pushing-new-state"></a> Local device pushing new state</h3>
<p>The best of the best. These devices will send out a notice when they get to a new state. These devices usually use a home automation protocol to pass it’s message to a hub that will do the heavy lifting of managing and notifying subscribers</p>

<p>Advantages:</p>

<ul>
  <li>Near instant delivery of new states.</li>
  <li>Able to get a long battery life by going into deep sleep between state updates.</li>
</ul>

<p>Disadvantages:</p>

<ul>
  <li>If it does not also support polling, home automation will not be made aware of the state after booting up until it changes.</li>
  <li>If using deep sleep and wifi, will suffer a delay when waking up because connecting to WiFi and receiving an IP takes time.</li>
</ul>

<h2><a class="title-link" name="control" href="#control"></a> Control</h2>

<p>Controlling a device can, just like state, be done through cloud and/or local connectivity. But the more important part of control is knowing if your command was a success and the new state of the device.</p>

<h3><a class="title-link" name="no-control-available" href="#no-control-available"></a> No control available</h3>
<p>These devices are not able to be controlled. They will only offer state.</p>

<h3><a class="title-link" name="poll-state-after-sending-command" href="#poll-state-after-sending-command"></a> Poll State after sending command</h3>
<p>These devices will require the state to be polled after sending a command to see if a command was successfull.</p>

<p>Advantages:</p>

<ul>
  <li>The state will be known right after the command was issued.</li>
</ul>

<p>Disadvantages:</p>

<ul>
  <li>It can take time before the state gets updated. How often do we poll and how long do we wait till we consider the command failed? Also, a state may change because of other factors. Difficult to determine if the updated state is because of our command.</li>
</ul>

<h3><a class="title-link" name="device-pushes-state-update" href="#device-pushes-state-update"></a> Device pushes state update</h3>
<p>These devices will not return a new state as a result of the command but instead will push a new state right away. The downside of this approach is that we have to assume that a state update coming in within a certain period of time after a command is related to the command.</p>

<h3><a class="title-link" name="command-returns-new-state" href="#command-returns-new-state"></a> Command returns new state</h3>
<p>The very best. These devices will answer the command with the new state after executing the command.</p>

<h2><a class="title-link" name="classifying-home-assistant" href="#classifying-home-assistant"></a> Classifying Home Assistant</h2>
<p>Home Assistant tries to offer the best experience possible via its APIs. There are different ways of interacting with Home Assistant but all are local.</p>

<ul>
  <li>State polling is available via the REST API</li>
  <li>There is a stream API that will push new states as soon as they arrive to subscribers. This is how the frontend is able to always stay in sync.</li>
  <li>Calling a service on Home Assistant will return all states that changed while the service was executing. This sadly does not always include the new state of devices that push their new state, as they might arrive after the service has finished.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smarter SmartThings with MQTT and Home Assistant]]></title>
    <link href="https://home-assistant.io/blog/2016/02/09/smarter-smart-things-with-mqtt-and-home-assistant/"/>
    <updated>2016-02-09T07:44:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/02/09/Smarter-Smart-Things-with-MQTT-and-Home-Assistant</id>
    <content type="html"><![CDATA[<p><em>This is a guest post by Home Assistant users <a href="https://github.com/jer">Jeremiah Wuenschel</a> and <a href="https://github.com/stjohnjohnson">St. John Johnson</a>.</em></p>

<p>So you own a <a href="http://smartthings.com">SmartThings</a> Hub. You probably bought it when you were looking to get into the whole Home Automation hobby because it worked with pretty much everything and offered you the ability to automate <strong>anything.</strong> After a week of ownership, you realized that building dashboards and automating required writing way more Groovy then you expected. Then one day you were browsing <a href="https://www.reddit.com/r/homeautomation">reddit</a> and discovered the amazingness that is Home Assistant! A solution that offered dashboards, graphs, working support for Nest, and REAL EASY automation!</p>

<p>You spent your weekend getting everything set up, showing it off to your significant other, but in the end you got stumped when it came to integrating with all your existing SmartThings toys. What do I do now? Should I buy another hub? Should I just buy a Z-Wave stick?</p>

<p>That’s where we came in. We wanted a solution that can bridge the awesomeness of Home Assistant with the SmartThings hub that works with almost everything.</p>

<p class="img">
  <img src="https://home-assistant.io/images/blog/2016-02-smartthings/splash.png" />
</p>

<!--more-->

<h2>Glossary</h2>

<p>This is going to be a pretty detailed tutorial on setting up our SmartThings bridge. However, there are a couple key terms that <em>might</em> be new to you:</p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/MQTT">MQTT</a>: A lightweight message protocol for listening and publishing events that happen. Many home automation platforms have built in support for this <a href="https://home-assistant.io/components/mqtt/">(especially Home Assistant)</a>.</li>
  <li><a href="https://www.docker.com/">Docker</a>: A tool for running applications that are self-contained. No need for installing any dependencies or worrying about conflicts. Installs easily on Linux and OSX.</li>
</ul>

<h2>Setting up the Bridge</h2>

<h3>MQTT</h3>

<p>Assuming that you already have Home Assistant and Smart Things running, you will first want to get an MQTT broker running. There are a handful of <a href="http://mosquitto.org/">MQTT</a> <a href="https://github.com/emqtt/emqttd">brokers</a> available in Open Source land. We chose <a href="http://www.mosca.io/">Mosca</a> for its simplicity.</p>

<p>There is very little you need to do to get Mosca running. The easiest approach is to use <a href="https://www.docker.com/">Docker</a>, and run a command like the following:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ docker run \
    -d \
    --name=&quot;mqtt&quot; \
    -v /opt/mosca:/db \
    -p 1883:1883 \
    matteocollina/mosca
</pre></div>
</div>
</div>

<p>This will start Mosca up inside of a docker container, while keeping persistent storage for Mosca in <code>/opt/mosca</code>. The default configuration is the only thing we need to get things up and running.</p>

<p>If you don’t want to mess with Docker and can get node.js installed without trouble, the <a href="https://github.com/mcollina/mosca#standalone">standalone</a> instructions are all you need.</p>

<h3>MQTT Bridge</h3>

<p>This is the small piece of magic that bridges the gap between MQTT and SmartThings. It is a node.js app, and like Mosca it is probably easiest to install with Docker:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ docker run \
    -d \
    --name=&quot;mqtt-bridge&quot; \
    -v /opt/mqtt-bridge:/config \
    -p 8080:8080 \
    stjohnjohnson/smartthings-mqtt-bridge
</pre></div>
</div>
</div>

<p>The code for this bridge is <a href="https://github.com/stjohnjohnson/smartthings-mqtt-bridge">on Github</a> if you want to start it up independently.</p>

<p>The MQTT Bridge only needs to know where your MQTT broker lives. If you are using these docker commands as-is, edit <code>/opt/mqtt-bridge/config.yml</code> to look like this:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="head"><span class="head">---</span></span>
<span class="key">mqtt</span>:
    <span class="key">host</span>: <span class="string"><span class="content">&lt;IP of the host&gt;</span></span>
</pre></div>
</div>
</div>

<p>Restart the bridge, and you are ready to go:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>$ docker restart mqtt-bridge
</pre></div>
</div>
</div>

<h3>SmartThings Device</h3>

<p>The next step (and possibly the most confusing) is the device type. Go to the <a href="https://graph.api.smartthings.com/ide/devices">Smart Things Device IDE</a> and <code>Create New Device Handler</code>. Choose <code>From Code</code> and paste in the <a href="https://github.com/stjohnjohnson/smartthings-mqtt-bridge/blob/master/devicetypes/stj/mqtt-bridge.src/mqtt-bridge.groovy">MQTT Bridge Device Code</a>. Click <code>Save</code>, <code>Publish</code>, and then <code>For Me</code>.</p>

<p>Now to install your new Device Handler. Go back to <code>My Devices</code> in the IDE, and click <code>New Device</code>. Enter a name, and pick any random set of characters for the Device Network Id (this will automatically update later). For Type, scroll to the bottom of the list and find your newly created <code>MQTT Bridge</code>. Fill in the other boxes however you like.</p>

<p>Go back to <code>My Devices</code>, and click on your new device in the list. This will bring up a page that allows you to edit your device’s Preferences. Click <code>edit</code> and fill in the 3 pieces of information it asks for.</p>

<ul>
  <li>MQTT Bridge IP Address: &lt;IP address of the MQTT Bridge from the previous step&gt;</li>
  <li>MQTT Bridge Port: &lt;8080 if you have changed nothing in the previous commands&gt;</li>
  <li>MQTT Bridge MAC Address: &lt;Mac address of machine running the Bridge code&gt;</li>
</ul>

<p>This will create the link between SmartThings and the MQTT Bridge.</p>

<h3>SmartThings App</h3>

<p>The last step is to setup the SmartApp. After this, any registered devices will start sending their events to MQTT.</p>

<p>Go to the <a href="https://graph.api.smartthings.com/ide/apps">Smart App IDE</a>. Click <code>New SmartApp</code>, followed by <code>From Code</code>. Paste in the <a href="https://github.com/stjohnjohnson/smartthings-mqtt-bridge/blob/master/smartapps/stj/mqtt-bridge.src/mqtt-bridge.groovy">MQTT Bridge SmartApp code</a> and click <code>Save</code>. Click <code>Publish</code> and then <code>For Me</code>. In the SmartThings mobile app, add the new SmartApp and configure it with your devices and MQTT Bridge device. Clicking <code>done</code> will subscribe SmartThings to your MQTT broker and begin 2-way propagation of events.</p>

<h3>Configure Home Assistant</h3>

<p>To add SmartThings devices to Home Assistant over MQTT, first enable MQTT in Home Assistant:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">mqtt</span>:
  <span class="key">broker</span>: <span class="string"><span class="content">localhost</span></span>
</pre></div>
</div>
</div>

<p>Replace <code>localhost</code> with the location of the running MQTT Broker. Devices from the MQTT Bridge are published to the path <code>smartthings/&lt;Device Name&gt;/&lt;Atribute&gt;</code></p>

<p>For example, my Dimmer Z-Wave Lamp is called “Fireplace Lights” in SmartThings. The following topics are published:</p>

<table>
  <thead>
    <tr>
      <th>Topic</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>smartthings/Fireplace Lights/level</td>
      <td>Brightness (0-99)</td>
    </tr>
    <tr>
      <td>smartthings/Fireplace Lights/switch</td>
      <td>Switch State (on/off)</td>
    </tr>
  </tbody>
</table>

<p>Here is an example Home Assistant config:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">switch</span>:
  <span class="key">platform</span>: <span class="string"><span class="content">mqtt</span></span>
  <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Fireplace Lights</span><span class="delimiter">&quot;</span></span>
  <span class="key">state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">smartthings/Fireplace Lights/switch</span><span class="delimiter">&quot;</span></span>
  <span class="key">command_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">smartthings/Fireplace Lights/switch</span><span class="delimiter">&quot;</span></span>
  <span class="key">brightness_state_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">smartthings/Fireplace Lights/level</span><span class="delimiter">&quot;</span></span>
  <span class="key">brightness_command_topic</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">smartthings/Fireplace Lights/level</span><span class="delimiter">&quot;</span></span>
  <span class="key">payload_on</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">on</span><span class="delimiter">&quot;</span></span>
  <span class="key">payload_off</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">off</span><span class="delimiter">&quot;</span></span>
  <span class="key">retain</span>: <span class="string"><span class="content">true</span></span>
</pre></div>
</div>
</div>

<p>We recommend <code>retain: true</code> for every MQTT device in order to keep states in sync when things become disconnected.</p>

<p>Start digging through the <a href="https://home-assistant.io/components/mqtt/">MQTT Components</a> in Home Assistant to find which components map to the new events being published to MQTT.</p>

<h3>Configuring with Docker-Compose</h3>

<p>Our personal preference for starting the whole suite of software is to use a single Docker-Compose file. Just create a file called <code>docker-compose.yml</code> like this:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="key">mqtt</span>:
    <span class="key">image</span>: <span class="string"><span class="content">matteocollina/mosca</span></span>
    <span class="key">ports</span>:
        - <span class="string"><span class="content">1883:1883</span></span>

<span class="key">mqttbridge</span>:
    <span class="key">image</span>: <span class="string"><span class="content">stjohnjohnson/smartthings-mqtt-bridge</span></span>
    <span class="key">volumes</span>:
        - <span class="string"><span class="content">./mqtt-bridge:/config</span></span>
    <span class="key">ports</span>:
        - <span class="string"><span class="content">8080:8080</span></span>
    <span class="key">links</span>:
        - <span class="string"><span class="content">mqtt</span></span>

<span class="key">homeassistant</span>:
    <span class="key">image</span>: <span class="string"><span class="content">homeassistant/home-assistant:latest</span></span>
    <span class="key">ports</span>:
        - <span class="string"><span class="content">80:80</span></span>
    <span class="key">volumes</span>:
        - <span class="string"><span class="content">./home-assistant:/config</span></span>
        - <span class="string"><span class="content">/etc/localtime:/etc/localtime:ro</span></span>
    <span class="key">links</span>:
        - <span class="string"><span class="content">mqtt</span></span>
</pre></div>
</div>
</div>

<p>This will start home-assistant, MQTT, and the Bridge, in dependency order. All config can reference the name of the docker container instead of using IP addresses (e.g. mqtt for the broker host in Home Assistant).</p>

<h3>How it works</h3>

<p><strong>HTTP Endpoint</strong>: There are really only 2 ways to communicate with the SmartThings hub that we could find. The easiest approach is to create a RESTful SmartApp authenticated with OAuth that provides state changes via HTTP directly. This approach is pretty straightforward to implement, but it requires communication with the SmartThings cloud service, and can’t be done entirely on your LAN. We hoped to keep all communication internal, and came up with a second approach.</p>

<p><strong>Custom Device Type:</strong> SmartThings custom device types allow developers to define handlers for HTTP events received directly over the local network by the SmartThings hub. Messages received are authenticated by MAC address, and can contain arbitrary strings in their payload. Since a Device Type is only ever tied to a single device, we need to add a SmartApp to the mix in order to translate events between individual devices and our special Home Assistant Bridge device. Here is what we have so far:</p>

<div class="highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre>Z-Wave Switch        |
Zigbee motion sensor |&lt;---&gt; Bridge App &lt;---&gt; Bridge Device Type &lt;---&gt; &lt;Local network&gt;
Z-Wave light bulb    |
</pre></div>
</div>
</div>

<p>On the Home Assistant side, there is a powerful platform available based on the MQTT lightweight message bus protocol. Everything from lights to switches to temperature sensors can be defined in Home Assistant as an MQTT component, so it makes for a convenient integration point. This requires an MQTT broker for handling the message bus, and one last piece to translate between the HTTP that SmartThings supports and MQTT.</p>

<p>Here is the final sequence of events:</p>

<p class="img">
  <a href="https://home-assistant.io/images/blog/2016-02-smartthings/SmartThings-HomeAssistant.png">
    <img src="https://home-assistant.io/images/blog/2016-02-smartthings/SmartThings-HomeAssistant.png" alt="SmartThings Bridge Sequence" />
  </a>
  SmartThings Bridge Sequence
</p>

<p>There are a lot of stops along the way for these events, but each piece is a simple translation layer to shuttle the events between systems.</p>

<h3>Future Improvements</h3>
<ul>
  <li><strong>Raspberry pi</strong>: There is a lot of interest in getting this running on the Raspberry Pi. It only requires binaries compiled for ARM, so we plan to get ARM-compatible versions of the containers going at some point.</li>
  <li><strong>Authentication for MQTT</strong>: At the moment, the MQTT bridge doesn’t understand how to authenticate to MQTT, so only unauthenticated MQTT is supported. This is mitigated to some degree if you use our Docker Compose config, because MQTT’s port is not actually shared publicly.</li>
  <li><strong>Authentication for MQTT Bridge</strong>: Right now the bridge expects that anyone subscribing is the SmartThings hub. This could use proper authentication.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.12: Insteon, LIFX, Twitter and ZigBee]]></title>
    <link href="https://home-assistant.io/blog/2016/01/30/insteon-lifx-twitter-and-zigbee/"/>
    <updated>2016-01-30T08:22:00+00:00</updated>
    <id>https://home-assistant.io/blog/2016/01/30/insteon-lifx-twitter-and-zigbee</id>
    <content type="html"><![CDATA[<p>Another sprint has come to an end and it seems that we have not slowed down a single bit 🚀. 0.12 is full of new components, platforms and organizational additions.</p>

<p>I would like to give a shout out to <a href="https://github.com/pavoni">Greg Dowling (@pavoni)</a> as every release includes new work from him. He is constantly adding support for new platforms or improving the reliablity of existing components and platforms. Keep up the good work!</p>

<p>This release includes a very frequent requested feature: the ability to organize entities in different tabs in the frontend. See <a href="https://home-assistant.io/demo/">the demo</a> to see this in action and read more in the <a href="https://home-assistant.io/components/group/">group documentation</a> how to get started.</p>

<p class="img">
<a href="https://home-assistant.io/demo/"><img src="https://home-assistant.io/images/blog/2016-01-release-12/views.png" /></a>
Example of the new views in the frontend. <a href="https://home-assistant.io/components/group/">Learn more.</a>
</p>

<p><img src="https://home-assistant.io/images/supported_brands/insteon.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/lifx.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/twitter.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/zigbee.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /><img src="https://home-assistant.io/images/supported_brands/google_voice.png" style="clear: right; border:none; box-shadow: none; float: right; margin-bottom: 16px;" width="150" /></p>

<ul>
  <li>Binary sensor: <a href="https://home-assistant.io/components/binary_sensor.command/">command sensor</a> added (<a href="https://github.com/Bart274">@Bart274</a>)</li>
  <li><a href="https://home-assistant.io/components/nest/">Nest</a> support extended to include sensors and binary sensors (<a href="https://github.com/joshughes">@joshughes</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.lifx/">LIFX</a> platform added (<a href="https://github.com/TangoAlpha">@TangoAlpha</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.twitter/">Twitter</a> platform added (<a href="https://github.com/HydrelioxGitHub">@HydrelioxGitHub</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.template/">Template</a> platform added (<a href="https://github.com/pavoni">@pavoni</a>)</li>
  <li>Switch: <a href="https://home-assistant.io/components/wink/">Wink</a> platform now supports sirens (<a href="https://github.com/w1ll1am23">@w1ll1am23</a>)</li>
  <li><a href="https://home-assistant.io/components/insteon_hub/">Insteon hub</a> support added (<a href="https://github.com/FreekingDean">@FreekingDean</a>)</li>
  <li><a href="https://home-assistant.io/components/statsd/">Statsd</a> component added (<a href="https://github.com/michaelkuty">@michaelkuty</a>)</li>
  <li>Light: <a href="https://home-assistant.io/components/light.rfxtrx/">Rfxtrx</a> platform now supports dimming (<a href="https://github.com/turbokongen">@turbokongen</a>)</li>
  <li>Time scheduling (including <a href="https://home-assistant.io/getting-started/automation-trigger/#time-trigger/">time automation</a>) now works with intervals (ie. <code>/5</code>) (<a href="https://github.com/kennedyshead">@kennedyshead</a>)</li>
  <li>Sensor: <a href="https://home-assistant.io/components/sensor.onewire/">onewire</a> support added (<a href="https://github.com/deisi">@deisi</a>)</li>
  <li><a href="https://home-assistant.io/components/zigbee/">Zigbee</a> support added (<a href="https://github.com/flyte">@flyte</a>)</li>
  <li>Device Tracker: <a href="https://home-assistant.io/components/device_tracker.owntracks/">OwnTracks</a> can now track iBeacons (<a href="https://github.com/pavoni">@pavoni</a>)</li>
  <li>Notify: <a href="https://home-assistant.io/components/notify.google_voice/">Google Voice SMS</a> platform added (<a href="https://github.com/w1ll1am23">@w1ll1am23</a>)</li>
  <li>Toggle service added to <code>homeassistant</code>, <code>switch</code>, <code>light</code> and <code>media_player</code> (<a href="https://github.com/rmkraus">@rmkraus</a>)</li>
  <li><a href="https://home-assistant.io/components/thermostat/">Thermostat</a> services added to control fans (<a href="https://github.com/auchter">@auchter</a>)</li>
  <li>Improved Python automation: Event helpers are now also available as decorators for custom components (<a href="https://github.com/rmkraus">@rmkraus</a>)</li>
  <li>Frontend: support added for tabs to show <a href="https://home-assistant.io/components/group/">different views</a> of your house (<a href="https://github.com/balloob">@balloob</a>)</li>
  <li>Bugfixes by <a href="https://github.com/molobrakos">@molobrakos</a>, <a href="https://github.com/MartinHjelmare">@MartinHjelmare</a>, <a href="https://github.com/pavoni">@pavoni</a>, <a href="https://github.com/trollkarlen">@trollkarlen</a>, <a href="https://github.com/zmrow">@zmrow</a>, <a href="https://github.com/maddox">@maddox</a>, <a href="https://github.com/persandstrom">@persandstrom</a>, <a href="https://github.com/happyleavesaoc">@happyleavesaoc</a>, <a href="https://github.com/balloob">@balloob</a>, <a href="https://github.com/fabaff">@fabaff</a>, <a href="https://github.com/stefan-jonasson">@stefan-jonasson</a>, <a href="https://github.com/haraldnagel">@haraldnagel</a>.</li>
</ul>

<h3>Backwards incompatible changes</h3>
<ul>
  <li>Nest config has moved from thermostat to the <a href="https://home-assistant.io/components/nest/">Nest component</a>.</li>
  <li>Entity IDs for Z-Wave devices are now generated in a deterministic way causing all IDs to change starting this release. This is a one time change.</li>
</ul>
]]></content>
  </entry>
  
</feed>

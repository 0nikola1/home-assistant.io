<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: frontend | Home Assistant]]></title>
  <link href="https://home-assistant.io/blog/categories/frontend/atom.xml" rel="self"/>
  <link href="https://home-assistant.io/"/>
  <updated>2015-09-11T09:24:25-07:00</updated>
  <id>https://home-assistant.io/</id>
  <author>
    <name><![CDATA[Paulus Schoutsen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Streaming updates]]></title>
    <link href="https://home-assistant.io/blog/2015/02/24/streaming-updates/"/>
    <updated>2015-02-24T22:41:27-08:00</updated>
    <id>https://home-assistant.io/blog/2015/02/24/streaming-updates</id>
    <content type="html"><![CDATA[<p>Home Assistant has learned a new trick to get the latest information from the server: streaming updates. No longer will the frontend poll every 30 seconds for updates but instead it will keep a connection open and get the latest changes pushed as soon as they happen.</p>

<p>A new toggle has been added ot the sidebar to turn streaming updates on and off. This preference will be saved on a per-browser basis using local storage. The toggle will also indicate when there is an error setting up a stream after which it will fall back to use polling.</p>

<p class='img'><img src='https://home-assistant.io/images/screenshots/streaming-updates.png' /></p>




<!--more-->


<p>Streaming updates has been implemented using the HTML5 <code>EventSource</code> tag. Implementation is pretty straight forward as all the reconnection logic will be handled by the event source tag. The <a href="https://github.com/balloob/home-assistant/blob/master/homeassistant/components/api.py#L90">server-side code</a> is 50 lines and the <a href="https://github.com/balloob/home-assistant-js/blob/master/src/actions/stream.js">client-side code</a> is 80 lines of code.</p>

<p>All events that happen on the server will now also be sent to the browser. This turns any browser running the UI into a fully functioning <a href="https://home-assistant.io/developers/architecture.html#multiple-connected-instances">slave instance</a> of Home Assistant. This opens up new possibilities for Home Assistant components that live completely client-side.</p>

<p>Implementing EventSource was not without challenges. Here are some of the issues that had to be solved:</p>

<p>A connection can go stale in Chrome without any event handler being called. This happens when a device goes into standby. For computers this is rare but for phones this occurs quite often. This has been solved by sending a regular ping from the server. The frontend will assume the connection has gone stale when it hasn&rsquo;t heard any communication for a while. Sending a ping will also help the server detect broken connections and clean them up.</p>

<p>Another issue that I encountered is that Safari and Firefox would not fire the <code>open</code> event when the connection has been opened but when the first message has been received. To work around this the server will now fire a ping when the connection gets opened.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking at the past]]></title>
    <link href="https://home-assistant.io/blog/2015/02/08/looking-at-the-past/"/>
    <updated>2015-02-08T09:01:23-08:00</updated>
    <id>https://home-assistant.io/blog/2015/02/08/looking-at-the-past</id>
    <content type="html"><![CDATA[<p>Ever since the launch of Home Assistant you have been able to track the state of your house. But the view has always been limited to what the current state is. Not what it was. Today we are going to change that by introducing two brand new components:</p>

<ul>
<li>Recorder component that will record every event to a SQLite database</li>
<li>History component that will query and aggregate the recorded events</li>
</ul>


<p>By adding this view into the past, we are adding an extra dimension into the state of your house. This brings great new possibilities for future features. The focus of todays release is on getting the recording component to you to start recording and getting some data. To show what is being recorded a view has been added that shows the last 24 hours of your house. Expect more extensive tools to explore your history in the future.</p>

<p>Adding history to the UI was a challenge on itself because the old UI did not support easy navigation. So to add to the awesomeness of this release, Home Assistant also got a face lift.</p>

<p>The history component will be enabled for new users by default. For current users, run <code>scripts/update</code> to upgrade to the latest version and add <code>[history]</code> to your <code>home-assistant.conf</code> file.</p>

<p class='img'>
  <a href='/images/screenshots/component_history_24h.png'>
    <img src='/images/screenshots/component_history_24h.png' />
  </a>
</p>




<p class='note'>
Events are saved in a local database. Google Graphs is used to draw the graph. Drawing is happening 100% in your browser - no data is transfered to anyone at any time.
</p>




<!--more-->


<p>Tracking history is an exciting next step for Home Assistant and will power the next generation of features. Here a list of some of the cool things that can now be build:</p>

<ul>
<li>Time Machine: explore the state of your house at any point in the past</li>
<li>Smart Home: analyze behavior and use it to automate your house</li>
<li>Summarize usage of the different components of your house</li>
</ul>

]]></content>
  </entry>
  
</feed>
